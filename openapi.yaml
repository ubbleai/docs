openapi: 3.0.3

info:
  title: Checkout.com - Identity Verification
  x-logo:
    url: "https://raw.githubusercontent.com/ubbleai/docs/main/cko_doc_logo.png"
  description: |
    
    # Introduction

    Welcome to [Checkout.com](https://www.checkout.com/)'s Identity Verification API documentation. 

    Our solution enables you to identify and verify users with precision – helping you meet compliance requirements and reduce the risk of fraud.
    - Fight fraud and verify users with [identity verification](#tag/Identity-verification). 
    - Assess and monitor risk using built-in [anti-money laundering (AML) verification](#tag/aml-verification)
    - Re-authenticate users without compromising conversion - secure [face authentication](#tag/Face-authentication)
    
    For user-facing implementations, you can either redirect users to our hosted [web application](#tag/web-integration) or integrate our [SDK](#tag/sdk-integration) to create a custom mobile experience.

    ## Before you begin

    - Reach out to your Account Manager or support.idv@checkout.com to get a test account. 

    - Open the [dashboard](https://dashboard.ubble.ai/) and navigate to the "API credentials" tab to create your certificate. We use mutual Transport Layer Security. 
    You must then authenticate your calls by including your mTLS certificate in API calls.

    - To receive notifications for the various identity verification events triggered throughout the steps, you will need to define a
    webhook url. You will find all details about webhook implementation in the [webhook section](#section/Webhooks).

    <!-- # Create a test verification

    <div style="padding: 0px 0px 14px 14px ; background-color: #cfe5ff; border-color: #f8c92e; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; vertical-align: center;">ⓘ</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>To start testing the integration you can use the helper described here. 
        For the actual implementation, we strongly recommend the use of the RESTful endpoints as described in the Identity verification section.</p>
      </div>
    </div>
    
    ### Request example
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/create-and-start-idv</span>
    </div>

    ```json
    {
      "declared_data": {
        "name": "David Vincent"
      },
      "webhook_url": "https://my.api/events/",
      "redirect_url": "https://myweb.site?query-param=hello"
    }
    ```

    ### Response example

    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr7we",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr7we",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr7we",
      "status": "pending",
      "response_codes": [],
      "declared_data": {
        "name": "David Vincent"
      },
      "documents": [],
      "webhook_url": "https://my.api/events/",
      "redirect_url": "https://myweb.site?query-param=hello",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
        },
        "applicant": {
          "href": "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```

    The identity verification response contains a `_links.verification_url.href` field. 
    To test the identity verification process, open the URL on your browser and follow the instructions displayed.

    -->
    
    # Applicant profiles

    To perform verifications of an individual you will first need to create an applicant resource.   
    An applicant is a physical person to be verified and should correspond to one of your users.

    To create an applicant call the [Create an applicant](#tag/Applicants/operation/create_applicant) endpoint. 
    
    Optionally, provide the following fields:

    - `external_applicant_id` – Your identifier for the user
    - `email` – The user's email address

    Make a note of the applicant `id` value in the response. You'll need it to create verifications later.

    For more details, see our [Applicant endpoints](#tag/Applicants).

    Once you have created an applicant, you can start creating verifications as described in the sections below. 
    
    # Identity verification

    The Identity Verification solution enables you to verify the identity of new users who want to onboard with you. 
    This helps you meet compliance requirements and reduce the risk of fraud.

    The following represents a typical identity verification flow:

    ![](https://raw.githubusercontent.com/ubbleai/docs/refs/heads/staging/idv_flow.png)

    - **You create an identity verification**, using the applicant id you received when [creating an applicant](#tag/Applicants/operation/create_applicant). 
    - **You create an attempt.** You'll receive a unique verification URL. 
    - **You redirect the applicant.** You can either redirect the applicant toward our web application or create you own mobile journey using our SDK integration. 
    - **The applicant performs verification on their mobile device**. They use their device camera to scan their face and documents.
    - **You receive the verification results via a [webhook](#section/Webhooks).** You can also
    request more detailed results via the [API](#tag/Identity-verifications/operation/retrieve_identity_verification),
    or download a [PDF report](#tag/Identity-verifications/operation/pdf_identity_verification).
    - **You decide on follow-up actions based on the verification results.** You can also reattempt the identity verification if required.

    ## Create an identity verification

    To create an identity verification call the [Create an identity verification](#tag/Identity-verifications/operation/create_identity_verification) endpoint, and provide the following fields:
    - `applicant_id` – The applicant id from the Create an applicant response
    - `declared_data.name` – The user's name
    - `webhook_url` - The URL you want to be notified on
    - `user_journey_id` – The user journey configuration

    Make a note of the identity verification `id` value in the response. You'll need it to create an attempt and retrieve the detailed results.

    When you request to enable Identity Verification, your Account Manager provides you a user journey ID. For example, `usj_tkoi5db4hryu5cei5vwoabr7we`.
    You can configure the following elements of the flow:
    - The identity verification offer: highly automated, with manual reviews, or certified identity verification. 
    - The documents you want to accept, if supported by Checkout.com. 
    - The data you want to extract from documents. 
    - The guaranteed response time from Checkout.com. 

    You can also ask applicants to submit an additional document in addition to the main document. 
    For example you ask applicants to present a driving license in addition to their Identity document.
    
    Please note that possible response codes may vary depending on your configuration. 

    ## Create an attempt

    To create an attempt call the [Create an attempt](#tag/Identity-verifications/operation/create_attempt) endpoint using the `identity_verification_id` and provide the following fields:
    - `redirect_url` – The url the applicant will be redirected to once the capture is completed. 
    - Optionally:
      - `phone_number` object – The user's mobile phone number for receiving the `verification_url`. 
      - `client_information` obejct – Used to pre-select fields in the web flow. This shortens the web flow and improves the experience.

    ## Redirect the user

    The create an attempt response contains a `_links.verification_url.href` field. 
    To test the web flow, open the `verification_url` on your browser and follow the instructions.
    To complete your integration, you will have to redirect applicants to our web application (see [Web integration](#section/Web-integration)) or to use our SDK integration. 
    
    ## Verify webhook notifications

    Once you've configured your webhook receiver, you'll be notified of events that occur during the identity verification flow via webhooks. 
    For more details see the [Webhook](#section/Webhooks) section. 
    
    Events include an event `type` and the verification `status`. You can rely on this information to decide on follow-up actions. 


    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 30%" scope="col">Event type</th>
          <th style="width: 25%" scope="col">Status</th>
          <th style="width: 45%" scope="col">Recommended action</th>
        </tr>
        <tr>
          <td style="width: 30%">
            <p>
              <code>identity_verification_capture_completed</code> 
            </p>
          </td>
          <td style="width: 25%">
            <p>
            <code>approved</code> 
            </p>
          </td>
         <td style="width: 45%">
            <p>
            <a href="#section/Identity-verification/Retrieve-detailed-results" target="_blank">Retrieve detailed results</a> and approve the applicant request.
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 30%">
              <code>identity_verification_capture_completed</code> 
          </td>
          <td style="width: 25%">
            <p>
            <code>declined</code> 
            <p>
          </td>
          <td style="width: 45%">
            <p>Decline the applicant request.<p>
          </td>
        </tr>
        <tr>
          <td style="width: 30%">
            <p><code>identity_verification_capture_refused</code></p>
          </td>
          <td style="width:25%">
            <p>
            <code>refused</code> 
            </p>
          </td>
          <td style="width: 45%">
            <p>
              Propose an alternative verification method. 
            </p>
          </td>
        </tr>
                <tr>
          <td style="width: 30%">
            <p><code>identity_verification_capture_aborted </code></p>
          </td>
          <td style="width: 25%">
            <p>
            <code>retry_required</code> 
            </p>
          </td>
          <td style="width: 45%">
            <p>
            <a href="#section/Identity-verification/Manage-retries" target="_blank">Request a retry</a>. 
            </p>
          </td>
        </tr>
                <tr>
          <td style="width: 30%">
            <p><code>identity_verification_checks_inconclusive </code></p>
          </td>
          <td style="width: 25%">
            <p>
            <code>retry_required</code> 
            </p>
          </td>
           <td style="width: 45%">
            <p>
            <a href="#section/Identity-verification/Manage-retries" target="_blank">Request a retry</a>. 
            </p>
          </td>
        </tr>
      </tbody>
    </table>

    You can also use the `response_codes` to implement your own business rules. 
    For more details and to decide on follow-up actions, see the [Reference info](#section/Reference-info) section. 

    ## Retrieve detailed results

    To retrieve the detailed verification results, call the [Retrieve an identity verification](#tag/Identity-verifications/operation/retrieve_identity_verification) endpoint with the identity verification id value returned in the Create an identity verification response. 

    If the status of the verification is `approved` or `declined` you will find all the information extracted from the document in the `document` object. 
    
    You will also receive the `identity_verification_report_created` event. 
    Call the [Retrieve PDF report](#tag/Identity-verifications/operation/pdf_identity_verification) to retrieve a PDF report containing all the information of the identity verification.

    ## Manage retries
    
    If the first attempt is unsuccessful and the verification status changes to `retry-required`, you can create a new attempt for the user to retry the flow.
    You can use the [Create an attempt](#tag/Identity-verifications/operation/create_attempt) endpoint. 
    
    We recommend sharing guidance from the response code with the applicant to help them succeed in their next attempt. 
    For example, if the user's data connection is poor, let them know so they can try to improve it.

    If verification status changes to `declined`, you will have to create a new identity verification if you want to allow the applicant to retry. 

    # Face Authentication

    The Face Authentication solution enables you to confirm a user is the same person whose identity you've successfully verified using the Identity Verification solution. 
    This helps you decide whether to allow them to access your services.

    ## Create a face authentication

    To create a face auhentication call the [Create a face authentication](#tag/Identity-verifications/operation/create_face_authentication) endpoint, and provide the following fields:
    - `applicant_id` – The applicant id from the Create an applicant response
    - `webhook_url` - The URL you want to be notified on
    - `user_journey_id` – The user journey configuration

    Make a note of the face authentication `id` value in the response. You'll need it to create an attempt and retrieve the detailed results.

    When you request to enable Face authentication, your Account Manager provides you a user journey ID. For example, `usj_tkoi5db4hryu5cei5vwoabr7we`.
    You can configure the following elements of the flow:
    - The offer: highly automated or with manual reviews. 
    - The guaranteed response time from Checkout.com. 

    <div style="padding: 0px 10px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center; border-radius: 0.5rem;">
    <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; color: #f8c92e; vertical-align: center;">⚠</div>
    <div style="display: table-cell; vertical-align: center;">
      <p>Please note that the applicant should be associated with a verified face video and this one should not have been anonymised. 
      A verified face video can be obtained through an approved identity verification or a previous face authentication. 
      Contact your account manager to adapt your data retention time. </p>
    </div>
    </div>
    

    ## Create an attempt

    To create an attempt call the [Create an attempt](#tag/Face-authentications/operation/create_attempt_face_authentication) endpoint using the `face_authentication_id` and provide the following fields:
    - `redirect_url` – The url the applicant will be redirected to once the capture is completed. 
    - Optionally:
      - `phone_number` object – The user's mobile phone number for receiving the `verification_url`. 
      - `client_information` obejct – Used to pre-select fields in the web flow. This shortens the web flow and improves the experience.


    ## Redirect the user

    The create an attempt response contains a `_links.verification_url.href` field. 
    To test the web flow, open the `verification_url` on your browser and follow the instructions.
    To complete your integration, you will have to redirect applicants to our web application (see [Web integration](#section/Web-integration)) or to use our SDK integration. 
    
    ## Verify webhook notifications

    Once you've configured your webhook receiver, you'll be notified of events that occur during the face authentication flow via webhooks. 
    For more details see the [Webhook](#section/Webhooks) section. 
    
    Events include an event `type` and the authentication `status`. You can rely on this information to decide on follow-up actions. 


    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 30%" scope="col">Event type</th>
          <th style="width: 25%" scope="col">Status</th>
          <th style="width: 45%" scope="col">Recommended action</th>
        </tr>
        <tr>
          <td style="width: 30%">
            <p>
              <code>face_authentication_capture_completed</code> 
            </p>
          </td>
          <td style="width: 25%">
            <p>
            <code>approved</code> 
            </p>
          </td>
         <td style="width: 45%">
            <p>
            <a href="#section/Face-authentication/Retrieve-detailed-results" target="_blank">Retrieve detailed results</a> and approve the applicant request.
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 30%">
              <code>face_authentication_capture_completed</code> 
          </td>
          <td style="width: 25%">
            <p>
            <code>declined</code> 
            <p>
          </td>
          <td style="width: 45%">
            <p>Decline the applicant request.<p>
          </td>
        </tr>
        <tr>
          <td style="width: 30%">
            <p><code>face_authentication_capture_refused</code></p>
          </td>
          <td style="width:25%">
            <p>
            <code>refused</code> 
            </p>
          </td>
          <td style="width: 45%">
            <p>
              Propose an alternative verification method. 
            </p>
          </td>
        </tr>
                <tr>
          <td style="width: 30%">
            <p><code>face_authentication_capture_aborted </code></p>
          </td>
          <td style="width: 25%">
            <p>
            <code>retry_required</code> 
            </p>
          </td>
          <td style="width: 45%">
            <p>
            <a href="#section/Face-authentication/Manage-retries" target="_blank">Request a retry</a>. 
            </p>
          </td>
        </tr>
                <tr>
          <td style="width: 30%">
            <p><code>face_authentication_checks_inconclusive </code></p>
          </td>
          <td style="width: 25%">
            <p>
            <code>retry_required</code> 
            </p>
          </td>
           <td style="width: 45%">
            <p>
            <a href="#section/Face-authentication/Manage-retries" target="_blank">Request a retry</a>. 
            </p>
          </td>
        </tr>
      </tbody>
    </table>

    You can also use the `response_codes` to implement your own business rules. 
    For more details and to decide on follow-up actions, see the [Reference info](#section/Reference-info) section. 

    
    ## Retrieve detailed results

    To retrieve the detailed verification results, call the [Retrieve a face authentication](#tag/Face-authentications/operation/retrieve_face_authentication) endpoint with the face authentication id value returned in the Create a face authentication response. 

    If the status of the authentication is `approved` or `declined` you will find the new face image in the face object.  

    ## Manage retries

    If the first attempt is unsuccessful and the authentication status changes to `retry-required`, you can create a new attempt for the user to retry the flow.
    You can use the [Create an attempt](#tag/Face-authentication/operation/create_attempt) endpoint. 
    
    We recommend sharing guidance from the response code with the applicant to help them succeed in their next attempt. 
    For example, if the user's data connection is poor, let them know so they can try to improve it.

    If authentication status changes to `declined`, you will have to create a new face authentication if you want to allow the applicant to retry. 

    # AML Verification

    After you have successfully verified an applicant's identity with Identity Verification, you can perform additional anti-money laundering (AML) verifications.

    In partnership with ComplyAdvantage, we propose you a solution to:

    - Screen Applicants in the Politically Exposed Person (PEP) lists, Sanction lists and Adverse media database. 
    - Get a risk score based on a customized model. 
    - Manually investigate cases. 
    - Monitor an applicant and get notified if an alert is raised.
    
    Please note that this offer is only available if you have also subscribed to ComplyAdvantage services, reach out your account manager if you are interested.
        
    ## Create an AML verification

    To create an AML verification call the [Create an AML verification](#tag/Identity-verifications/operation/create_aml_verification) endpoint, and provide the following fields:
    - `applicant_id` – The applicant id from the Create an applicant response
    - `webhook_url` - The URL you want to be notified on
    - `screening_configuration_identifier` - the identifier of the configuration you want to use to screen the applicant. It can be defined and retrieved via the ComplyAdvantage dashboard. 

    Make a note of the aml verification `id` value in the response. 

    <div style="padding: 0px 10px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center; border-radius: 0.5rem;">
    <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; color: #f8c92e; vertical-align: center;">⚠</div>
    <div style="display: table-cell; vertical-align: center;">
      <p>Please note that the applicant should be associated with an approved identity verification, so that we can send the relevant extracted data to ComplyAdvantage. </p>
    </div>
    </div>
    
    ## Set up an initial risk scoring 
    
    You can get an initial risk scoring based on a model that you can customize in the ComplyAdvantage dashboard. 
    
    The applicant will then be scored before the AML verification has been performed. The result of this scoring will be available as a `risk_level` and can be one of `LOW`, `MEDIUM`, `HIGH` or `PROHIBITED`.
    
    If the risk level is `PROHIBITED`, the AML verification is not performed and the `status` is declined. If the risk level is `LOW`, `MEDIUM` or `HIGH`, the AML verification will be performed and the results will depend on raised alerts. 
    
    ## Verify webhook notification

    Once you've configured your webhook receiver, you'll be notified of events that occur during the face authentication flow via webhooks. 
    For more details see the [Webhook](#section/Webhooks/AML-verification-events) section. 
    
    Events include an event `type` and the verification `status`. You can rely on this information to decide on follow-up actions. 


    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 30%" scope="col">Event type</th>
          <th style="width: 25%" scope="col">Status</th>
          <th style="width: 45%" scope="col">Recommended action</th>
        </tr>
        <tr>
          <td style="width: 30%">
            <p>
              <code>aml_verification_onboarding_completed</code> 
            </p>
          </td>
          <td style="width: 25%">
            <p>
            <code>approved</code> 
            </p>
          </td>
         <td style="width: 45%">
            <p>
            Approve the applicant request.
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 30%">
              <code>aml_verification_onboarding_completed</code> 
          </td>
          <td style="width: 25%">
            <p>
            <code>declined</code> 
            <p>
          </td>
          <td style="width: 45%">
            <p>Decline the applicant request.<p>
          </td>
        </tr>
        <tr>
          <td style="width: 30%">
            <p><code>aml_verification_onboarding_completed</code></p>
          </td>
          <td style="width:25%">
            <p>
            <code>review_required</code> 
            </p>
          </td>
          <td style="width: 45%">
            <p>
            <a href="#section/AML-Verification/Manually-investigate-the-results" target="_blank">Manually investigate the results</a>.
            </p>
          </td>
        </tr>
      </tbody>
    </table>

    For more details and to decide on follow-up actions, see the [Reference info](#section/Reference-info) section. 
    
    ## Manually investigate the results
    
    If the `status` is `review_required` you might want to investigate the case and determine if the applicant can access your service or not. You can do it via the ComplyAdvantage case management tool. 
    
    You will be able to review the alerts and to determine if you accept the risk associated to the case or not.
    
    - If you accept it, the status will switch to `approved`.
    - If you refuse it, the status will switch to `declined`.
    
    You will be notified if you change the `status` of an AML verification. The `event_type` field will be set to `aml_onboarding_review_completed` and the body will include the new `status`.

    ## Monitor an applicant
    
    If an applicant is monitored, you be notified if an alert is raised. 
    
    The `status` of the AML verification will switch to `review_required`.
    
    In this case, you will get a notification with the `event_type` field set to `aml_monitoring_alert` and the body will include the new `status`.
    
    You can then use the ComplyAdvantage case management tool to manually investigate the results. 
    
    When the review is completed, you will get a notification with the `event_type` field set to `aml_monitoring_review_completed` and the body will include the new `status`, depending of you decision to accept or not the risk related to the monitoring case.
    
    If you reopen the case later, you will get an event with the `event_type` field set to `aml_verification_status_changed`. 

    For more details see the [Webhook](#section/Webhooks) section. 

    # Web integration
    
    For the Identity Verification and Face Authentication solutions, you can redirect applicants on our web application. 

    <div style="padding: 0px 0px 14px 14px ; background-color: #cfe5ff; border-color: #f8c92e; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; vertical-align: center;">ⓘ</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>The default expiration time for the URL is 15 minutes. To ensure applicants are consistently redirected to a valid URL, it is strongly recommended to create a new attempt each time a user initiates the verification process..</p>
      </div>
    </div>

    ### How it works

    - Customize the user interface of the web flow, and check which languages are supported.

    - Set up your redirect integration using any of the following options:
      - Web redirection – App and website
      - iframes – App and website
      - WebView – App only

    - Applicants who start their journey on your desktop website are directed to their mobile. 


    ## Customize the verification user experience

    Contact your Account Manager or support.idv@checkout.com to customize the verification user experience.

    You can <a href="https://cdn.ubble.ai/config-cko/index.html" target="_blank">customize</a> the following elements on the verification screen displayed to your users:
    - logo
    - colors
    - fonts
    - button radius
    - message prompt text

    You can also pre-select customer details when creating an attempt for the verification request. 

    ## Redirect using web redirection

    For web redirection, we support the following environments and minimum browser versions:

    | Desktop      | Chrome | Firefox | Safari | Internet Explorer | Edge | Opera |
    |--------------|--------|---------|--------|-------------------|------|-------|
    | Min. Version | ≥ 53   | ≥ 52    | ≥ 11.1 | -                 | ≥ 16 | ≥ 58  |

    | Android      | Chrome for Android | Firefox for Android | Samsung Internet | IE Mobile |
    |--------------|--------------------|---------------------|------------------|-----------|
    | Min. Version | ≥ 73               | ≥ 66                | ≥ 6.2            | -         |

    | iOS          | Safari Mobile | Chrome | All other browsers |
    |--------------|---------------|--------|--------------------|
    | Min. Version | ≥ 11.0        | ≥ 14.3 | -                  |

    After you create a verification in your backend, you can integrate it within your website by passing the `verificationUrl` to your web app and adding it as a link:

    ```html
    <a href="`${verificationUrl}`"></a>
    ```

    <div style="padding: 0px 0px 14px 14px ; background-color: #cfe5ff; border-color: #f8c92e; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; vertical-align: center;">ⓘ</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>You can view an <a href="https://github.com/ubbleai/integration_examples/tree/master/web" target="_blank">example web integration</a> on our Identity Verification GitHub repository.</p>
      </div>
    </div>

    ### Handle user return in web redirection

    When the user completes or terminates their verification, they’ll be redirected to the `redirect_url` you specified when you requested a verification.

    The attempt status associated with the user’s verification is returned in the webhook notification, and as a URL parameter in the `redirect_url`. If verification was unsuccessful, the URL will also contain a `response_code` URL parameter. For example:

    ```
    https://your-redirect-url.com?id=idv_01h2623ysfkhpn7czed0bw8fd6&status=capture_aborted&response_code=61101
    ```

    Your follow-up action is determined by the attempt status:

    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 40%" scope="col">Status</th>
          <th style="width: 60%" scope="col">Follow-up action</th>
        </tr>
        <tr>
          <td style="width: 40%">
            <p>
              <code>capture_aborted</code> or
              <code>expired</code>
            </p>
          </td>
          <td style="width: 60%">
            <p>
            Create a new attempt.
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 40%">
            <p><code>capture_refused</code></p>
          </td>
          <td style="width: 60%">
            <p>Propose an alternative verification method to the user.<p>
          </td>
        </tr>
        <tr>
          <td style="width: 40%">
            <p><code> checks_in_progress </code></p>
          </td>
          <td style="width: 60%">
            <p>
              Wait until results are available. 
              When results are available you will receive an event with the attempt status <code>completed</code>. 
            </p>
          </td>
        </tr>
      </tbody>
    </table>


    ## Redirect using webview (Optional)

    For a more integrated redirection from your mobile application, you can redirect the user with a webview. Webview redirection is supported by the following platforms:
    - Android
    - iOS 13 or later – via WebRTC running inside a <a href="https://developer.apple.com/documentation/webkit/wkwebview" target="_blank">WKWebView</a>
    - iOS 12 or older – via the Safari browser by passing the `verificationUrl` to the `UIApplication.open()`
    <a href="https://developer.apple.com/documentation/uikit/uiapplication/1648685-open" target="_blank">method</a> in your app code
    - React Native
    - Flutter – using the `flutter_inappwebview` <a href="https://inappwebview.dev/docs/intro/" target="_blank">dependency</a>,
    with the <a href="https://inappwebview.dev/docs/web-rtc/" target="_blank">WebRTC API</a> so Identity Verification can launch a video stream

    <div style="padding: 0px 0px 14px 14px ; background-color: #cfe5ff; border-color: #f8c92e; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; vertical-align: center;">ⓘ</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>You can view <a href="https://github.com/ubbleai/integration_examples/tree/master" target="_blank">example webview integrations</a> for each platform on our Identity Verification GitHub repository.</p>
        </div>
    </div>
    <div/>

    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center; border-radius: 0.5rem; margin-top: 20px;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; color: #f8c92e; vertical-align: center;">⚠</div>
      <div style="display: table-cell; vertical-align: center;">
        <p> On iOS, you need to set the iOS-specific option <code>allowsInlineMediaPlayback</code> to <code>true</code>. See <a href="https://github.com/ubbleai/integration_examples/blob/master/UbbleReactNative/UbbleWebView.js#L14" target="_blank">this example</a> in react-native. </p>

      </div>
    </div>

    ### Handle user return in webview

    When the user completes or terminates their verification, they’ll be redirected to the `redirect_url` you specified when you requested a verification.
    With a webview integration, you’re expected to provide a deeplink to redirect the user on your mobile application.

    The attempt status associated with the user’s verification is returned in the webhook notification, and as a URL parameter in the `redirect_url`. If verification was unsuccessful, the URL will also contain a `response_code` URL parameter. For example:

    ```
    https://your-redirect-url.com?id=idv_01h2623ysfkhpn7czed0bw8fd6&status=capture_aborted&response_code=61101
    ```

    Your follow-up action is determined by the attempt status:

    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 40%" scope="col">Status</th>
          <th style="width: 60%" scope="col">Follow-up action</th>
        </tr>
        <tr>
          <td style="width: 40%">
            <p>
              <code>capture_aborted</code> or
              <code>expired</code>
            </p>
          </td>
          <td style="width: 60%">
            <p>
            Create a new attempt.
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 40%">
            <p><code>capture_refused</code></p>
          </td>
          <td style="width: 60%">
            <p>Propose an alternative verification method to the user.<p>
          </td>
        </tr>
        <tr>
          <td style="width: 40%">
            <p><code> checks_in_progress </code></p>
          </td>
          <td style="width: 60%">
            <p>
              Wait until results are available. 
              When results are available you will receive an event with the attempt status <code>completed</code>. 
            </p>
          </td>
        </tr>
      </tbody>
    </table>

    ## Redirect using an iframe (Optional)

    If you use desktop to mobile redirection, we recommend using our iframe integration.

    Include the SDK as a script tag:

    ```html
    <script
      src="https://cdn.ubble.ai/iframe-sdk-1.0.0.js"
      type="application/javascript"
    ></script>
    ```

    Add a global method called `onUbbleReady` to the page. The method should be triggered when the SDK is loaded:

    ```js
    function onUbbleReady() {

    }
    ```

    Initialize a new `IDV` object:

    ```js
    function onUbbleReady() {
      const ubbleIDV = new Ubble.IDV(document.getElementById("ubble"), options);
    }
    ```

    ### API

    #### Events

    `onComplete(completeEvent)`: Triggered when a user completes the capture

    ```json
    {
      "type": "COMPLETE",
      "status": "checks_in_progress"
      "event": "identity_verification_capture_completion",
      "redirectUrl": "https://your-redirect-url.com?id=<identity verification id>&status=_capture_completed"
    }
    ```

    `onRefused(refusedEvent)`: Triggered when the applicant refuses to complete the verification

    ```json
    {
      "type": "REFUSED",
      "status": "capture_refused"
      "event": "identity_verification_capture_refusal",
      "responseCode": 63001,
      "redirectUrl": "https://your-redirect-url.com?id=<identity verification id>&status=capture_refused"
    }
    ```

    `onAbort(abortEvent)`: Triggered when the verification is terminated

    ```json
    {
      "type": "ABORT",
      "status": "capture_aborted"
      "event": "identity_verification_capture_abortion",
      "responseCode": 61111,
      "redirectUrl": "https://your-redirect-url.com?id=<identity verification id>&status=capture_aborted&response_code=63001"
    }
    ```

    `onExpired`: Triggered when the verification link has expired

    ```json
    {
      "type": "EXPIRED",
      "status": "expired"
      "event": "identity_verification_expiration",
      "redirectUrl": "https://your-redirect-url.com?id=<identity verification id>&status=expired&response_code=63001"
    }
    ```

    #### Methods

    `destroy()`: Ends the Identity Verification flow

    #### Full example

    ```js
    const ubbleIDV = new Ubble.IDV("idv", {
      width: "500",
      height: "600",
      allowCamera: true,
      verificationUrl: "https://idv.ubble.ai/4hryu5cei5",
      events: {
        onComplete(event) {
          ubbleIDV.destroy();
        },
        onAbort(event) {
          ubbleIDV.destroy();
        },
        onExpired(event) {
          ubbleIDV.destroy();
        }
        onRefused(event) {
          ubbleIDV.destroy();
        }
      },
    });
    ```

    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; color: #f8c92e; vertical-align: center;">⚠</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>
        If you encounter issues, ensure that you've:
          <ul>
            <li>included a semicolon in the <code>Content-Security-Policy: frame-src https://*.domain_name.fr;</code> header</li>
            <li>allowed the use of the camera</li>
          </ul>
        </p>
      </div>
    </div>

    #### Handle user redirection in iframe

    When the user completes or terminates their verification, use the `destroy()` method for handling user redirection.

    ## Mobile redirection

    Whatever your integration applicants who start their journey on your desktop website are redirected to their mobile. 
    This allows the verification to be performed in a more secure environment, and applicants are more likely to complete the verification journey.

    You can integrate our application in your desktop website using iframe or web redirection. 
    Applicants will be offered two solutions to be redirected on their mobile: scanning a QR code or receiving a SMS. 
    For the SMS link, you can provide a `phone_number` value when [creating an attempt](#operation/create_attempt) to pre-fill the phone number associated with the redirection.
    
    Our application is synchronised with the mobile flow. 
    After an applicant has completed the verification on their mobile, we redirect them back to their desktop environment and your desktop website. 

    # SDK integration (Coming soon)
    
    # Webhooks

    ## Configuration

    When [creating an identity verification](#tag/Identity-verifications/operation/create_identity_verification), you need to provide the webhook url you want to be notified on.
    You will be notified of each event on identity verifications. For more details see the event section.
    To help you integrate your webhook you can trigger it with the standard answers, see [notify endpoint](#tag/Identity-verifications/operation/notify_identity_verification).

    ## Retry

    We expect that you will return us a 200 or 201 status code within 10 seconds before we retry, up to 2 retries will be performed. If needed, you can trigger webhook notifications manually using the [notify endpoint](#tag/Identity-verifications/operation/notify_identity_verification).

    ## Security

    ### Webhook IP whitelisting
    For security purposes, if you need to whitelist our incoming API calls, please note that we are hosted in the cloudgouv-eu-west-1 region of our cloud provider. [You can find the public IP addresses here](https://docs.outscale.com/en/userguide/OUTSCALE-Public-IPs.html).

    ### User Agent
    Our webhook calls are made with the following user agent: `CkoIdvNotifier`. Please make sure to allow this user agent in your firewall settings.

    ### Signature
    For security reasons all our webhook calls are signed, please refer to [signature](#section/API-Standard/Signature) for more details.

    ## Identity verification events

    #### Body
    
      The webhook body contains the following information: 

      | Attribute                | Description                                                                             |
      |--------------------------|-----------------------------------------------------------------------------------------|
      | applicant_id             | ID of the applicant, useful to recognize them                                           |
      | external_applicant_id    | Your applicant ID, only if you updated it in the applicant object                       |
      | user_journey_id          | ID of the user journey                                                                  |
      | identity_verification_id | ID of the identity verification                                                         |
      | status                   | status of the identity verification                                                     |
      | response_codes           | list of response codes                                                                  |


      **Example**
      
      ```json
        {
            "specversion": "2.0",
            "type": "identity_verification_capture_completed",
            "subject": "idv_5hxpdwegjcbujpth3wdo55d3vm",
            "id": "evnt_5hxpdwegjcbujpth3wdo55d3vm",
            "time": "2023-03-22T17:31:00Z",
            "datacontenttype": "application/json",
            "data": {
                "external_applicant_id": "9fj3lz918bujpth3wdolmc74s"
                "applicant_id": "aplt_5hxpdwegjcbujpth3wdo55d3vm",
                "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
                "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
                "status": "declined",
                "response_codes": [
                    {"code": 62301, "summary": "document_counterfeit"},
                    {"code": 62304, "summary": "face_mismatch"}
      
                ]
            }
        }
      ```
  
    #### Events

      | <div style="width:12em">Events</div>                      | Description                                                                                                                       |
      |-----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
      | `identity_verification_created`                           | You created an identity verification                                                                                              |
      | `identity_verification_opened`                            | You created a first attempt and the verification URL is available                                                                 |
      | `identity_verification_started`                           | The applicant has been redirected to the web application                                                                          |
      | `identity_verification_reset`                             | You created a new attempt while the status was `pending` or `capture_in_progress`                                                 |
      | `identity_verification_capture_completed`                 | The applicant completed the capture                                                                                               |
      | `identity_verification_checks_completed`                  | We completed the checks                                                                                                           |
      | `identity_verification_link_expired`                      | The link expired without applicant being redirected to the web application, please note the default expiration time is 15 minutes |
      | `identity_verification_capture_refused`                   | The applicant explicitly refused to perform the verification                                                                      |
      | `identity_verification_capture_aborted`                   | The applicant terminated the capture without completing it                                                                        |
      | `identity_verification_checks_inconclusive`               | The applicant did not provide the assets required to perform the checks                                                           |
      | `identity_verification_retry_requested`                   | You requested a retry for this identity verification                                                                              |
      | `identity_verification_closed`                            | The verification has been forcibly closed                                                                                         |
      | `identity_verification_anonymized`                        | The verification has been anonymized                                                                                              |
      | `identity_verification_audit_completed`                   | The verification has been audited and the status may have been updated                                                            |
      | `identity_verification_report_created`                    | The pdf report is available                                                                                                       |
    
    ## Face authentication events

     #### Body
    
      The webhook body contains the following information: 

      | Attribute                | Description                                                                             |
      |--------------------------|-----------------------------------------------------------------------------------------|
      | applicant_id             | ID of the applicant, useful to recognize them                                           |
      | external_applicant_id    | Your applicant ID, only if you updated it in the applicant object                       |
      | user_journey_id          | ID of the user journey                                                                  |
      | face_authentication_id   | ID of the face authentication                                                           |
      | status                   | status of the identity verification                                                     |
      | response_codes           | list of response codes                                                                  |


      **Example**
      
      ```json
      {
        "specversion": "2.0",
        "type": "face_authentication_checks_completed",
        "subject": "fav_01hr7269mkxva7msc443jz4jbf",
        "id": "evnt_01hr7269ry3g8skc630q4ec75g",
        "time": "2024-03-05T10:22:48Z",
        "datacontenttype": "application/json",
        "data": {
          "external_applicant_id": "87ydky4g6eq144zkcvpoi54mtj"
          "applicant_id": "aplt_01jdky4g6eq144zkcv16vtymx7",
          "status": "declined",
          "face_authentication_id": "fav_01je8cdhrk5fwa5j5nb701sah7",
          "response_codes": [{"code": "62321", "summary": "face_face_mismatch"],
          "user_journey_id": "usj_01hyzdts3zxqjm8bvvne2a2qb3"
        }
      }
      ```
  
    #### Events

    | <div style="width:12em">Events</div>                      | Description                                                                                                                       |
    |-----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
    | `face_authentication_created`                             | You created an face authentication                                                                                                |
    | `face_authentication_opened`                              | You created a first attempt and the verification URL is available                                                                 |
    | `face_authentication_started`                             | The applicant has been redirected to the web application                                                                          |
    | `face_authentication_reset`                               | You created a new attempt while the status was `pending` or `capture_in_progress`                                                 |
    | `face_authentication_capture_completed`                   | The applicant completed the capture                                                                                               |
    | `face_authentication_checks_completed`                    | We completed the checks                                                                                                           |
    | `face_authentication_link_expired`                        | The link expired without applicant being redirected to the web application, please note the default expiration time is 15 minutes |
    | `face_authentication_capture_refused`                     | The applicant explicitly refused to perform the face authentication                                                               |
    | `face_authentication_capture_aborted`                     | The applicant terminated the capture without completing it                                                                        |
    | `face_authentication_checks_inconclusive`                 | The applicant did not provide the assets required to perform the checks                                                           |
    | `face_authentication_retry_requested`                     | You requested a retry for this face authentication                                                                                |
    | `face_authentication_closed`                              | The face authentication has been forcibly closed                                                                                  |
    | `face_authentication_anonymized`                          | The face authentication has been anonymized                                                                                       |
    | `face_authentication_audit_completed`                     | The face authentication has been audited and the status may have been updated                                                     |
  
     ## AML verification events

     #### Body
    
      The webhook body contains the following information: 

      | Attribute                | Description                                                                             |
      |--------------------------|-----------------------------------------------------------------------------------------|
      | applicant_id             | ID of the applicant, useful to recognize them                                           |
      | external_applicant_id    | Your applicant ID, only if you updated it in the applicant object                       |
      | aml_verification_id      | ID of the AML verification                                                         |
      | status                   | status of the AML verification                                                     |


      **Example**
      
      ```json
      {
        "specversion": "2.0",
        "type": "aml_verification_created",
        "subject": "amlv_01hr7269mkxva7msc443jz4jbf",
        "id": "evnt_01hr7269ry3g8skc630q4ec75g",
        "time": "2024-03-05T10:22:48Z",
        "datacontenttype": "application/json",
        "data": {
          "aml_verification_id": "amlv_01hr7269mkxva7msc443jz4jbf",
          "status": "created",
          "applicant_id": "aplt_01hr7269ksxqjgqxbh4vaqmry8"
        }
      }
      ```
  
    #### Events

    | <div style="width:12em">Events</div>                      | Description                                                                                                                       |
    |-----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
    | `aml_verification_created`                                | A verification has been created                                                                                                   |
    | `aml_verification_onboarding_started`                     | Screening has begun                                                                                                               |
    | `aml_verification_onboarding_completed`                   | Screening has been completed                                                                                                      |
    | `aml_verification_onboarding_reviewed`                    | Manual review has been completed, customer `status` was updated                                                                   |
    | `aml_verification_monitoring_alert`                       | A monitoring alert has been detected                                                                                              |
    | `aml_verification_monitoring_reviewed`                    | Manual review has been completed, customer status was updated                                                                     |
    | `aml_verification_status_changed`                         | Manual review has been reopened, customer status was updated                                                                      |

    # Testing

    Use the following examples to test different Identity Verification scenarios.
    Testing is only available for Identity Verification. 
    
    ## Choose your scenario

    To choose the scenario you want to test, you will have to [create an applicant](#tag/Applicants/operation/create_applicant) and set the `external_applicant_id` value to one of the values described in the table below.

      |#| Scenario                                                  | <div style="width:12em">external_applicant_id</div>         |                                                                                         
      |-|-----------------------------------------------------------|-------------------------------------------------------------|
      |1| Approved verification                                     | `eaplt_10000000000000000000000000`                          | 
      |2| Approved verification on retry after capture aborted      | `eaplt_61XXXA10000000000000000000`                          |                                                     
      |3| Approved verification on retry after checks inconclusive  | `eaplt_61XXXI10000000000000000000`                          |                                                            
      |4| Declined verification                                     | `eaplt_62XXX000000000000000000000`                          |
      |5| Declined verification on retry after capture aborted      | `eaplt_61XXXA62XXX000000000000000`                          |                                                                     
      |6| Declined verification on retry after checks inconclusive  | `eaplt_61XXXI62XXX000000000000000`                          |   

    - Replace 61XXX with any of the response codes starting with 61, that you would like to test for.
    - Replace 62XXX with any of the response codes starting with 62, that you would like to test for.
    
    For example, if you would like to test a "Declined" scenario with `62201`, then set the value to `eaplt_62201000000000000000000000`.      
    
    Make a note of the applicant `id` value in the response. You'll need it to create verifications later.

    ## Create a first attempt

    Create an identity verification by calling  the [Create an identity verification](#tag/Identity-verifications/operation/create_identity_verification) endpoint. 
    Set the `id` you received in the Create an applicant response as the `applicant_id` value. Make a note of the identity verification `id` value in the response. 
    
    You can then create a first attempt by calling the [Create an attempt](#tag/Identity-verifications/operation/create_attempt) endpoint. 
    Pass the `id` value from Create an identity verification response as the `identity_verification_id` path parameter.

    ## Verify webhook notifications

    Once you've configured your webhook receiver, you'll be notified of events that occur during the identity verification flow via webhooks. 
    For more details see the [Webhook](#section/Webhooks) section. 

    Depending on the scenario you would like to test, you should consider the following events: 

      |#| Scenario                                                  | <div style="width:12em">event_type</div>                    |                                                                                         
      |-|-----------------------------------------------------------|-------------------------------------------------------------|
      |1| Approved verification                                     | `identity_verification_checks_completed`                    | 
      |2| Approved verification on retry after capture aborted      | `identity_verification_capture_aborted`                     |                                                     
      |3| Approved verification on retry after checks inconclusive  | `identity_verification_checks_inconclusive`                 |                                                            
      |4| Declined verification                                     | `identity_verification_checks_completed`                    |
      |5| Declined verification on retry after capture aborted      | `identity_verification_capture_aborted`                     |                                                                     
      |6| Declined verification on retry after checks inconclusive  | `identity_verification_checks_inconclusive`                 |   

    For the **Approved scenario**, webhook for the final verdict is triggered. 
    The identity_verification_checks_completed webhook will return the status `approved` and the response code `10000`. 
    You can call the [Retrieve an identity verification](#tag/Identity-verifications/operation/retrieve_identity_verification) endpoint to get the detailed results. 
    
    For the **Declined scenario**, webhook for the final verdict is triggered. 
    The identity_verification_checks_completed webhook will return the status `declined` and the response code starting with 62 that you passed as part of the `external_applicant_id`.
    You can call the [Retrieve an identity verification](#tag/Identity-verifications/operation/retrieve_identity_verification) endpoint to get the detailed results. 

    For other scenarios, the webhook will return the status `retry_required` and the response code starting with 61 that you passed as part of the `external_applicant_id`. 
    For these scenarios you should create a new attempt. 

    ## Manage retries

    Once you have receceived the `identity_verification_capture_aborted` or `identity_verification_checks_inconclusive` events, you can request a retry. 
    
    To do that you should create a new attempt using the [Create an attempt](#tag/Identity-verifications/operation/create_attempt) endpoint. 
    You'll be notified of events that occur during this second attempt flow via webhooks and a `identity_verification_checks_completed` webhook will be triggered with the final verdict. 

    For the **Approved verification on retry after capture aborted**, the identity_verification_checks_completed webhook will return the status `approved` and the response code `10000`. 
    You can call the [Retrieve an identity verification](#tag/Identity-verifications/operation/retrieve_identity_verification) endpoint to get the detailed results. 
    
    For the **Approved verification on retry after checks inconclusive**, the identity_verification_checks_completed webhook will return the status `approved` and the response code `10000`. 
    You can call the [Retrieve an identity verification](#tag/Identity-verifications/operation/retrieve_identity_verification) endpoint to get the detailed results. 

    For the **Declined verification on retry after capture aborted**, the identity_verification_checks_completed webhook will return the status `declined` and the response code starting with 62 that you passed as part of the `external_applicant_id`.
    You can call the [Retrieve an identity verification](#tag/Identity-verifications/operation/retrieve_identity_verification) endpoint to get the detailed results. 
    
    For the **Declined verification on retry after checks inconclusive**, the identity_verification_checks_completed webhook will return the status `declined` and the response code starting with 62 that you passed as part of the `external_applicant_id`.
    You can call the [Retrieve an identity verification](#tag/Identity-verifications/operation/retrieve_identity_verification) endpoint to get the detailed results. 


    # Reference info
    
    ## Status transitions
    ![](https://raw.githubusercontent.com/ubbleai/docs/refs/heads/staging/life_cycle_diagram.png)
    
    ## Verification statuses

    The following definitions apply for all our products. 

    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 25%" scope="col">Status</th>
          <th style="width: 35%" scope="col">Description</th>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>created</code></p>
          </td>
          <td style="width: 35%">
            <p>The verification has been created. </p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>pending</code></p>
          </td>
          <td style="width: 35%">
            <p>The verification_url is available.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>capture_in_progress</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant is performing the capture.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>checks_in_progress</code></p>
          </td>
          <td style="width: 35%">
            <p>We're performing checks for the applicant's identity verification.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>approved</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant's identity was verified successfully.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>declined</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant's identity was not verified due to an irregularity. </p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>retry_required</code></p>
          </td>
          <td style="width: 35%">
            <p>
              We could not perform all of the required checks for the applicant's
              verification. 
            </p>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>review_required</code></p>
          </td>
          <td style="width: 35%">
            <p>
            An AML verification case has been opened, you should manually investigate it. 
            </p>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>inconclusive</code></p>
          </td>
          <td style="width: 35%">
            <p>
              The verification checks were not completed and a retry is no
              longer available. 
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>refused</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant refused to perform the verification. </p>
          </td>
        </tr>
      </tbody>
    </table>

    ## Attempt statuses

    The following definitions apply for all our products. 
    
    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 25%" scope="col">Status</th>
          <th style="width: 35%" scope="col">Description</th>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>pending_redirection</code></p>
          </td>
          <td style="width: 35%">
            <p>The attempt has been created and applicant can be redirected.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>capture_in_progress</code></p>
          </td>
          <td style="width: 35%">
            <p>The attempt has been started by the applicant.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>checks_in_progress</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant completed the capture, we are performing checks.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>completed</code></p>
          </td>
          <td style="width: 35%">
            <p>We completed the checks. Identity verification is closed.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>expired</code></p>
          </td>
          <td style="width: 35%">
            <p>The link expired without applicant being redirected to the web application, please note the default expiration time is 15 minutes.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>capture_aborted</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant terminated the capture without completing it.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>checks_inconclusive</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant terminated the capture but did not provide the assets required to perform the checks.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>capture_refused</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant refused to perform the identity verification.</p>
          </td>
        </tr>
                <tr>
          <td style="width: 25%">
            <p><code>terminated</code></p>
          </td>
          <td style="width: 35%">
            <p>You created a new attempt, the previous one was forcibly closed.</p>
          </td>
        </tr>
      </tbody>
    </table>

    ## Response codes

    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; color: #f8c92e; vertical-align: center;">⚠</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>
          Please note that we consider adding new response codes as backward compatible. You should then build you business rules based on the status and use response codes as additional information, rather than use response codes as required information.
        </p>
      </div>
    </div>


    <style type="text/css">
    .tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0}
    .tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
      font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}
    .tg th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
      font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
    .tg .tg-dvid{background-color:#efefef;border-color:inherit;font-weight:bold;text-align:left;vertical-align:top}
    .tg .tg-fymr{background-color:#f0f0f0;border-color:inherit;font-weight:bold;text-align:left;vertical-align:center;}
    .tg .tg-center{border-color:inherit;text-align:center;vertical-align:center}
    .tg .tg-y698{background-color:#c4c4c4;border-color:inherit;text-align:left;vertical-align:center}
    .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:center}
    .one {width: 1%}
    .two {width: 39%}
    .three {width: 70%}
    </style>

    ### Attempt status: `completed`

    #### Verification status: `approved`

    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr>Code</nobr></th>
        <th class="tg-fymr">Summary</th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-0pky">10000</td>
        <td class="tg-0pky">approved</td>
        <td class="tg-0pky">The verification has been approved</td>
      </tr>
    </tbody>
    </table>

    #### Verification status: `declined`

    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr>Code</nobr></th>
        <th class="tg-fymr">Summary</th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <td class="tg-fymr" colspan="6"><span style="font-weight:bold">Document non compliant</span></td>
    <tbody>
      <tr>
        <td class="tg-0pky">62101</td>
        <td class="tg-0pky">document_expired</td>
        <td class="tg-0pky">Applicant presented an expired document</td>
      </tr>
      <tr>
        <td class="tg-0pky">62102</td>
        <td class="tg-0pky">document_not_accepted</td>
        <td class="tg-0pky">Applicant presented a document which is not accepted</td>
      </tr>
      <tr>
        <td class="tg-0pky">62103</td>
        <td class="tg-0pky">document_damaged</td>
        <td class="tg-0pky">Applicant has submitted a damaged document</td>
      </tr>
      <tr>
        <td class="tg-0pky">62104</td>
        <td class="tg-0pky">unsupported_alphabet</td>
        <td class="tg-0pky">Applicant has submitted a document containing an unsupported alphabet</td>
      </tr>
      <tr>
        <td class="tg-0pky">62201</td>
        <td class="tg-0pky">document_photocopy</td>
        <td class="tg-0pky">Applicant presented a photocopy of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">62202</td>
        <td class="tg-0pky">document_screenshot</td>
        <td class="tg-0pky">Applicant presented the document on a screen</td>
      </tr>
      <td class="tg-fymr" colspan="6"><span style="font-weight:bold">Identity fraud</span></td>
    </tbody>
    <tbody>
        <td class="tg-0pky">62301</td>
        <td class="tg-0pky">document_counterfeit</td>
        <td class="tg-0pky">Applicant has submitted a counterfeit or falsification</td>
      </tr>
      <tr>
        <td class="tg-0pky">62302</td>
        <td class="tg-0pky">document_stolen</td>
        <td class="tg-0pky">Applicant presented a document declared as stolen or lost</td>
      </tr>
      <tr>
        <td class="tg-0pky">62303</td>
        <td class="tg-0pky">document_swap</td>
        <td class="tg-0pky">Applicant presented the front and back of two different documents</td>
      </tr>
      <tr>
        <td class="tg-0pky">62304</td>
        <td class="tg-0pky">face_mismatch</td>
        <td class="tg-0pky">Applicant does not match the photograph of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">62305</td>
        <td class="tg-0pky">face_not_live</td>
        <td class="tg-0pky">Applicant has presented a photography or a video of someone else's face on a screen or on a physical medium</td>
      </tr>
      <tr>
        <td class="tg-0pky">62306</td>
        <td class="tg-0pky">face_alteration</td>
        <td class="tg-0pky">Applicant has altered their appearance</td>
      </tr>
      <tr>
        <td class="tg-0pky">62307</td>
        <td class="tg-0pky">videos_digital_alteration</td>
        <td class="tg-0pky">Applicant has digitally altered the videos</td>
      </tr>
      <tr>
        <td class="tg-0pky">62321</td>
        <td class="tg-0pky">face_face_mismatch</td>
        <td class="tg-0pky">Applicant of the face authentication is not the one who performed the identity verification</td>
      </tr>
      <tr>
        <td class="tg-0pky">62399</td>
        <td class="tg-0pky">generic_fraud</td>
        <td class="tg-0pky">For certified identity verifications, all the Identity fraud codes are replaced by this generic code.</td>
      </tr>
      <td class="tg-fymr" colspan="6"><span style="font-weight:bold">Prohibited behavior</span></td>
    </tbody>
    <tbody>
      <tr>
        <td class="tg-0pky">62401</td>
        <td class="tg-0pky">declared_identity_mismatch</td>
        <td class="tg-0pky">Applicant’s identity does not match with the expected one</td>
      </tr>
      <tr>
        <td class="tg-0pky">62402</td>
        <td class="tg-0pky">suspicious_device</td>
        <td class="tg-0pky">Applicant used a device that has been technically altered</td>
      </tr>
      <tr>
        <td class="tg-0pky">62403</td>
        <td class="tg-0pky">consent_unclear</td>
        <td class="tg-0pky">Applicant seems to have performed the capture against their will</td>
      </tr>
      <tr>
        <td class="tg-0pky">62404</td>
        <td class="tg-0pky">multiple_documents</td>
        <td class="tg-0pky">Applicant presented multiple documents</td>
      </tr>
    </tbody>
    </table>

    #### Verification status not impacted
    
    These codes should be considered as risk signals. 

    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr>code</nobr></th>
        <th class="tg-fymr">summary</th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-0pky">65001</td>
        <td class="tg-0pky">various_faces_detected</td>
        <td class="tg-0pky">Applicant also captured another person face</td>
      </tr>
    </tbody>
    </table>

    ### Attempt status: `expired`
    #### Verification status: `retry_required`

    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr>code</nobr></th>
        <th class="tg-fymr">summary</th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-0pky">61101</td>
        <td class="tg-0pky">applicant_never_started</td>
        <td class="tg-0pky">Applicant was not redirected to the application and never started the flow</td>
      </tr>
    </tbody>
    </table>

    ### Attempt status: `capture_refused`
    #### Verification status: `refused`


    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr>code</nobr></th>
        <th class="tg-fymr">summary</th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-0pky">63001</td>
        <td class="tg-0pky">applicant_refusal</td>
        <td class="tg-0pky">Applicant explicitly refused to do the verification process by clicking on the dedicated button.</td>
      </tr>
    </tbody>
    </table>

    ### Attempt status: `capture_aborted`
    #### Verification status: `retry_required` 
    
    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr>code</nobr></th>
        <th class="tg-fymr">summary</th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-0pky">61111</td>
        <td class="tg-0pky">applicant_not_ready</td>
        <td class="tg-0pky">Applicant explicitly stated that they wanted to perform the identity verification later by clicking on the dedicated button</td>
      </tr>
      <tr>
        <td class="tg-0pky">61112</td>
        <td class="tg-0pky">applicant_no_document</td>
        <td class="tg-0pky">Applicant explicitly stated that they did not have their document with them by clicking on the dedicated button</td>
      </tr>
      <tr>
        <td class="tg-0pky">61113</td>
        <td class="tg-0pky">camera_access_refused</td>
        <td class="tg-0pky">Applicant did not give access to the camera despite the dedicated instructions</td>
      </tr>
      <tr>
        <td class="tg-0pky">61121</td>
        <td class="tg-0pky">applicant_drop</td>
        <td class="tg-0pky">Applicant left the process before the capture phase and the verification URL expired (by default the expiration time is 15 minutes)</td>
      </tr>
      <tr>
        <td class="tg-0pky">61201</td>
        <td class="tg-0pky">connexion_insufficient</td>
        <td class="tg-0pky">Applicant did not have a sufficient connexion to perform the capture</td>
      </tr>
      <tr>
        <td class="tg-0pky">61202</td>
        <td class="tg-0pky">browser_not_supported</td>
        <td class="tg-0pky">Applicant’s browser was not suitable for video streaming</td>
      </tr>
      <tr>
        <td class="tg-0pky">61203</td>
        <td class="tg-0pky">camera_not_found</td>
        <td class="tg-0pky">Applicant’s device did not have any camera</td>
      </tr>
      <tr>
        <td class="tg-0pky">61205</td>
        <td class="tg-0pky">sms_not_received</td>
        <td class="tg-0pky">Applicant did not receive the SMS</td>
      </tr>
      <tr>
        <td class="tg-0pky">61314</td>
        <td class="tg-0pky">document_challenge_timeout</td>
        <td class="tg-0pky">Applicant failed to meet the document randomized challenge and the verification expired (only for certified identity verification)</td>
      </tr>
      <tr>
        <td class="tg-0pky">61413</td>
        <td class="tg-0pky">face_challenge_timeout</td>
        <td class="tg-0pky">Applicant failed to meet the face randomized challenge and the verification expired (only for certified identity verification)</td>
      </tr>
    </tbody>
    </table>
      
    ### Attempt status: `capture_aborted`
    #### Verification status: `retry_required` 

      <table class="tg">
     <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
      </colgroup>
     <thead>
      <tr>
        <th class="tg-fymr"><nobr><code>code</code></nobr></th>
        <th class="tg-fymr"><code>summary</code></th>
        <th class="tg-fymr">Description</th>
      </thead>
     <tbody>
     <tr>
       <tr>
        <td class="tg-0pky">61201</td>
        <td class="tg-0pky">connexion_insufficient</td>
        <td class="tg-0pky">Applicant did not have a sufficient connexion to perform the capture</td>
      </tr>
      <tr>
        <td class="tg-0pky">61301</td>
        <td class="tg-0pky">document_video_blurry</td>
        <td class="tg-0pky">Applicant’s document video is too blurry<br>(mostly due to too much movement but if this error persists the camera quality might be at fault)</td>
      </tr>
      <tr>
        <td class="tg-0pky">61302</td>
        <td class="tg-0pky">document_video_lighting_issue</td>
        <td class="tg-0pky">Applicant performed the document capture under poor lighting conditions</td>
      </tr>
      <tr>
        <td class="tg-0pky">61310</td>
        <td class="tg-0pky">document_front_not_captured</td>
        <td class="tg-0pky">Applicant has not captured the front of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">61311</td>
        <td class="tg-0pky">document_back_not_captured</td>
        <td class="tg-0pky">Applicant has not captured the back of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">61312</td>
        <td class="tg-0pky">document_partially_hidden</td>
        <td class="tg-0pky">Applicant hides part of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">61313</td>
        <td class="tg-0pky">document_not_tilted</td>
        <td class="tg-0pky">Applicant did not present a dynamic view of the document</td>
      </tr>
      <tr>
        <td class="tg-0pky">61315</td>
        <td class="tg-0pky">document_barcode_unreadable</td>
        <td class="tg-0pky">The barcode of the document is unreadable</td>
      </tr>
      <tr>
        <td class="tg-0pky">61401</td>
        <td class="tg-0pky">face_video_blurry</td>
        <td class="tg-0pky">Applicant’s video of their face is too blurry <br>(mostly due to too much movement but if this error persists the camera quality might be at fault)</td>
      </tr>
      <tr>
        <td class="tg-0pky">61402</td>
        <td class="tg-0pky">face_video_lighting_issue</td>
        <td class="tg-0pky">Applicant performed their identity verification under poor lighting conditions</td>
      </tr>
      <tr>
        <td class="tg-0pky">61410</td>
        <td class="tg-0pky">face_not_captured</td>
        <td class="tg-0pky">Applicant has not presented a face</td>
      </tr>
      <tr>
        <td class="tg-0pky">61411</td>
        <td class="tg-0pky">face_partially_hidden</td>
        <td class="tg-0pky">Applicant did not show the full front view of their face</td>
      </tr>
      <tr>
        <td class="tg-0pky">61412</td>
        <td class="tg-0pky">face_not_turned</td>
        <td class="tg-0pky">Applicant did not move to prove the liveness</td>
      </tr>
      <tr>
        <td class="tg-0pky">61414</td>
        <td class="tg-0pky">various_faces_detected</td>
        <td class="tg-0pky">DEPRECATED</td>
      </tr>
      <tr>
        <td class="tg-0pky">61901</td>
        <td class="tg-0pky">internal_error</td>
        <td class="tg-0pky">An internal error prevents us from completing the verification, we do our best to reduce the occurrence of this case</td>
      </tr>
      <tr>
        <td class="tg-0pky">61911</td>
        <td class="tg-0pky">corrupted_videos</td>
        <td class="tg-0pky">The received videos cannot be played</td>
      </tr>
    </tbody>
    </table>

    ### Attempt status: `terminated`
    #### Verification status: `pending` or `inconclusive`
    

    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr>code</nobr></th>
        <th class="tg-fymr">summary</th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
       <tr>
      </tr>
      <tr>
        <td class="tg-0pky">64001</td>
        <td class="tg-0pky">forcibly_closed</td>
        <td class="tg-0pky">You have created a new attempt or the verification has been anonymised while the URL was still valid</td>
      </tr>
    </tbody>
    </table>

    ### Complementary document
    If you request a complementary document you may receive the following codes. 

     <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr>code</nobr></th>
        <th class="tg-fymr">summary</th>
        <th class="tg-fymr">Description</th>
      </tr>
    </thead>
    <tbody>
          <tr>
        <td class="tg-0pky">61321</td>
        <td class="tg-0pky">complementary_document_video_blurry</td>
        <td class="tg-0pky">Applicant’s complementary document video is too blurry (mostly due to too much movement but if this error persists the camera quality might be at fault)</td>
      </tr>
      <tr>
        <td class="tg-0pky">61322</td>
        <td class="tg-0pky">complementary_document_video_lighting_issue</td>
        <td class="tg-0pky">Applicant performed the complementary document capture under poor lighting conditions</td>
      </tr>
      <tr>
        <td class="tg-0pky">61330</td>
        <td class="tg-0pky">complementary_document_front_not_captured</td>
        <td class="tg-0pky">Applicant has not captured the front of the complementary document</td>
      </tr>
      <tr>
        <td class="tg-0pky">61331</td>
        <td class="tg-0pky">complementary_document_back_not_captured</td>
        <td class="tg-0pky">AApplicant has not captured the back of the complementary document</td>
      </tr>
      <tr>
        <td class="tg-0pky">61332</td>
        <td class="tg-0pky">complementary document_partially_hidden</td>
        <td class="tg-0pky">Applicant hides part of the complementary document</td>
      </tr>
      <tr>
        <td class="tg-0pky">61333</td>
        <td class="tg-0pky">complementary_document_not_tilted</td>
        <td class="tg-0pky">Applicant did not present a dynamic view of the complementary document</td>
      </tr>
      <tr>
        <td class="tg-0pky">62121</td>
        <td class="tg-0pky">complementary_document_expired</td>
        <td class="tg-0pky">Applicant presented an expired complementary document</td>
      </tr>
      <tr>
        <td class="tg-0pky">62122</td>
        <td class="tg-0pky">complementary_document_not_accepted</td>
        <td class="tg-0pky">Applicant presented an complementary document which is not accepted</td>
      </tr>
      <tr>
        <td class="tg-0pky">62123</td>
        <td class="tg-0pky">complementary_document_damaged</td>
        <td class="tg-0pky">Applicant has submitted a damaged complementary document</td>
      </tr>
      <tr>
        <td class="tg-0pky">62221</td>
        <td class="tg-0pky">complementary_document_photocopy</td>
        <td class="tg-0pky">Applicant presented a photocopy of the complementary document</td>
      </tr>
      <tr>
        <td class="tg-0pky">62222</td>
        <td class="tg-0pky">complementary_document_screenshot</td>
        <td class="tg-0pky">Applicant presented the complementary document on a screen</td>
      <tr>
        <td class="tg-0pky">62331</td>
        <td class="tg-0pky">complementary_document_counterfeit</td>
        <td class="tg-0pky">Applicant has submitted a counterfeit or falsification as an complementary document</td>
      </tr>
      <tr>
        <td class="tg-0pky">62332</td>
        <td class="tg-0pky">complementary_document_stolen</td>
        <td class="tg-0pky">Applicant presented an complementary document declared as stolen or lost</td>
      </tr>
      <tr>
        <td class="tg-0pky">62333</td>
        <td class="tg-0pky">complementary_document_swap</td>
        <td class="tg-0pky">Applicant presented the front and back of two different documents</td>
      </tr>
      <tr>
        <td class="tg-0pky">62334</td>
        <td class="tg-0pky">complementary_document_mismatch</td>
        <td class="tg-0pky">Applicant is not the owner of the complementary documentl</td>
      </tr>
    </tbody>
    </table>


    # API Standard

    ## Signature
    
    ### What is signed ?
    **Webhook notifications** are signed by default.

    To enable signature verification for **API responses**, contact your account manager.

    ### Cko-Signature Header
    The `Cko-Signature` header contains:
    - **Timestamp**: The time of the request (e.g., `1635236316.377888`).
    - **Signing Key ID and Version**: Unique key identifier and version (e.g., `3456-live-v1`).
    - **Signature**: The digital signature (e.g., `5257a869a7ecebeda35affa62cdcb3fa51cad7e77a0e56ff546d0ae8e108d8bd`).

    ### Signature Format
    ```
      <timestamp>:<organization_id>-<test or live verification>-<key version>:<signature>
    ```

    #### Signature example
    ```
      1635236316.377888:3456-production-v1:5257a869a7ecebeda35affa62cdcb3fa51cad7e77a0e56ff546d0ae8e108d8bd
    ```

    #### Signing Algorithm
    We use **ECDSA** with **SHA-512** to create signatures.

    ### Verifying the Signature
    1. **Download the Public Key**: Separate keys for test and live environments are available in the dashboard.
    2. **Recreate the Signed Data**: Combine the request body and the `Cko-Signature` timestamp.
    3. **Verify the Signature**: Use ECDSA with the downloaded public key to verify the signature.

    For code samples, visit our [repository](https://github.com/ubbleai/code-samples).

    ## Required tag
    ### required
    Attributes tagged as `required` **MUST** be present in requests and responses.

    ### null values
    Attributes not marked as `required` can be null. In that case the attribute is not sent in the response.

    ## Resources identifiers
    ### Format
    `{prefix}_{lower-case base-32 encoded GUID}`

    ### Resources identifiers formatting

    | resource name          | prefix  | example                         |
    |------------------------|---------|---------------------------------|
    | applicants             | aplt    | aplt_tkoi5db4hryu5cei5vwoabr7we |
    | identity-verifications | idv     | idv_tkoi5db4hryu5cei5vwoabr7we  |
    | aml-verifications      | amlv    | amlv_tkoi5db4hryu5cei5vwoabr7we |
    | user-journey           | usj     | usj_tkoi5db4hryu5cei5vwoabr7we  |

    ## Content type
    The API accepts and returns `application/json` type.

    ## Error handling
    For HTTP error codes 400 and 422 the response body will contain:
    - `error_type`: a short description code
    - `error_codes`: a list of more detailed codes
    
    Error codes and error types can be formatted as follows:
    - `{error}`
    - `{target/attribute}__{error}`
    - `{nested_object}__{object_attribute}__{error}`

    ```json
    {
      "error_type": "invalid_request",
      "error_codes": [
        "birth_date__invalid_format",
        "first_name__required",
        "phone_number__country_code__invalid"
      ]
    }
    ````

    ## Common Objects/Properties

    | name         | format                                                                                                                                              | example                                                                     |
    |--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
    | countries    | - Apply ISO 3166-1 alpha-2                                                                                                                          | FR                                                                          |
    | date-time    | - Apply ISO8601<br /> - Always UTC time                                                                                                             | 2017-07-21T17:32:28Z                                                        |
    | phone number | - Country code with '+' sign (+33 for example) <br /> - Number with potential spaces, hyphens or trailing zero(s)  | {<br />    "country_code": "+44",<br />    "number": "1234 567890"<br /> }  |

  version: 2.0.0

servers:
  - url: https://api.ubble.ai

tags:
  - name: identity verifications
    description: Identity verification endpoints documentation.
  - name: AML verifications
    description: AML verification endpoints documentation.
  - name: applicants
    description: Applicant management endpoints documentation.
  - name: attempts
    description: Attempt management endpoints documentation.

x-tagGroups:
  - name: Endpoints documentation
    tags:
      - Applicants
      - Identity verifications
      - Face authentications
      - AML verifications
      - Service status
paths:
  /health:
    get:
      tags:
        - Service status
      summary: Retrieve API health
      description: This endpoint allows you to get the health of our api, anything other than a 200 status code is not OK
      operationId: retrieve_api_health
      responses:
        "200":
          description: API is OK

  # Identity Verifications
  /v2/create-and-start-idv:
    post:
      tags:
        - Identity verifications
      summary: Create and start an identity verification
      description: This endpoint allows you to create and identity verification. You should get a `201` response and the identity verification resource containing the `_links/verification_url`.
      operationId: create_and_start_identity_verification
      requestBody:
        required: true
        content:
          application/json:
            examples:
              Only required data:
                $ref: "#/components/examples/identity_verification_creation_request_body_helper_min"
              All possible data:
                $ref: "#/components/examples/identity_verification_creation_request_body_helper_max"
              Use an existing applicant:
                $ref: "#/components/examples/identity_verification_creation_request_body_min_plus_aplt"
            schema:
              $ref: "#/components/schemas/IdentityVerificationInputHelper"
      responses:
        "201":
          description: Identity verification created
          content:
            application/json:
              examples:
                identity_verification_creation_response_body_helper:
                  $ref: "#/components/examples/identity_verification_creation_response_body_helper"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationOutputHelper"
      callbacks:
        statusChanged:
          "{$request.body#/webhook_url}":
            post:
              summary: Status update notification
              requestBody:
                required: true
                content:
                  application/json:
                    example:
                      {
                        "specversion": "2.0",
                        "type": "identity_verification_capture_completed",
                        "subject": "idv_5hxpdwegjcbujpth3wdo55d3vm",
                        "id": "evnt_5hxpdwegjcbujpth3wdo55d3vm",
                        "time": "2023-03-22T17:31:00Z",
                        "datacontenttype": "application/json",
                        "data":
                          {
                            "applicant_id": "aplt_5hxpdwegjcbujpth3wdo55d3vm",
                            "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
                            "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
                            "status": "declined",
                            "response_codes":
                              [
                                {
                                  "code": 61310,
                                  "summary": "document_front_not_captured",
                                },
                                {
                                  "code": 62102,
                                  "summary": "document_not_accepted",
                                },
                              ],
                          },
                      }
                    schema:
                      $ref: "#/components/schemas/Event"
              responses:
                "200":
                  description: Your server returns this code if it accepts the callback.
                "201":
                  description: Your server returns this code if it accepts the callback.

  /v2/identity-verifications:
    post:
      tags:
        - Identity verifications
      summary: Create an identity verification
      description: |
        Creates an identity verification.

        When this request is successful, you'll get a 201 response with the identity verification resource.
      operationId: create_identity_verification
      requestBody:
        required: true
        content:
          application/json:
            examples:
              Only required data:
                $ref: '#/components/examples/identity_verification_creation_request_body_min'
              All possible data:
                $ref: '#/components/examples/identity_verification_creation_request_body_max'
            schema:
              $ref: '#/components/schemas/IdentityVerificationInputPost'
      responses:
        '201':
          description: Identity verification created successfully
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_creation_response_body"
              schema:
                allOf:
                  - $ref: '#/components/schemas/IdentityVerificationOutputPost'
        '400':
          description: Bad request.
# Not taken into account in interface testing
#          content:
#            application/json:
#              example:
#                $ref: '#/components/examples/idv_identity_verification_creation_request_invalid_body'
#              schema:
#                $ref: '#/components/schemas/ResponseError'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable entity
# Not taken into account in interface testing
#          content:
#            application/json:
#              example:
#                $ref: '#/components/examples/idv_identity_verification_unprocessable_entity_body'
#              schema:
#                $ref: '#/components/schemas/ResponseError'
        '500':
          description: Internal server error.
        '503':
          description: Service unavailable

  /v2/identity-verifications/{identity_verification_id}:
    get:
      tags:
        - Identity verifications
      summary: Retrieve an identity verification
      description: This endpoint allows you to get the detailed results of an identity verification.
      operationId: retrieve_identity_verification
      parameters:
        - name: identity_verification_id
          required: true
          in: path
          description: ID of the identity verification
          schema:
            $ref: "#/components/schemas/IdentityVerificationId"
      responses:
        "200":
          description: Identity verification retrieved
          content:
            application/json:
              examples:
                identity_verification_response_body:
                  $ref: "#/components/examples/identity_verification_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationOutputGet"

  /v2/identity-verifications/{identity_verification_id}/anonymize:
    post:
      tags:
        - Identity verifications
      summary: Anonymize an identity verification
      description: Anonymize the personal data of an identity verification with the specified ID.
      operationId: anonymize_identity_verification
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification to anonymize
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Identity verification anonymized
          content:
            application/json:
              examples:
                identity_verification_anonymization_response_body:
                  $ref: "#/components/examples/identity_verification_anonymization_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationOutputAnonymize"
        "404":
          description: Identity verification not found
        "400":
          description: Bad request. The identity verification cannot be anonymized.
        "500":
          description: Internal server error

  /v2/identity-verifications/{identity_verification_id}/pdf-report:
    get:
      tags:
        - Identity verifications
      summary: Retrieve PDF report of an identity verification
      description: |
        This endpoint allows you to retrieve a PDF report containing all the information of the identity verification.

        Please note that this report is only available for verifications in statuses `declined` and `approved` once you receive the `identity_verification_report_created` event.


      operationId: pdf_identity_verification
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Operation success
          content:
            application/json:
              examples:
                identity_verification_pdf_response_body:
                  $ref: "#/components/examples/identity_verification_pdf_response_body"
              schema:
                required: [pdf_report]
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationOutputPdfReport"
        "404":
          description: The PDF is not available

  /v2/identity-verifications/{identity_verification_id}/notify:
    post:
      tags:
        - Identity verifications
      summary: Request webhook notification
      operationId: notify_identity_verification
      description: This endpoint can be used to initiate a webhook call containing the latest event of an identity verification.
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification to notify
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                webhook_url:
                  type: string
                  format: uri
      responses:
        "204":
          description: Notification successfully requested

  /v2/identity-verifications/{identity_verification_id}/attempts:
    get:
      tags:
        - Identity verifications
      summary: List attempts
      description: This endpoint allows you to list all attempts of a verification
      operationId: list_attempts
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List attempt
          content:
            application/json:
              examples:
                identity_verification_list_response_body:
                  $ref: "#/components/examples/identity_verification_attempt_list_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationAttemptOutputList"
        "404":
          description: The provided verification ID is not valid
        "500":
          description: An error occurred while fetching the attempts
    post:
      tags:
        - Identity verifications
      summary: Create an Attempt
      description: This endpoint allows you to create a new Attempt. It is possible when the identity-verification is in one of
        the following statuses `created`, `pending`, `capture_in_progress`, `retry_required`
      operationId: create_attempt
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Minimal body:
                $ref: "#/components/examples/attempt_creation_request_body_min"
              All possible data:
                $ref: "#/components/examples/identity_attempt_creation_request_body_max"
            schema:
              $ref: "#/components/schemas/IdentityVerificationAttemptInputPost"
      responses:
        "201":
          description: Attempt created
          content:
            application/json:
              examples:
                identity_verification_attempt_creation_response_body:
                  $ref: "#/components/examples/identity_verification_attempt_creation_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationAttemptOutputPost"
        "404":
          description: The provided verification ID is not valid
        "409":
          description: The current verification status does not allow the creation of a new attempt. The verification status must be either `created`, `pending`, `capture_in_progress`, or `retry_required`
        "500":
          description: An error occurred while creating the attempt

  /v2/identity-verifications/{identity_verification_id}/attempts/{attempt_id}:
    get:
      tags:
        - Identity verifications
      summary: Retrieve an attempt
      description: This endpoint allows you to retrieve the details for a given attempt
      operationId: fetch_attempts
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification
          required: true
          schema:
            type: string
        - name: attempt_id
          in: path
          description: ID of the attempt
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Attempt fetched
          content:
            application/json:
              examples:
                identity_verification_attempt_get_response_body:
                  $ref: "#/components/examples/identity_verification_attempt_get_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationAttemptOutputGet"
        "404":
          description: The provided verification ID or attempt ID is not valid
        "500":
          description: An error occurred while fetching the attempt

# Applicants
  /v2/applicants:
    post:
      tags:
        - Applicants
      summary: Create an Applicant
      description: This section describes all endpoints related to applicants. It will enable you to create and manage applicant objects.
      operationId: create_applicant
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicantInputPost"
            examples:
              All possible data:
                $ref: "#/components/examples/applicant_creation_request_body"

      responses:
        "201":
          description: Applicant successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantOutputPost"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body"
          links:
            RetrieveApplicantById:
              operationId: retrieve_applicant
              parameters:
                applicant_id: "$response.body#/id"
        "400":
          description: Bad request
          content:
            application/json:
              examples:
                Invalid phone number:
                  value:
                    {
                      "error_type": "request_invalid",
                      "error_codes": ["phone_number__invalid_format"],
                    }

  /v2/applicants/{applicant_id}:
    get:
      tags:
        - Applicants
      summary: Retrieve an Applicant
      description: Retrieve an Applicant
      operationId: retrieve_applicant
      parameters:
        - name: applicant_id
          required: true
          in: path
          description: ID of Applicant to return
          schema:
            $ref: "#/components/schemas/ApplicantId"
      responses:
        "200":
          description: applicant retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantOutputGet"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body"
        "404":
          description: "Applicant not found"

    patch:
      tags:
        - Applicants
      summary: Update an Applicant
      description: Update an Applicant
      operationId: update_applicant
      parameters:
        - name: applicant_id
          required: true
          in: path
          description: ID of Applicant to return
          schema:
            $ref: "#/components/schemas/ApplicantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicantInputPatch"
            examples:
              All possible data:
                $ref: "#/components/examples/applicant_patch_request_body"
      responses:
        "200":
          description: applicant updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantOutputPatch"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body"
        "404":
          description: Applicant not found
        "400":
          description: Bad request. One or more input parameters are invalid
        "500":
          description: Internal server error

  /v2/applicants/{applicant_id}/anonymize:
    post:
      tags:
        - Applicants
      summary: Anonymize an Applicant
      description: Anonymize the personal data of an applicant with the specified ID.
      operationId: anonymize_applicant
      parameters:
        - name: applicant_id
          in: path
          description: ID of the applicant to anonymize
          required: true
          schema:
            type: string
      responses:
        "200":
          description: applicant anonymized successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantOutputAnonymize"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body_anonymized"
        "404":
          description: Identity verification not found
        "400":
          description: Bad request. The applicant cannot be anonymized.
        "500":
          description: Internal server error

# AML Verifications
  /v2/aml-verifications:
    post:
      tags:
        - AML verifications
      summary: Create an AML verification
      description: This endpoint allows you to create an AML verification. You should get a `201` response.
      operationId: create_aml_verification
      requestBody:
        required: true
        content:
          application/json:
            examples:
              Only required data:
                $ref: "#/components/examples/aml_verification_creation_request_body_min"
              All possible data:
                $ref: "#/components/examples/aml_verification_creation_request_body_max"
            schema:
              $ref: "#/components/schemas/AMLVerificationInputPost"
      responses:
        "201":
          description: AML verification created
          content:
            application/json:
              examples:
                aml_verification_response_body:
                  $ref: "#/components/examples/aml_verification_response_body"
              schema:
                required: [applicant_id]
                allOf:
                  - $ref: "#/components/schemas/AMLVerificationOutputPost"

  /v2/aml-verifications/{aml_verification_id}:
    get:
      tags:
        - AML verifications
      summary: Retrieve an AML verification
      description: This endpoint allows you to get the detailed results of an AML verification.
      operationId: retrieve_aml_verification
      parameters:
        - name: aml_verification_id
          required: true
          in: path
          description: ID of the AML verification
          schema:
            $ref: "#/components/schemas/AMLVerificationId"
      responses:
        "200":
          description: AML verification retrieved
          content:
            application/json:
              examples:
                aml_verification_response_body:
                  $ref: "#/components/examples/aml_verification_response_body"
              schema:
                required: [applicant_id]
                allOf:
                  - $ref: "#/components/schemas/AMLVerificationOutputGet"

# Face Authentications
  /v2/face-authentications:
    post:
      tags:
        - Face authentications
      summary: Create a face authentication
      description: This endpoint allows you to create a face authentication.
      operationId: create_face_authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FaceAuthenticationInputPost"
      responses:
        "201":
          description: Face authentication created
          content:
            application/json:
              examples:
                face_authentication_creation_response_body:
                  $ref: "#/components/examples/face_authentication_creation_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationOutputPost"
        "400":
          description: Bad request
        "500":
          description: Internal server error

  /v2/face-authentications/{face_authentication_id}:
    get:
      tags:
        - Face authentications
      summary: Retrieve a face authentication
      description: This endpoint allows you to get the detailed results of a face authentication.
      operationId: retrieve_face_authentication
      parameters:
        - name: face_authentication_id
          required: true
          in: path
          description: ID of the face authentication
          schema:
            $ref: "#/components/schemas/FaceAuthenticationId"
      responses:
        "200":
          description: Face authentication retrieved
          content:
            application/json:
              examples:
                face_authentication_creation_response_body:
                  $ref: "#/components/examples/face_authentication_creation_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationOutputGet"
        "404":
          description: Face authentication not found
        "500":
          description: Internal server error

  /v2/face-authentications/{face_authentication_id}/anonymize:
    post:
      tags:
        - Face authentications
      summary: Anonymize a face authentication
      description: Anonymize the personal data of a face authentication with the specified ID.
      operationId: anonymize_face_authentication
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication to anonymize
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Face authentication anonymization requested
          content:
            application/json:
              examples:
                face_authentication_anonymization_response_body:
                  $ref: "#/components/examples/face_authentication_anonymization_response_body"
              schema:
                required: [applicant_id, user_journey_id]
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationOutputAnonymize"
        "404":
          description: Face authentication not found
        "400":
          description: Bad request. The face authentication cannot be anonymized.
        "500":
          description: Internal server error

  /v2/face-authentications/{face_authentication_id}/notify:
    post:
      tags:
        - Face authentications
      summary: Request webhook notification
      operationId: notify_face_authentication
      description: This endpoint can be used to initiate a webhook call containing the latest event of a face authentication.
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication to notify
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                webhook_url:
                  type: string
                  format: uri
      responses:
        "204":
          description: Notification successfully requested

  /v2/face-authentications/{face_authentication_id}/attempts:
    get:
      tags:
        - Face authentications
      summary: List attempts
      description: This endpoint allows you to list all attempts of a face authentication
      operationId: list_attempts_face_authentication
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List attempts
          content:
            application/json:
              examples:
                face_authentication_attempt_list_response_body:
                  $ref: "#/components/examples/face_authentication_attempt_list_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationAttemptResponseList"
        "404":
          description: The provided face authentication ID is not valid
        "500":
          description: An error occurred while fetching the attempts
    post:
      tags:
        - Face authentications
      summary: Create an Attempt
      description: This endpoint allows you to create a new Attempt. It is possible when the face-authentication is in one of
        the following statuses `created`, `pending`, `capture_in_progress`, `retry_required`
      operationId: create_attempt_face_authentication
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Minimal body:
                $ref: "#/components/examples/attempt_creation_request_body_min"
              All possible data:
                $ref: "#/components/examples/face_attempt_creation_request_body_max"
            schema:
              $ref: "#/components/schemas/FaceAuthenticationAttemptInputPost"
      responses:
        "201":
          description: Attempt created
          content:
            application/json:
              examples:
                face_authentication_attempt_creation_response_body:
                  $ref: "#/components/examples/face_authentication_attempt_creation_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationAttemptOutputPost"
        "404":
          description: The provided face authentication ID is not valid
        "409":
          description: The current face authentication status does not allow the creation of a new attempt.
            The face authentication status must be either `created`, `pending`, `capture_in_progress`, or `retry_required`
        "500":
          description: An error occurred while creating the attempt

  /v2/face-authentications/{face_authentication_id}/attempts/{attempt_id}:
    get:
      tags:
        - Face authentications
      summary: Retrieve an attempt
      description: This endpoint allows you to retrieve the details for a given attempt
      operationId: fetch_attempts_face_authentication
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication
          required: true
          schema:
            type: string
        - name: attempt_id
          in: path
          description: ID of the attempt
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Attempt fetched
          content:
            application/json:
              examples:
                face_authentication_detail_response_body:
                  $ref: "#/components/examples/face_authentication_attempt_get_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationAttemptOutputGet"
        "404":
          description: The provided face authentication ID or attempt ID is not valid
        "500":
          description: An error occurred while fetching the attempt
components:
  schemas:
    ########################### Utils schemas #############################
    DatedObject:
      type: object
      required: [created_on, modified_on]
      properties:
        created_on:
          description: UTC Date time when the resource was created
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        modified_on:
          description: UTC Date time when the resource was modified
          type: string
          format: date-time
          example: 2017-07-21T17:40:32Z

    CountryCodeIso2:
      type: string
      format: ISO 3166-1 alpha-2
      pattern: ^[A-Za-z]{2}$
      example: US

    Gender:
      type: string
      description: Person gender.
      example: M
      enum:
        - M
        - F

    ResponseCodes:
      type: object
      description: The code giving more details about the result.
      properties:
        code:
          $ref: "#/components/schemas/ResponseCode"
        summary:
          $ref: "#/components/schemas/ResponseSummary"

    ResponseSummary:
      type: string
      description: A descriptive code of the response code.

    ResponseCode:
      type: integer
      description: The numeric code of the response code.
      minimum: 10000
      maximum: 69999

    PhonePrefix:
      type: string
      format: international phone prefix
      pattern: ^\+(\d+)$
      example: "+33"

    DomesticPhoneNumber:
      type: string
      format: domestic phone number
      pattern: ^\d{1,14}$
      example: "2068133616"

    PhoneNumber:
      type: object
      required: [country_code, number]
      properties:
        country_code:
          $ref: "#/components/schemas/PhonePrefix"
        number:
          $ref: "#/components/schemas/DomesticPhoneNumber"

    HalLink:
      type: object
      required: [href]
      properties:
        href:
          type: string
          format: uri

    PreSignedUrl:
      type: string
      format: uri
      description: Pre-signed URL
      example: https://storage-b.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4
    #######################################################################

    ################ Verifications Shared schemas #########################
    UserJourneyId:
      type: string
      description: User journey unique identifier.
      pattern: ^usj_\w+$
      example: usj_tkoi5db4hryu5cei5vwoabr7we

    DeclaredData:
      type: object
      required: [name]
      properties:
        name:
          type: string
          maxLength: 255

    Document:
      type: object
      required: [document_type, document_issuing_country, front_image_signed_url]
      allOf:
        - $ref: "#/components/schemas/Identity"
        - properties:
            personal_number:
              type: string
              maxLength: 255
            tax_identification_number:
              type: string
              maxLength: 255
            document_type:
              $ref: "#/components/schemas/DocumentTypes"
            document_issuing_country:
              $ref: "#/components/schemas/CountryCodeIso2"
            permit_obtaining_date:
              type: string
              format: date
            permit_expiry_date:
              type: string
              format: date
            permit_type_detailed:
              type: string
              maxLength: 255
            permit_type_remarks:
              type: string
              maxLength: 255
            document_number:
              type: string
              maxLength: 255
            document_expiry_date:
              type: string
              format: date
            document_issue_date:
              type: string
              format: date
            document_issue_place:
              type: string
              maxLength: 255
            document_mrz:
              type: string
              pattern: ^([A-Z0-9<]{2}[A-Z0-9<]{1,38}[\n\r])+([A-Z0-9<]{2}[A-Z0-9<]{1,44}[\n\r])?([A-Z0-9<]{2}[A-Z0-9<]{1,44}[\n\r])?$
            front_image_signed_url:
              $ref: "#/components/schemas/PreSignedUrl"
            back_image_signed_url:
              $ref: "#/components/schemas/PreSignedUrl"
            signature_image_signed_url:
              $ref: "#/components/schemas/PreSignedUrl"

    DocumentTypes:
      type: string
      description: Type of document.
      enum:
        - Driving licence
        - ID
        - Passport
        - Residence Permit

    Event:
      type: object
      required: [specversion, type, subject, id, time, datacontenttype, data]
      properties:
        specversion:
          type: string
          description: The version of the CloudEvents specification.
          example: "2.0"
        type:
          type: string
          description: The type of the CloudEvent.
          example: "identity_verification_capture_completed"
        subject:
          type: string
          description: The identifier of the subject of the event.
          example: "idv_5hxpdwegjcbujpth3wdo55d3vm"
        id:
          type: string
          description: The identifier of the event.
          example: "evnt_5hxpdwegjcbujpth3wdo55d3vm"
        time:
          type: string
          format: date-time
          description: The time when the event occurred.
          example: "2023-03-22T17:31:00Z"
        datacontenttype:
          type: string
          description: The content type of the data attribute.
          example: "application/json"
        data:
          type: object
          description: The event payload.
          example:
            {
              "applicant_id": "aplt_5hxpdwegjcbujpth3wdo55d3vm",
              "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
              "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
              "status": "declined",
              "response_codes":
                [
                  { "code": 61310, "summary": "document_front_not_captured" },
                  { "code": 62102, "summary": "document_not_accepted" },
                ],
            }

    Identity:
      type: object
      required: [full_name, birth_date]
      properties:
        full_name:
          type: string
          minLength: 2
          maxLength: 510
        first_names:
          type: string
          minLength: 1
          maxLength: 255
        last_name:
          type: string
          minLength: 1
          maxLength: 255
        last_name_at_birth:
          type: string
          minLength: 1
          maxLength: 255
        birth_date:
          type: string
          format: date
        birth_place:
          type: string
          minLength: 1
          maxLength: 255
        nationality:
          $ref: "#/components/schemas/CountryCodeIso2"
        gender:
          $ref: "#/components/schemas/Gender"

    BaseOutputList:
      type: object
      properties:
        total_count:
          type: integer
        skip:
          type: integer
        limit:
          type: integer
        _links:
          allOf:
            - $ref: "#/components/schemas/SelfLink"
            - $ref: "#/components/schemas/NextLink"
            - $ref: "#/components/schemas/PreviousLink"

    SelfLink:
      type: object
      required: [self]
      properties:
        self:
          $ref: "#/components/schemas/HalLink"

    NextLink:
      type: object
      required: [next]
      properties:
        next:
          $ref: "#/components/schemas/HalLink"

    PreviousLink:
      type: object
      required: [previous]
      properties:
        previous:
          $ref: "#/components/schemas/HalLink"

    ActiveLink:
      type: object
      required: [verification_url]
      properties:
        verification_url:
          $ref: "#/components/schemas/HalLink"

    VerificationFace:
      type: object
      properties:
        image_signed_url:
          type: string
          nullable: true
      required:
        - image_signed_url

    VerificationIdentity:
      type: object
      description: IdentitySerializer for our main Identity model
      properties:
        first_names:
          type: string
          nullable: true
        full_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        last_name_at_birth:
          type: string
          nullable: true
        birth_date:
          type: string
          format: date
          nullable: true
        birth_place:
          type: string
          nullable: true
          maxLength: 255
        nationality:
          type: string
        gender:
          type: string
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/GenderA47Enum'
            - $ref: '#/components/schemas/BlankEnum'
            - $ref: '#/components/schemas/NullEnum'
      required:
        - full_name

    GenderA47Enum:
      enum:
        - M
        - F
        - NA
      type: string
      description: |-
        * `M` - M
        * `F` - F
        * `NA` - NA

    BlankEnum:
      enum:
        - ''

    NullEnum:
      enum:
        - null
    #######################################################################

    ########################### Applicant schemas #########################
    BaseApplicant:
      type: object
      properties:
        external_applicant_id:
          type: string
          example: "ext_osdfdfdb4hryu5cei5vwoabrk5k"
        email:
          type: string
          format: email
          example: david.vincent@courriel.ml

    ApplicantInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseApplicant"

    ApplicantOutputBase:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/ApplicantId"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/BaseApplicant"
        - $ref: "#/components/schemas/ApplicantsLinks"

    ApplicantInputPost:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApplicantInputBase"

    ApplicantOutputPost:
      type: object
      required: [id]
      allOf:
        - $ref: "#/components/schemas/ApplicantOutputBase"

    ApplicantOutputGet:
      type: object
      required: [id]
      allOf:
        - $ref: "#/components/schemas/ApplicantOutputBase"

    ApplicantInputPatch:
      type: object
      properties:
        email:
          type: string
          format: email
          example: david.vincent@courriel.ml

    ApplicantOutputPatch:
      type: object
      required: [id]
      allOf:
        - $ref: "#/components/schemas/ApplicantOutputBase"

    ApplicantOutputAnonymize:
      type: object
      required: [id]
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/ApplicantId"
      allOf:
        - $ref: "#/components/schemas/ApplicantsLinks"
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/ApplicantOutputBase"
        ######################### Applicant Utils schemas #####################
    ApplicantId:
      type: string
      description: Applicant unique identifier.
      pattern: ^aplt_\w+$
      example: aplt_tkoi5db4hryu5cei5vwoabr7we

    ApplicantsLinks:
      type: object
      required: [_links]
      properties:
        _links:
          allOf:
            - $ref: "#/components/schemas/SelfLink"

    ApplicantLink:
      type: object
      required: [applicant]
      properties:
        applicant:
          $ref: "#/components/schemas/HalLink"
        #######################################################################
    #######################################################################

    ################## Identity Verification schemas ######################
    IdentityVerificationBase:
      type: object
      properties:
        user_journey_id:
          allOf:
            - $ref: "#/components/schemas/UserJourneyId"
        applicant_id:
          allOf:
            - $ref: "#/components/schemas/ApplicantId"
        declared_data:
          $ref: "#/components/schemas/DeclaredData"
        webhook_url:
          type: string
          format: uri

    IdentityVerificationInputBase:
      type: object
      allOf:
          - $ref: "#/components/schemas/IdentityVerificationBase"

    IdentityVerificationOutputBase:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/VerificationStatuses"
        response_codes:
          type: array
          items:
            $ref: '#/components/schemas/ResponseCodes'
        verified_identity:
          $ref: '#/components/schemas/VerificationIdentity'
        documents:
          type: array
          items:
            $ref: "#/components/schemas/Document"
        face:
          $ref: '#/components/schemas/VerificationFace'
        verification_policy_version:
          type: string
          description: returned ONLY for certified verifications
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationBase"

    IdentityVerificationInputPost:
      type: object
      required: [declared_data, webhook_url, applicant_id]
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationInputBase"

    IdentityVerificationOutputPost:
      type: object
      required: [id, declared_data, status, webhook_url, _links, response_codes, applicant_id, user_journey_id]
      properties:
        id:
          $ref: "#/components/schemas/IdentityVerificationId"
        _links:
          $ref: "#/components/schemas/IdentityVerificationLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityVerificationOutputBase"

    IdentityVerificationInputHelper:
      type: object
      required: [declared_data, webhook_url, redirect_url]
      properties:
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        redirect_url:
          type: string
          format: uri
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationInputBase"

    IdentityVerificationOutputHelper:
      type: object
      required: [id, declared_data, status, webhook_url, _links, redirect_url, response_codes, applicant_id, user_journey_id]
      properties:
        id:
          $ref: "#/components/schemas/IdentityVerificationId"
        redirect_url:
          type: string
          format: uri
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        _links:
          $ref: "#/components/schemas/IdentityVerificationHelperLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityVerificationOutputBase"

    IdentityVerificationOutputGet:
      type: object
      required: [id, declared_data, status, webhook_url, _links, applicant_id, redirect_url, response_codes, user_journey_id]
      properties:
        id:
          $ref: "#/components/schemas/IdentityVerificationId"
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        redirect_url:
          type: string
          format: uri
        _links:
          $ref: "#/components/schemas/IdentityVerificationHelperLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityVerificationOutputBase"

    IdentityVerificationOutputAnonymize:
      type: object
      required: [id, status, webhook_url, _links, applicant_id, redirect_url, response_codes, user_journey_id]
      properties:
        id:
          $ref: "#/components/schemas/IdentityVerificationId"
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        redirect_url:
          type: string
          format: uri
        _links:
          $ref: "#/components/schemas/IdentityVerificationLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityVerificationOutputBase"

    IdentityVerificationOutputPdfReport:
      type: object
      properties:
        pdf_report:
          type: string
          format: uri
        ############### Identity Verification Utils schemas ###################
    VerificationStatuses:
      type: string
      description: Status of the verification.
      enum:
        - created
        - pending
        - capture_in_progress
        - checks_in_progress
        - approved
        - declined
        - retry_required
        - refused
        - inconclusive

    IdentityVerificationHelperLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/SelfLink"
        - $ref: "#/components/schemas/ApplicantLink"
        - $ref: "#/components/schemas/ActiveLink"

    IdentityVerificationLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/SelfLink"
        - $ref: "#/components/schemas/ApplicantLink"

    IdentityVerificationId:
      type: string
      description: Identity verification unique identifier.
      pattern: ^idv_\w+$
      example: idv_tkoi5db4hryu5cei5vwoabr7we
        #######################################################################
    #######################################################################

    ######################## Identity Attempt schemas #####################
    IdentityAttemptBase:
      type: object
      properties:
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        client_information:
          $ref: "#/components/schemas/IdentityClientInformation"
        redirect_url:
          type: string
          format: uri

    IdentityVerificationAttemptInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/IdentityAttemptBase"

    IdentityVerificationAttemptOutputBase:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: "#/components/schemas/AttemptStates"
        response_codes:
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/ResponseCodes"
        applicant_session_information:
          $ref: "#/components/schemas/IdentityVerificationApplicantSessionInformation"
        _links:
          allOf:
            - $ref: "#/components/schemas/AttemptLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityAttemptBase"

    IdentityVerificationAttemptOutputList:
      type: object
      required: [total_count, skip, limit, _links, data]
      properties:
        data:
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/IdentityVerificationAttemptOutputGet"
      allOf:
        - $ref: "#/components/schemas/BaseOutputList"

    IdentityVerificationAttemptInputPost:
      type: object
      required: [redirect_url]
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationAttemptInputBase"

    IdentityVerificationAttemptOutputPost:
      type: object
      required: [id, status, redirect_url, response_codes, _links]
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationAttemptOutputBase"

    IdentityVerificationAttemptOutputGet:
      type: object
      required: [id, status, redirect_url, response_codes, _links]
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationAttemptOutputBase"

        ###################### Identity Attempt Utils schemas ####################
    AttemptStates:
      type: string
      description: States of an attempt.
      enum:
        - pending_redirection
        - capture_in_progress
        - checks_in_progress
        - completed
        - expired
        - capture_aborted
        - capture_refused
        - checks_inconclusive
        - terminated

    InitialDevices:
      type: string
      description: Initial device which started the session
      enum:
        - mobile
        - desktop

    AttemptLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/ActiveLink"
        - $ref: "#/components/schemas/SelfLink"

    IdentityClientInformation:
      type: object
      properties:
        pre_selected_residence_country:
          $ref: "#/components/schemas/CountryCodeIso2"
        pre_selected_document_issuing_country:
          $ref: "#/components/schemas/CountryCodeIso2"
        pre_selected_document_type:
          $ref: "#/components/schemas/DocumentTypes"

    SelectedDocument:
      type: object
      description: The code giving more details about the result.
      properties:
        country:
          $ref: "#/components/schemas/CountryCodeIso2"
        document_type:
          $ref: "#/components/schemas/DocumentTypes"

    BaseApplicantSessionInformation:
      type: object
      properties:
        ip_address:
          type: string
          description: Ip address of the applicant during the session
          example: "123:456:789:00"
        number_of_sessions:
          type: int
          description: Number of sessions opened by user
          example: 3
        user_agent:
          type: string
          description: User session user agent
          example: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G960F Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36"
        initial_device:
          $ref: "#/components/schemas/InitialDevices"



    IdentityVerificationApplicantSessionInformation:
      type: object
      properties:
        selected_documents:
          description: Documents selected by the applicant in selection order
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/SelectedDocument"
      allOf:
        - $ref: "#/components/schemas/BaseApplicantSessionInformation"
        ############################################################################
    #######################################################################
    
    ######################### Face Attempt schemas ########################
    FaceAttemptBase:
      type: object
      properties:
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        client_information:
          $ref: "#/components/schemas/FaceAttemptClientInformation"
        redirect_url:
          type: string
          format: uri

    FaceAuthenticationAttemptInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/FaceAttemptBase"

    FaceAuthenticationAttemptOutputBase:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: "#/components/schemas/AttemptStates"
        response_codes:
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/ResponseCodes"
        applicant_session_information:
          $ref: "#/components/schemas/FaceAuthenticationApplicantSessionInformation"
        _links:
          allOf:
            - $ref: "#/components/schemas/AttemptLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/FaceAttemptBase"

    FaceAuthenticationAttemptResponseList:
      type: object
      required: [ total_count, skip, limit, _links, data ]
      properties:
        data:
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/FaceAuthenticationAttemptOutputGet"
      allOf:
        - $ref: "#/components/schemas/BaseOutputList"

    FaceAuthenticationAttemptInputPost:
      type: object
      required: [redirect_url]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationAttemptInputBase"

    FaceAuthenticationAttemptOutputPost:
      type: object
      required: [id, status, redirect_url, response_codes, _links]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationAttemptOutputBase"

    FaceAuthenticationAttemptOutputGet:
      type: object
      required: [id, status, redirect_url, response_codes, _links]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationAttemptOutputBase"
          
    ###################### Face Attempt Utils schemas ####################
    FaceAuthenticationApplicantSessionInformation:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseApplicantSessionInformation"

    FaceAttemptClientInformation:
      type: object
      properties:
        pre_selected_residence_country:
          $ref: "#/components/schemas/CountryCodeIso2"
          ######################################################################
    #######################################################################

    ###################### Face Authentication schemas ####################
    FaceAuthenticationBase:
      type: object
      properties:
        user_journey_id:
          $ref: "#/components/schemas/UserJourneyId"
        applicant_id:
          $ref: "#/components/schemas/ApplicantId"
        webhook_url:
          type: string
          format: uri

    FaceAuthenticationInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationBase"
          
    FaceAuthenticationOutputBase:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/FaceAuthenticationId"
        status:
          $ref: "#/components/schemas/VerificationStatuses"
        response_codes:
          type: array
          items:
            $ref: '#/components/schemas/ResponseCodes'
        face:
          $ref: '#/components/schemas/VerificationFace'
        _links:
          $ref: "#/components/schemas/FaceAuthenticationLinks"
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationBase"
        - $ref: "#/components/schemas/DatedObject"
    
    FaceAuthenticationInputPost:
      type: object
      required: [webhook_url, applicant_id, user_journey_id]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationInputBase"

    FaceAuthenticationOutputPost:
      type: object
      required: [id, status, webhook_url, applicant_id, response_codes, user_journey_id, _links]
      properties:
        face:
          $ref: '#/components/schemas/VerificationFace'
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationOutputBase"
    
    FaceAuthenticationOutputGet:
      type: object
      required: [id, status, webhook_url, applicant_id, response_codes, user_journey_id, _links]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationOutputBase"

    FaceAuthenticationOutputAnonymize:
      type: object
      required: [id, status, webhook_url, applicant_id, user_journey_id, _links]
      properties:
        face:
          $ref: '#/components/schemas/VerificationFace'
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationOutputBase"

        ################### Face Authentication Utils schemas #################
    FaceAuthenticationId:
      type: string
      description: Face authentication unique identifier.
      pattern: ^fav_\w+$
      example: fav_tkoi5db4hryu5cei5vwoabr7we

    FaceAuthenticationLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/SelfLink"
        - $ref: "#/components/schemas/ApplicantLink"
        #######################################################################
    #######################################################################

    ################## AML Verifications schemas ##########################
    AMLVerificationBase:
      type: object
      allOf:
        - properties:
            webhook_url:
              type: string
              format: uri
            applicant_id:
              allOf:
                - $ref: "#/components/schemas/ApplicantId"
            search_parameters:
              $ref: "#/components/schemas/SearchParameters"
            monitored:
              type: boolean

    AMLVerificationInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/AMLVerificationBase"

    AMLVerificationOutputBase:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/AMLVerificationStatuses"
        _links:
          allOf:
            - $ref: "#/components/schemas/AMLVerificationLinks"
      allOf:
        - $ref: "#/components/schemas/AMLVerificationBase"

    AMLVerificationInputPost:
      type: object
      required: [webhook_url, applicant_id, search_parameters]
      allOf:
        - $ref: "#/components/schemas/AMLVerificationInputBase"

    AMLVerificationOutputPost:
      type: object
      required: [id, status, webhook_url, _links, applicant_id, search_parameters]
      properties:
        id:
          $ref: "#/components/schemas/AMLVerificationId"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/AMLVerificationOutputBase"

    AMLVerificationOutputGet:
      type: object
      required: [id, status, webhook_url, _links, applicant_id, search_parameters]
      properties:
        id:
          $ref: "#/components/schemas/AMLVerificationId"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/AMLVerificationOutputBase"

        ############### AML Verifications Utils schemas #######################
    AMLVerificationId:
      type: string
      description: AML verification unique identifier.
      pattern: ^amlv_\w+$
      example: amlv_tkoi5db4hryu5cei5vwoabr7we

    AMLVerificationStatuses:
      type: string
      description: Status of the AML verification.
      enum:
        - created
        - screening_in_progress
        - approved
        - declined
        - review_required

    SearchParameters:
      type: object
      required: [configuration_identifier]
      description: ComplyAdvantage search inputs
      properties:
        configuration_identifier:
          type: string
          description: Configuration identifier
          example: "12345678-1234-1234-1234-123456789012"

    AMLVerificationLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/SelfLink"
        - $ref: "#/components/schemas/ApplicantLink"
        #######################################################################
    #######################################################################

  examples:
    identity_verification_creation_request_body_helper_min:
      value:
        declared_data:
          name: David Vincent
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_creation_request_body_helper_max:
      value:
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          name: John Smith
        phone_number:
          country_code: '+1'
          number: '5555550102'
        redirect_url: https://example.com?query-param=hello
        webhook_url: https://my.api/events/

    identity_verification_creation_request_body_min_plus_aplt:
      value:
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          name: David Vincent
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_creation_response_body_helper:
      value:
        id: idv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: pending
        response_codes: []
        declared_data:
          name: David Vincent
        documents: []
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    identity_verification_creation_request_body_min:
      value:
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          name: John Smith
        webhook_url: "https://my.api/events/"

    identity_verification_creation_request_body_max:
      value:
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          name: David Vincent
        webhook_url: https://my.api/events/

    identity_verification_creation_response_body:
      value:
        id: "idv_tkoi5db4hryu5cei5vwoabr7we"
        created_on: "2017-07-21T17:32:28Z"
        modified_on: "2017-07-21T17:40:32Z"
        user_journey_id: "usj_tkoi5db4hryu5cei5vwoabr7we"
        applicant_id: "aplt_tkoi5db4hryu5cei5vwoabr7we"
        status: "created"
        response_codes: []
        declared_data:
          name: "David Vincent"
        documents: []
        webhook_url: "https://my.api/events/"
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"


    identity_verification_response_body:
      value:
        id: idv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: declined
        response_codes:
          - { "code": 61310, "summary": "document_front_not_captured" }
          - { "code": 62102, "summary": "document_not_accepted" }
        verified_identity:
          full_name: David Vincent
          birth_date: 1934-10-02
        declared_data:
          name: David Vincent
        documents:
          - full_name: David Vincent
            birth_date: 1934-10-02
            document_type: ID
            document_issuing_country: US
            front_image_signed_url: https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555
        face:
          image_signed_url: https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4
        phone_number:
          country_code: "+1"
          number: "2068133616"
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    identity_verification_anonymization_response_body:
      value:
        id: idv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: pending
        response_codes: []
        phone_number:
          country_code: '+1'
          number: '5555550102'
        documents: []
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"

    identity_verification_pdf_response_body:
      value:
        pdf_report: www.pdf.com

    identity_verification_attempt_list_response_body:
      value:
        total_count: 2
        skip: 10
        limit: 10
        data:
          - id: "iatp_tkoi5db4hryu5cei5vwoabrPoQ"
            created_on: 2017-07-21T17:32:28Z
            modified_on: 2017-07-21T17:40:32Z
            status: "checks_in_progress"
            response_codes: []
            phone_number:
              country_code: "+1"
              number: "2068133616"
            redirect_url: "https://myweb.site?query-param=hello"
            client_information:
              pre_selected_residence_country: "FR"
              pre_selected_document_issuing_country: FR
              pre_selected_document_type: ID
            applicant_session_information:
              ip_address: "123.123.123.01"
            _links:
              self:
                href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we/attempts/iatp_idv_tkoi5db4hryu5cei5vwoabr7we"
              verification_url:
                href: "https://id.ubble.ai/4hryu5cei5/"
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/{verification_id}/attempts"
          next:
            href: "https://api.ubble.ai/v2/identity-verifications/{verification_id}/attempts?..."
          previous:
            href: "https://api.ubble.ai/v2/identity-verifications/{verification_id}/attempts?..."

    attempt_creation_request_body_min:
      value:
        redirect_url: https://myweb.site?query-param=hello

    identity_attempt_creation_request_body_max:
      value:
        phone_number:
          country_code: "+1"
          number: "2068133616"
        client_information:
          pre_selected_residence_country: "FR"
          pre_selected_document_issuing_country: FR
          pre_selected_document_type: ID
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_attempt_creation_response_body:
      value:
        id: "iatp_tkoi5db4hryu5cei5vwoabrPoQ"
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        status: completed
        response_codes: []
        phone_number:
          country_code: "+1"
          number: "2068133616"
        client_information:
          pre_selected_residence_country: "FR"
          pre_selected_document_issuing_country: FR
          pre_selected_document_type: ID
        redirect_url: https://myweb.site?query-param=hello
        applicant_session_information:
          ip_address: 33.333.333.33
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we/attempts/iatp_idv_tkoi5db4hryu5cei5vwoabr7we"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    identity_verification_attempt_get_response_body:
      value:
        id: "iatp_tkoi5db4hryu5cei5vwoabrPoQ"
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        phone_number:
          country_code: "+1"
          number: "2068133616"
        redirect_url: "https://myweb.site?query-param=hello"
        status: "checks_in_progress"
        response_codes: []
        client_information:
          pre_selected_residence_country: FR
          pre_selected_document_issuing_country: FR
          pre_selected_document_type: ID
        applicant_session_information:
          ip_address: "123.123.123.01"
          selected_documents:
            - country: "FR"
              document_type: "Passport"
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we/attempts/iatp_idv_tkoi5db4hryu5cei5vwoabr7we"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    applicant_creation_request_body:
      value:
        external_applicant_id: ext_osdfdfdb4hryu5cei5vwoabrk5k
        email: david.vincent@courriel.ml

    applicant_response_body:
      value:
        id: aplt_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        external_applicant_id: ext_osdfdfdb4hryu5cei5vwoabrk5k
        email: david.vincent@courriel.ml
        _links:
          self:
            href: https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we

    applicant_patch_request_body:
      value:
        email: david.vincent@courriel.ml

    applicant_response_body_anonymized:
      value:
        id: aplt_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        external_applicant_id: ext_osdfdfdb4hryu5cei5vwoabrk5k
        _links:
          self:
            href: https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we

    aml_verification_creation_request_body_min:
      value:
        search_parameters:
          configuration_identifier: 011e5c14-2222-738c-8852-dfdbbe53f233
        webhook_url: https://my.api/events/
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we

    aml_verification_creation_request_body_max:
      value:
        search_parameters:
          configuration_identifier: 011e5c14-2222-738c-8852-dfdbbe53f233
        webhook_url: https://my.api/events/
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        monitored: false

    aml_verification_response_body:
      value:
        id: amlv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        status: created
        webhook_url: https://my.api/events/
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        search_parameters:
          configuration_identifier: 8eb79430-c014-41e5-be73-2c2c091322b8
        monitored: false
        _links:
          self:
            href: "https://api.ubble.ai/v2/aml-verifications/amlv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"

#    idv_identity_verification_creation_request_invalid_body:
#      value:
#        error_type: request_invalid
#        error_codes:
#          - declared_data__birth_date__invalid_format
#          - declared_data__name__required
#          - phone_number__country_code__invalid

#    idv_identity_verification_unprocessable_entity_body:
#      value:
#        error_type: unprocessable_entity
#        error_codes:
#          - organization__no_configuration

    # Face Authentication
    face_authentication_creation_response_body:
      value:
        id: fav_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: declined
        response_codes:
          - { "code": 62403, "summary": "consent_unclear" }
          - { "code": 61402, "summary": "face_video_lighting_issue" }
        face:
          image_signed_url: https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4
        webhook_url: https://my.api/events/
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/fav_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"

    face_authentication_anonymization_response_body:
      value:
        id: fav_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: declined
        response_codes:
          - { "code": 62403, "summary": "consent_unclear" }
          - { "code": 61402, "summary": "face_video_lighting_issue" }
        webhook_url: https://my.api/events/
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/face_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"

    face_authentication_attempt_get_response_body:
      value:
        id: "fatp_tkoi5db4hryu5cei5vwoabrPoQ"
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        phone_number:
          country_code: "+1"
          number: "2068133616"
        redirect_url: "https://myweb.site?query-param=hello"
        status: "checks_in_progress"
        response_codes: [ ]
        client_information:
          pre_selected_residence_country: FR
        applicant_session_information:
          ip_address: "123.123.123.01"
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts/{attempt_id}"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    face_authentication_attempt_creation_response_body:
      value:
        id: "fatp_tkoi5db4hryu5cei5vwoabrPoQ"
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        status: "pending_redirection"
        response_codes: []
        phone_number:
          country_code: "+1"
          number: "2068133616"
        client_information:
          pre_selected_residence_country: "FR"
        redirect_url: https://myweb.site?query-param=hello
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts/{attempt_id}"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    face_attempt_creation_request_body_max:
      value:
        phone_number:
          country_code: "+1"
          number: "2068133616"
        client_information:
          pre_selected_residence_country: "FR"
        redirect_url: https://myweb.site?query-param=hello

    face_authentication_attempt_list_response_body:
      value:
        total_count: 2
        skip: 10
        limit: 10
        data:
          - id: "fatp_tkoi5db4hryu5cei5vwoabrPoQ"
            created_on: 2017-07-21T17:32:28Z
            modified_on: 2017-07-21T17:40:32Z
            status: "checks_in_progress"
            response_codes: []
            phone_number:
              country_code: "+1"
              number: "2068133616"
            redirect_url: "https://myweb.site?query-param=hello"
            client_information:
              pre_selected_residence_country: "FR"
            applicant_session_information:
              ip_address: "123.123.123.01"
            _links:
              verification_url:
                href: "https://id.ubble.ai/4hryu5cei5/"
              self:
                href: "https://api.ubble.ai/face-authentications/4hryu5cei5/fatp_tkoi5db4hryu5cei5vwoabrPoQ"
          - id: "fatp_tkoi5db4hryu5cei5vwoabriom"
            created_on: 2017-07-21T16:30:28Z
            modified_on: 2017-07-21T16:32:32Z
            status: "checks_inconclusive"
            response_codes: [{
              "code": 61402,
              "summary": "face_video_lighting_issue"
            } ]
            phone_number:
              country_code: "+1"
              number: "2068133616"
            redirect_url: "https://myweb.site?query-param=hello"
            client_information:
              pre_selected_residence_country: "FR"
            applicant_session_information:
              ip_address: "123.123.123.01"
            _links:
              self:
                href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts/{attempt_id}"
              verification_url:
                href: "https://id.ubble.ai/4hryu5clik/"
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts"
          next:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts?..."
          previous:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts?..."
