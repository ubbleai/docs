openapi: 3.0.3

info:
  title: Checkout.com - Identity Verification
  x-logo:
    url: "https://raw.githubusercontent.com/ubbleai/docs/main/cko_doc_logo.png"
  description: |
    # Introduction
    [Checkout.com](https://www.checkout.com/)'s Identity Verification solution enables you to verify your users' identities
    to meet compliance requirements and reduce the risk of fraud.
    
    To integrate Identity Verification and configure your account, reach out to your Account Manager or support.idv@checkout.com.

    The following represents a typical identity verification flow:

     <img src="https://raw.githubusercontent.com/ubbleai/docs/main/intro_diagram.png" alt="intro_diagram" width="800" height="auto">

    1. **You create an applicant, an identity verification and an attempt.** You can use the RESTful endpoints or the helper. You'll receive a unique URL that you need to redirect the user to.
    2. **You redirect the user.** You have full control over how to [manage the verification redirection](#section/Manage-verification-redirection) to ensure a smooth user experience.
    The user performs verification on their mobile device. They'll use their device camera to scan their face and documents. 
    3. **You'll receive the [verification results](#section/Handle-verification-results) via a [webhook](#section/Webhooks).** You can also
    request more detailed results via the [API](#tag/Identity-verifications/operation/retrieve_identity_verification),
    or download a [PDF report](#tag/Identity-verifications/operation/pdf_identity_verification).
    4. **You decide on follow-up actions based on the verification results.** You can also reattempt the identity verification if required.

    # Get started
    Use the Identity Verification API and sandbox environment to test the identity verification process.

    ## Before you begin
    - Make sure you have a [test account](https://dashboard.ubble.ai/) and credentials. Open the [dashboard](https://dashboard.ubble.ai/)
    and navigate to the "API credentials" tab to create your credentials and your certificate. If you need an account, please contact support.idv@checkout.com.
    - We use mutual Transport Layer Security. You must then authenticate your calls by including your mTLS certificate in API calls.
    - To receive notifications for the various identity verification events triggered throughout the steps, you will need to define a
    webhook url. For security reasons all our webhook calls are signed, can be whitelisted or can even request an authentication.
    You will find all details about webhook implementation in the [webhook section](#section/Webhooks).
    - You'll also need to provide a redirect URL. The user will be redirected to this URL once verification is completed.

    ## Step 1: Create and start an identity verification
    
    <div style="padding: 0px 0px 14px 14px ; background-color: #cfe5ff; border-color: #f8c92e; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; vertical-align: center;">â“˜</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>To create the first attempt and get the verification_url you can use the RESTful endpoints or the helper described here. To create the subsequent attempts, we strongly recommend the use of the create an attempt endpoint.</p>
      </div>
    </div>
    
    ### Request example
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/create-and-start-idv</span>
    </div>

    ```json
    {
      "declared_data": {
        "name": "David Vincent"
      },
      "webhook_url": "https://my.api/events/",
      "redirect_url": "https://myweb.site?query-param=hello"
    }
    ```

    ### Response example

    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr7we",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr7we",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr7we",
      "status": "pending",
      "response_codes": [],
      "declared_data": {
        "name": "David Vincent",
        "birth_date": "1934-10-02"
      },
      "documents": [],
      "webhook_url": "https://my.api/events/",
      "redirect_url": "https://myweb.site?query-param=hello",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
        },
        "applicant": {
          "href": "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```

    Make a note of the identity verification `id` value in the response. You'll need it to retrieve the detailed verification results later.

    For more details, see our the [CREATE AND START AN IDENTITY VERIFICATION endpoint.](#tag/Identity-verifications).

    ## Step 2: Perform a test verification

    The identity verification response contains a `_links.verification_url.href` field. You should send the user to this URL to redirect them to the Identity Verification web application.

    To test this step, open the URL on your browser and follow the instructions displayed.
    
    ## Step 3: Verify webhook notifications

    If you've configured your webhook receiver, you'll be notified of events that occur during the identity verification flow via webhooks. Among other information, the webhooks will contain:
    - the event `type` - for example, `identity_verification_capture_completed` or `identity_verification_retry_requested`
    - the identity verification `status` - for example, `capture_in_progress`, `approved`, or `declined`

    ### Webhook example

    ```json
    {
        "specversion": "2.0",
        "type": "identity_verification_capture_completed",
        "subject": "idv_5hxpdwegjcbujpth3wdo55d3vm",
        "id": "evnt_5hxpdwegjcbujpth3wdo55d3vm",
        "time": "2023-03-22T17:31:00Z",
        "datacontenttype": "application/json",
        "data": {
            "applicant_id": "aplt_5hxpdwegjcbujpth3wdo55d3vm",
            "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
            "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
            "status": "declined",
            "response_codes": [
                {"code": 61310, "summary": "document_front_not_captured"},
                {"code": 62102, "summary": "document_not_accepted"}
            ]
        }
    }
    ```

    Wait until you've received a webhook with the `status` field set to one of the following values before continuing to the next step:
    - `approved`
    - `declined`
    - `retry_required`

    ## Step 4: Retrieve detailed verification results

    To retrieve the detailed verification results, call the following endpoint with the identity verification id value returned in the Request an identity verification response. 

    ### Response example

    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}</span>
    </div>
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr7we",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr7we",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr7we",
      "status": "declined",
      "response_codes": [
        {
          "code": 61310,
          "summary": "document_front_not_captured"
        },
        {
          "code": 62102,
          "summary": "document_not_accepted"
        }
      ],
      "verified_identity": {
        "full_name": "David Vincent",
        "birth_date": "1934-10-02"
      },
      "declared_data": {
        "name": "David Vincent",
        "birth_date": "1934-10-02"
      },
      "documents": [
        {
          "full_name": "David Vincent",
          "birth_date": "1934-10-02",
          "document_type": "ID",
          "document_issuing_country": "US",
          "front_image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555"
        }
      ],
      "face": {
        "image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4"
      },
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "webhook_url": "https://my.api/events/",
      "redirect_url": "https://myweb.site?query-param=hello",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
        },
        "applicant": {
          "href": "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```

    For more details, see our the [retrieve an identity verification endpoint](#tag/Identity-verifications/operation/retrieve_identity_verification). 

    # Manage applicant redirection
    
    When you request an [identity verification](#section/Get-Started), youâ€™ll receive a `verification_url` in the response. Redirect your user to this URL so they can perform the verification.

    To ensure a smooth user experience, you can control how the redirection is handled.
    
    ## URL expiration and attempt creation
    
    For security purposes, URLs generated for user verification expire after 15 minutes. To ensure applicants are consistently redirected to a valid URL, it is strongly recommended to create a new attempt each time a user initiates the verification process.
    
    ## Pre-select customer details
    
    To enhance the security and user experience, you can pre-select customer details when creating an attempt for the verification request. We highly recommend using the RESTful endpoints for creating the applicant, initiating the identity verification, and then creating the attempt.

    ## Customize the verification user experience

    Contact your Account Manager or support.idv@checkout.com to customize the verification user experience.

    You can <a href="https://www.ubble.ai/customise-your-ubble-experience/" target="_blank">customize</a> the following elements on the verification screen displayed to your users:
    - logo
    - colors
    - fonts
    - button radius
    - message prompt text

    ## Redirect to mobile for verification

    All desktop users are redirected to their mobile device to perform verification. This allows the verification to be performed in a more secure environment, and ensures that users are more likely to complete the verification journey.

    After a user has completed the verification on their mobile, we redirect them back to their desktop environment by providing them with a QR code or SMS link.

    For the SMS link, you can provide a `phone_number` value in your [identity verification request](#operation/create_identity_verification) to pre-fill the phone number associated with the redirection.

    ## Redirect using web redirection (Optional)

    For web redirection, we support the following environments and minimum browser versions:

    | Desktop      | Chrome | Firefox | Safari | Internet Explorer | Edge | Opera |
    |--------------|--------|---------|--------|-------------------|------|-------|
    | Min. Version | â‰¥ 53   | â‰¥ 52    | â‰¥ 11.1 | -                 | â‰¥ 16 | â‰¥ 58  |

    | Android      | Chrome for Android | Firefox for Android | Samsung Internet | IE Mobile |
    |--------------|--------------------|---------------------|------------------|-----------|
    | Min. Version | â‰¥ 73               | â‰¥ 66                | â‰¥ 6.2            | -         |

    | iOS          | Safari Mobile | Chrome | All other browsers |
    |--------------|---------------|--------|--------------------|
    | Min. Version | â‰¥ 11.0        | â‰¥ 14.3 | -                  |

    After you create an identity verification in your backend, you can integrate it within your website by passing the `verificationUrl` to your web app and adding it as a link:

    ```html
    <a href="`${verificationUrl}`"></a>
    ```

    <div style="padding: 0px 0px 14px 14px ; background-color: #cfe5ff; border-color: #f8c92e; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; vertical-align: center;">â“˜</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>You can view an <a href="https://github.com/ubbleai/integration_examples/tree/master/web" target="_blank">example web integration</a> on our Identity Verification GitHub repository.</p>
      </div>
    </div>

    ### Handle user return in web redirection

    When the user completes or terminates their verification, theyâ€™ll be redirected to the `redirect_url` you specified when you requested an identity verification.

    The event associated with the userâ€™s verification is returned in the webhook notification, and as a URL parameter in the `redirect_url`. If verification was unsuccessful, the URL will also contain a `response_code` URL parameter. For example:

    ```
    https://your-redirect-url.com?id=idv_01h2623ysfkhpn7czed0bw8fd6&event=identity_verification_capture_aborted&response_code=61101
    ```

    Your follow-up action is determined by the [webhook event](#section/Webhooks/Events) you receive:

    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 40%" scope="col">Webhook event</th>
          <th style="width: 60%" scope="col">Follow-up action</th>
        </tr>
        <tr>
          <td style="width: 40%">
            <p>
              <code>identity_verification_capture_aborted</code> or
              <code>identity_verification_link_expired</code>
            </p>
          </td>
          <td style="width: 60%">
            <p>
              Request a
              <a
                href="#operation/retry_identity_verification"
                target="_self"
                >retry</a
              >.
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 40%">
            <p><code>identity_verification_capture_refused</code></p>
          </td>
          <td style="width: 60%">
            <p>Propose an alternative verification method to the user.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 40%">
            <p><code>identity_verification_capture_completed </code></p>
          </td>
          <td style="width: 60%">
            <p>
              You can ask users to perform additional checks or ask them to wait
              until results are available. In some instances, you may also
              simultaneously receive an
              <code>identity_verification_checks_completed</code> webhook.
            </p>
            <p>
              You can make your decision once you receive the
              <code>identity_verification_checks_completed</code> webhook.
            </p>
          </td>
        </tr>
      </tbody>
    </table>


    ## Redirect using webview (Optional)

    For a more integrated redirection from your mobile application, you can redirect the user with a webview. Webview redirection is supported by the following platforms:
    - Android
    - iOS 13 or later â€“ via WebRTC running inside a <a href="https://developer.apple.com/documentation/webkit/wkwebview" target="_blank">WKWebView</a>
    - iOS 12 or older â€“ via the Safari browser by passing the `verificationUrl` to the `UIApplication.open()`
    <a href="https://developer.apple.com/documentation/uikit/uiapplication/1648685-open" target="_blank">method</a> in your app code
    - React Native
    - Flutter â€“ using the `flutter_inappwebview` <a href="https://inappwebview.dev/docs/intro/" target="_blank">dependency</a>,
    with the <a href="https://inappwebview.dev/docs/web-rtc/" target="_blank">WebRTC API</a> so Identity Verification can launch a video stream

    <div style="padding: 0px 0px 14px 14px ; background-color: #cfe5ff; border-color: #f8c92e; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; vertical-align: center;">â“˜</div>
      <div style="display: table-cell; vertical-align: center;">
        <p>You can view <a href="https://github.com/ubbleai/integration_examples/tree/master" target="_blank">example webview integrations</a> for each platform on our Identity Verification GitHub repository.</p>
      </div>
    </div>

    With a webview integration, youâ€™re expected to provide a deeplink to redirect the user on your mobile application.

    ### Handle user return in webview

    When the user completes or terminates their verification, theyâ€™ll be redirected to the `redirect_url` you specified when you requested an identity verification.

    The event associated with the userâ€™s verification is returned in the webhook notification, and as a URL parameter in the `redirect_url`. If verification was unsuccessful, the URL will also contain a `response_code` URL parameter. For example:

    ```
    https://your-redirect-url.com?id=idv_01h2623ysfkhpn7czed0bw8fd6&event=identity_verification_capture_aborted&response_code=61101
    ```

    Your follow-up action is determined by the [webhook event](#section/Webhooks/Events) you receive:

    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 40%" scope="col">Webhook event</th>
          <th style="width: 60%" scope="col">Follow-up action</th>
        </tr>
        <tr>
          <td style="width: 387.359px">
            <p><code>identity_verification_capture_aborted</code></p>
          </td>
          <td style="width: 491.641px">
            <p>
              Request a
              <a
                href="#operation/retry_identity_verification"
                >retry.
              </a>
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 40%">
            <p><code>identity_verification_capture_refused</code></p>
          </td>
          <td style="width: 60%">
            <p>Propose an alternative verification method to the user.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 40%">
            <p><code>identity_verification_capture_completed </code></p>
          </td>
          <td style="width: 60%">
            <p>
              You can ask users to perform additional checks, or ask them to wait
              until results are available. In some instances, you may also
              simultaneously receive an
              <code>identity_verification_checks_completed</code> webhook.
            </p>
            <p>
              You can make your decision once you receive the
              <code>identity_verification_checks_completed</code> webhook.
            </p>
          </td>
        </tr>
      </tbody>
    </table>




    ## Redirect using an iframe (Optional)

    If you use desktop to mobile redirection, we recommend using our iframe integration.

    Include the SDK as a script tag:

    ```html
    <script
      src="https://cdn.ubble.ai/iframe-sdk-1.0.0.js"
      type="application/javascript"
    ></script>
    ```

    Add a global method called `onUbbleReady` to the page. The method should be triggered when the SDK is loaded:

    ```js
    function onUbbleReady() {

    }
    ```

    Initialize a new `IDV` object:

    ```js
    function onUbbleReady() {
      const ubbleIDV = new Ubble.IDV(document.getElementById("ubble"), options);
    }
    ```

    ### API

    #### Events

    `onComplete(completeEvent)`: Triggered when a user completes the capture

    ```json
    {
      "event": "capture_completion",
      "redirectUrl": "https://your-redirect-url.com?id=<identity verification id>&event=identity_verification_capture_completed"
    }
    ```

    `onRefused(refusedEvent)`: Triggered when the applicant refuses to complete the verification

    ```json
    {
      "event": "capture_refusal",
      "responseCode": 63001,
      "redirectUrl": "https://your-redirect-url.com?id=<identity verification id>&event=identity_verification_capture_refused"
    }
    ```

    `onAbort(abortEvent)`: Triggered when the verification is terminated

    ```json
    {
      "event": "capture_abortion",
      "responseCode": 61111,
      "redirectUrl": "https://your-redirect-url.com?id=<identity verification id>&event=identity_verification_capture_aborted&response_code=63001"
    }
    ```

    `onExpired`: Triggered when the verification link has expired

    ```json
    {
      "event": "expiration",
      "redirectUrl": "https://your-redirect-url.com?id=<identity verification id>&event=identity_verification_link_expired&response_code=63001"
    }
    ```

    #### Methods

    `destroy()`: Ends the Identity Verification flow

    #### Full example

    ```js
    const ubbleIDV = new Ubble.IDV("idv", {
      width: "500",
      height: "600",
      allowCamera: true,
      verificationUrl: "https://idv.ubble.ai/4hryu5cei5",
      events: {
        onComplete(event) {
          ubbleIDV.destroy();
        },
        onAbort(event) {
          ubbleIDV.destroy();
        },
        onExpired(event) {
          ubbleIDV.destroy();
        }
        onRefused(event) {
          ubbleIDV.destroy();
        }
      },
    });
    ```

    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; color: #f8c92e; vertical-align: center;">âš </div>
      <div style="display: table-cell; vertical-align: center;">
        <p>
        If you encounter issues, ensure that you've:
          <ul>
            <li>included a semicolon in the <code>Content-Security-Policy: frame-src https://*.domain_name.fr;</code> header</li>
            <li>allowed the use of the camera</li>
          </ul>
        </p>
      </div>
    </div>

    #### Handle user redirection in iframe

    When the user completes or terminates their verification, use the `destroy()` method for handling user redirection.

    # Handle verification results
    
    ## Lifecycle
    
    ![](https://raw.githubusercontent.com/ubbleai/docs/main/life_cycle_diagram.png)

    When you request an identity verification, you'll be notified about events throughout the verification's lifecycle via webhooks.
    
    ## Verification statuses

    The webhooks also return the current `status` of the identity verification. The follow-up action you should take depends on the `status` value returned:

    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 25%" scope="col">Status</th>
          <th style="width: 35%" scope="col">Description</th>
          <th style="width: 40%" scope="col">Recommended action</th>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>created</code></p>
          </td>
          <td style="width: 35%">
            <p>The identity verification has been created</p>
          </td>
          <td style="width: 40%">
            <p>
              Create an attempt or wait for the attempt to be created if you use the `Create and start an identity verification` endpoint. 
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>pending</code></p>
          </td>
          <td style="width: 35%">
            <p>The identity verification session is available</p>
          </td>
          <td style="width: 40%">
            <p>
              Redirect user to the web application using the
              <code>verificationUrl</code>.
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>capture_in_progress</code></p>
          </td>
          <td style="width: 35%">
            <p>The user is performing the capture</p>
          </td>
          <td style="width: 40%">
            <p>Wait for a change in <code>status</code>.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>checks_in_progress</code></p>
          </td>
          <td style="width: 35%">
            <p>We're performing checks for the user's identity verification</p>
          </td>
          <td style="width: 40%">
            <p>Wait for a change in <code>status</code>.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>approved</code></p>
          </td>
          <td style="width: 35%">
            <p>The user's identity was verified successfully</p>
          </td>
          <td style="width: 40%">
            <p>Accept the user's request.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>declined</code></p>
          </td>
          <td style="width: 35%">
            <p>The user's identity was not verified due to an irregularity</p>
          </td>
          <td style="width: 40%">
            <p>
              Refuse the user's request. If necessary, create a new identity
              verification.
            </p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>retry_required</code></p>
          </td>
          <td style="width: 35%">
            <p>
              We could not perform all of the required checks for the user's
              identity verification
            </p>
          </td>
          <td style="width: 40%">
            <p>Request a retry.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>inconclusive</code></p>
          </td>
          <td style="width: 35%">
            <p>
              The identity verification checks were not completed and a retry is no
              longer available
            </p>
          </td>
          <td style="width: 40%">
            <p>None</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>refused</code></p>
          </td>
          <td style="width: 35%">
            <p>The user refused to perform the identity verification</p>
          </td>
          <td style="width: 40%">
            <p>
              Propose an alternative method of identity verification to the user.
            </p>
          </td>
        </tr>
      </tbody>
    </table>

    ## Attempt statuses
    
    <table style="width: 100%">
      <tbody>
        <tr>
          <th style="width: 25%" scope="col">Status</th>
          <th style="width: 35%" scope="col">Description</th>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>`pending_redirection`</code></p>
          </td>
          <td style="width: 35%">
            <p>The attempt has been created and applicant can be redirected.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>`capture_in_progress`</code></p>
          </td>
          <td style="width: 35%">
            <p>The attempt has been started by the applicant.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>`checks_in_progress`</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant completed the capture, we are performing checks. </p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>`completed`</code></p>
          </td>
          <td style="width: 35%">
            <p>We completed the checks. Identity verification is closed.  </p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>`expired`</code></p>
          </td>
          <td style="width: 35%">
            <p>The link expired without applicant being redirected to the web application, please note the default expiration time is 15 minutes.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>`capture_aborted`</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant terminated the capture without completing it.</p>
          </td>
        </tr>
        <tr>
          <td style="width: 25%">
            <p><code>`checks_inconclusive`</code></p>
          </td>
          <td style="width: 35%">
            <p>The applicant terminated the capture but did not provide the assets required to perform the checks.</p>
          </td>
        </tr>
      </tbody>
    </table>
    
    ## Response codes
    
    If the status of the attempt is `completed`, `expired`, `capture_aborted` and `checks_inconclusive`, 
    you will also get additional information with the `response_codes` attribute. Response codes associated with 
    the last attempt are also available in the `identity_verification` endpoints and in the webhook body. 
    It will include both a numeric code and a string, as detailed in the example below:

    ```json
    "response-codes": [
      {"code": 61310, "summary": "document_front_not_captured"},
      {"code": 62102, "summary": "document_not_accepted"},
    ]
    ```

    You will find below the exhaustive list of these codes.

    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center; border-radius: 0.5rem;">
      <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; color: #f8c92e; vertical-align: center;">âš </div>
      <div style="display: table-cell; vertical-align: center;">
        <p>
          Please note that we consider adding new response codes as backward compatible.
        </p>
      </div>
    </div>

    You should then build you business rules based on the status and use response codes as additional information, rather than use response codes as required information.

    ### List of response codes

    <style type="text/css">
    .tg  {border-collapse:collapse;border-color:#ccc;border-spacing:0}
    .tg td{background-color:#fff;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
      font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;word-break:normal;}
    .tg th{background-color:#f0f0f0;border-color:#ccc;border-style:solid;border-width:1px;color:#333;
      font-family:Arial, sans-serif;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
    .tg .tg-dvid{background-color:#efefef;border-color:inherit;font-weight:bold;text-align:left;vertical-align:top}
    .tg .tg-fymr{background-color:#f0f0f0;border-color:inherit;font-weight:bold;text-align:left;vertical-align:center;}
    .tg .tg-center{border-color:inherit;text-align:center;vertical-align:center}
    .tg .tg-y698{background-color:#c4c4c4;border-color:inherit;text-align:left;vertical-align:center}
    .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:center}
    .one {width: 10%}
    .two {width: 30%}
    .three {width: 30%}
    .four {width: 15%}
    .five {width: 15%}
    </style>

    ### Status: `approved`
    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
      <col class="four" />
      <col class="five" />
      <col class="six" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr><code>code</code></nobr></th>
        <th class="tg-fymr"><code>summary</code></th>
        <th class="tg-fymr">Description</th>
        <th class="tg-fymr">Checkout Identity Verification</th>
        <th class="tg-fymr">Video Certified</th>
        <th class="tg-fymr">Face authentication</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-0pky">10000</td>
        <td class="tg-0pky">approved</td>
        <td class="tg-0pky">Approved</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
    </tbody>
    </table>

    ### Status: `retry_required`
    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
      <col class="four" />
      <col class="five" />
      <col class="six" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr><code>code</code></nobr></th>
        <th class="tg-fymr"><code>summary</code></th>
        <th class="tg-fymr">Description</th>
        <th class="tg-fymr">Checkout Identity Verification</th>
        <th class="tg-fymr">Video Certified</th>
        <th class="tg-fymr">Face authentication</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-dvid" colspan="6">Applicant engagement issue</td>
      </tr>
      <tr>
        <td class="tg-0pky">61101</td>
        <td class="tg-0pky">applicant_never_started</td>
        <td class="tg-0pky">Applicant was probably not redirected to the application and never started the flow</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61111</td>
        <td class="tg-0pky">applicant_not_ready</td>
        <td class="tg-0pky">Applicant explicitly stated that they wanted to perform the identity verification later by clicking on the dedicated button</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>       
        <td class="tg-center">&#9989;</td>       
      </tr>
      <tr>
        <td class="tg-0pky">61112</td>
        <td class="tg-0pky">applicant_no_document</td>
        <td class="tg-0pky">Applicant explicitly stated that they did not have their document with them by clicking on the dedicated button</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61113</td>
        <td class="tg-0pky">camera_access_refused</td>
        <td class="tg-0pky">Applicant did not give access to the camera despite the dedicated instructions</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61121</td>
        <td class="tg-0pky">applicant_drop</td>
        <td class="tg-0pky">Applicant left the process before the capture phase and the verification URL expired (by default the expiration time is 15 minutes)</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-fymr" colspan="6"><span style="font-weight:bold">Technical issue</span></td>
      </tr>
      <tr>
        <td class="tg-0pky">61201</td>
        <td class="tg-0pky">connexion_insufficient</td>
        <td class="tg-0pky">Applicant did not have a sufficient connexion to perform the capture</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61202</td>
        <td class="tg-0pky">browser_not_supported</td>
        <td class="tg-0pky">Applicantâ€™s browser was not suitable for video streaming</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61203</td>
        <td class="tg-0pky">camera_not_found</td>
        <td class="tg-0pky">Applicantâ€™s device did not have any camera</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61205</td>
        <td class="tg-0pky">sms_not_received</td>
        <td class="tg-0pky">Applicant did not receive the SMS</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-fymr" colspan="6"><span style="font-weight:bold">Document capture issue</span></td>
      </tr>
      <tr>
        <td class="tg-0pky">61301</td>
        <td class="tg-0pky">document_video_blurry</td>
        <td class="tg-0pky">Applicantâ€™s document video is too blurry<br>(mostly due to too much movement but if this error persists the camera quality might be at fault)</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61302</td>
        <td class="tg-0pky">document_video_lighting_issue</td>
        <td class="tg-0pky">Applicant performed the document capture under poor lighting conditions</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61310</td>
        <td class="tg-0pky">document_front_not_captured</td>
        <td class="tg-0pky">Applicant has not captured the front of the document</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61311</td>
        <td class="tg-0pky">document_back_not_captured</td>
        <td class="tg-0pky">Applicant has not captured the back of the document</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61312</td>
        <td class="tg-0pky">document_partially_hidden</td>
        <td class="tg-0pky">Applicant hides part of the document</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61313</td>
        <td class="tg-0pky">document_not_tilted</td>
        <td class="tg-0pky">Applicant did not present a dynamic view of the document</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61314</td>
        <td class="tg-0pky">document_challenge_timeout</td>
        <td class="tg-0pky">Applicant failed to meet the document challenge and the verification expired</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61315</td>
        <td class="tg-0pky">document_barcode_unreadable</td>
        <td class="tg-0pky">The barcode of the document is unreadable</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-fymr" colspan="6"><span style="font-weight:bold">Face capture issue</span></td>
      </tr>
      <tr>
        <td class="tg-0pky">61401</td>
        <td class="tg-0pky">face_video_blurry</td>
        <td class="tg-0pky">Applicantâ€™s video of their face is too blurry <br>(mostly due to too much movement but if this error persists the camera quality might be at fault)</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61402</td>
        <td class="tg-0pky">face_video_lighting_issue</td>
        <td class="tg-0pky">Applicant performed their identity verification under poor lighting conditions</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61410</td>
        <td class="tg-0pky">face_not_captured</td>
        <td class="tg-0pky">Applicant has not presented a face</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61411</td>
        <td class="tg-0pky">face_partially_hidden</td>
        <td class="tg-0pky">Applicant did not show the full front view of their face</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61412</td>
        <td class="tg-0pky">face_not_turned</td>
        <td class="tg-0pky">Applicant did not move to prove the liveness</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61413</td>
        <td class="tg-0pky">face_challenge_timeout</td>
        <td class="tg-0pky">Applicant failed to meet the face challenge and the verification expired</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61414</td>
        <td class="tg-0pky">various_faces_detected</td>
        <td class="tg-0pky">Applicant also captured another person face</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-fymr" colspan="6"><span style="font-weight:bold">Other issues</span></td>
      </tr>
      <tr>
        <td class="tg-0pky">61901</td>
        <td class="tg-0pky">internal_error</td>
        <td class="tg-0pky">An internal error prevents us from completing the verification, we do our best to reduce the occurrence of this case</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">61911</td>
        <td class="tg-0pky">corrupted_videos</td>
        <td class="tg-0pky">The received videos cannot be played</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">64001</td>
        <td class="tg-0pky">forcibly_closed</td>
        <td class="tg-0pky">You have created a new attempt or the verification has been anonymised while the URL was still valid</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
    </tbody>
    </table>

    ### Status: `declined`
    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
      <col class="four" />
      <col class="five" />
      <col class="six" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr><code>code</code></nobr></th>
        <th class="tg-fymr"><code>summary</code></th>
        <th class="tg-fymr">Description</th>
        <th class="tg-fymr">Checkout Identity Verification</th>
        <th class="tg-fymr">Video Certified</th>
        <th class="tg-fymr">Face Authentication</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-dvid" colspan="6">Document issue</td>
      </tr>
      <tr>
        <td class="tg-0pky">62101</td>
        <td class="tg-0pky">document_expired</td>
        <td class="tg-0pky">Applicant presented an expired document</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62102</td>
        <td class="tg-0pky">document_not_accepted</td>
        <td class="tg-0pky">Applicant presented a document which is not accepted</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62103</td>
        <td class="tg-0pky">document_damaged</td>
        <td class="tg-0pky">Applicant has submitted a damaged document</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-dvid" colspan="6">Copy issue</td>
      </tr>
      <tr>
        <td class="tg-0pky">62201</td>
        <td class="tg-0pky">document_photocopy</td>
        <td class="tg-0pky">Applicant presented a photocopy of the document</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62202</td>
        <td class="tg-0pky">document_screenshot</td>
        <td class="tg-0pky">Applicant presented the document on a screen</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-dvid" colspan="6">Identity fraud</td>
      </tr>

      <tr>
        <td class="tg-0pky">62301</td>
        <td class="tg-0pky">document_counterfeit</td>
        <td class="tg-0pky">Applicant has submitted a counterfeit or falsification</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62302</td>
        <td class="tg-0pky">document_stolen</td>
        <td class="tg-0pky">Applicant presented a document declared as stolen or lost</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62303</td>
        <td class="tg-0pky">document_swap</td>
        <td class="tg-0pky">Applicant presented the front and back of two different documents</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62304</td>
        <td class="tg-0pky">face_mismatch</td>
        <td class="tg-0pky">Applicant does not match the photograph of the document</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62305</td>
        <td class="tg-0pky">face_not_live</td>
        <td class="tg-0pky">Applicant has presented a photography or a video of someone else's face on a screen or on a physical medium</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62306</td>
        <td class="tg-0pky">face_alteration</td>
        <td class="tg-0pky">Applicant has altered their appearance</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62307</td>
        <td class="tg-0pky">videos_digital_alteration</td>
        <td class="tg-0pky">Applicant has digitally altered the videos</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
        <tr>
        <td class="tg-0pky">62321</td>
        <td class="tg-0pky">face_face_mismatch</td>
        <td class="tg-0pky">Applicant of the face authentication is not the one who performed the identity verification</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62399</td>
        <td class="tg-0pky">generic_fraud</td>
        <td class="tg-0pky">Generic code when a fraud has been detected within a certified identity verification</td>
        <td class="tg-center">&#10060;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
      <tr>
        <td class="tg-dvid" colspan="6">Suspicious behavior</td>
      </tr>
      <tr>
        <td class="tg-0pky">62401</td>
        <td class="tg-0pky">declared_identity_mismatch</td>
        <td class="tg-0pky">Applicantâ€™s identity does not match with the expected one</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#10060;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62402</td>
        <td class="tg-0pky">suspicious_device</td>
        <td class="tg-0pky">Applicant used a device that has been technically altered</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
      <tr>
        <td class="tg-0pky">62403</td>
        <td class="tg-0pky">consent_unclear</td>
        <td class="tg-0pky">Applicant seems to have performed the capture against their will</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
    </tbody>
    </table>

    ### Status: `refused`
    <table class="tg">
    <colgroup>
      <col class="one" />
      <col class="two" />
      <col class="three" />
      <col class="four" />
      <col class="five" />
      <col class="six" />
    </colgroup>
    <thead>
      <tr>
        <th class="tg-fymr"><nobr><code>code</code></nobr></th>
        <th class="tg-fymr"><code>summary</code></th>
        <th class="tg-fymr">Description</th>
        <th class="tg-fymr">Checkout Identity Verification</th>
        <th class="tg-fymr">Video Certified</th>
        <th class="tg-fymr">Face Authentication</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="tg-0pky">63001</td>
        <td class="tg-0pky">applicant_refusal</td>
        <td class="tg-0pky">Applicant explicitly refused to do the verification process by clicking on the dedicated button</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
        <td class="tg-center">&#9989;</td>
      </tr>
    </tbody>
    </table>

    ## Retrieve detailed verification results 

    To retrieve detailed results about an identity verification, call the following endpoint with
    the unique id returned in the [Create identity verification request](#tag/Identity-verifications/operation/create_identity_verification) response:

    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}</span>
    </div>

    ### Response example

    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr7we",
      "created_on": "2023-10-06T17:32:28Z",
      "modified_on": "2023-10-06T17:40:32Z",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr7we",
      "status": "declined",
      "response_codes": [
        {
          "code": 61310,
          "summary": "document_front_not_captured"
        },
        {
          "code": 62102,
          "summary": "document_not_accepted"
        }
      ],
      "verified_identity": {
        "full_name": "David Vincent",
        "birth_date": "1990-12-20"
      },
      "declared_data": {
        "name": "David Vincent",
        "birth_date": "1990-12-20"
      },
      "documents": [{}],
      "face": {
        "image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231006T174223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4"
      },
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "webhook_url": "https://my.api/events/",
      "redirect_url": "https://myweb.site?query-param=hello",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
        },
        "verification_url": {
          "href": "https://idv.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```

    ### Response attributes

    |Attribute|Description|
    |:----|:----|
    |`status`|Indicates the position in the lifecycle and the action to be taken.|
    |`response_codes`|Indicates the cause when the status is `refused`, `declined`, or `retry_required`.|
    |`verified_identity`|Includes all information about the identity of the user when the verification is approved.|
    |`documents`|Includes all information that has been extracted from the document, as well as the best images of the document.|
    |`face`|Includes the best image of the face.|

    To configure the information extracted from the document, reach out to your Account Manager or support.idv@checkout.com.

    For more details, see [retrieve identity-verification documentation](#tag/Identity-verifications/operation/retrieve_identity_verification).

    ## Retry management

    When the identity verification status is `retry_required`, you should create a new attempt when the applicant is ready to perform the verification again.
    To do this you need:
    - The identity_verification_id
    - A redirect URL
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>

    Request example

    ```json
    {
      "phone_number": {
          "country_code": "+1",
          "number": "5555550102"
      },
      "redirect_url": "https://example.com?query-param=hello"
    }
    ```

    Response example
    ```json
    {
        "id": "iatp_01j57xsx3yx5bhfapmywhgksz1",
        "created_on": "2023-08-14T07:49:26.274866Z",
        "modified_on": "2023-08-14T07:49:26.274876Z",
        "redirect_url": "https://example.com?query-param=hello",
        "status": "pending_redirection",
        "response_codes": [],
        "_links": {
            "self": {
                "href": "https://api.ubble.ai/v2/identity-verifications/idv_01j57xs04113rctmbefsc34g97/attempts/iatp_01j57xsx3yx5bhfapmywhgks00"
            },
            "verification_url": {
                "href": "https://id.ubble.ai/e53c4547-88ce-484f-ad0e-f325e5f0ce00"
            }
        }
    }
    ```

    For more details, see [retrieve identity-verification documentation](#tag/Identity-verifications/operation/retry_identity_verification).

    We recommend that you use the response codes to guide the user. For example, if the [response codes](#section/Handle-verification-results/Response-codes)
    indicate that the connection of the user is not sufficient, you should give this information to the user.

    ## Retrieve a PDF report

    When you receive an `identity_verification_checks_completed` webhook, we'll simultaneously generate a PDF report with detailed results of the identity verification.

    When the PDF report is ready for you to [retrieve via the API](#tag/Identity-verifications/operation/pdf_identity_verification),
    you'll receive an `identity_verification_report_created` webhook.

    Please note that the generated reports are signed. In order to check the signature, you should use our [public certificate](s3://cdn.ubble.ai/cko_idv_api_signature_public_certificate.crt). We follow the PDF signature standard, where all information necessary is embedded 
    in the metadata, which is recognized by most PDF readers.
    You can find an example on how to validate the signature [here](https://github.com/ubbleai/code-samples).

    ## Data management

    You can configure data retention together with your account manager, in accordance with your purpose for using the data. At the end of this time, the identity verifications are anonymized, which means all personal or sensitive data are deleted. The default storage time is 90 days.
    
    If needed, you can also request the anonymization of an identity verification through the [anonymization endpoint](#tag/Identity-verifications/operation/anonymize_identity_verification). 

    # AML Verification (BETA)
    
    In partnership with ComplyAdvantage, we propose an Identity verification and AML screening bundle. After having verified the applicant's identity you will be able to:  
    
    Search them in the Politically Exposed Person (PEP) lists, Sanction lists and Adverse media database,
    
    Get a risk score based on a customized model,
    
    Manually investigate cases,
    
    Monitor an applicant and get notified if an alert is raised.
    
    Please note that this offer is only available if you subscribed to both services, reach out your account manager if you have any questions.
    
    ## Create an AML verification
    
    To use it, you will first need an `applicant_id` and an approved identity verification. 

    You can then request an AML verification and include the following fields:
    
    - `applicant_id` - the unique identifier of the applicant.
    
    - `webhook_url` - the URL where you want to be notified when the status of the AML verification change.
    
    - `screening_configuration_identifier` - the identifier of the configuration you want to use to screen the applicant. It can be defined and retrieved via the ComplyAdvantage dashboard.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/aml-verifications</span>
    </div>
    
    Request example

    ```json
    {
        "webhook_url": "{{WEBHOOK_URL}}",
        "applicant_id": "aplt_01hr4p9j0etqw34wyv2h4ac27k",
        "search_parameters": {
            "configuration_identifier": "e3b6c5b6-fcc2-43e3-9e8c-7e378e320a2p"
        },
    }
    ```
    
    Response example
    
    ```json
    {
        "id": "amlv_01hr7269mkxva7msc443jz4jbf",
        "applicant_id": "aplt_01hr7269ksxqjgqxbh4vaqmry8",
        "created_on": "2024-03-05T10:22:48.481031Z",
        "modified_on": "2024-03-05T10:22:49.327277Z",
        "status": "review_required",
        "webhook_url": "https://my.api/events/",
        "monitored": false,
        "search_parameters": {
            "configuration_identifier": "e3b6c5b6-fcc2-43e3-9e8c-7e378e320a2p"
        },
        "_links": {
            "self": {
                "href": "https://api.ubble.ai/api/v2/aml-verifications/amlv_01hr7269mkxva7msc443jz4jbf"
            }
        }
    }
    ```

    Make a note of the AML verification `id` value in the response. You'll need this to retrieve the detailed results later.
    
    ## Set up an initial risk scoring 
    
    You can get an initial risk scoring based on a model that you can customize in the ComplyAdvantage dashboard. 
    
    The applicant will then be scored before the AML verification has been performed. The result of this scoring will be available as a `risk_level` in the results and can be one of `LOW`, `MEDIUM`, `HIGH` or `PROHIBITED`.
    
    If the risk level is `PROHIBITED`, the AML verification is not performed and the `status` is declined. If the risk level is `LOW`, `MEDIUM` or `HIGH`, the AML verification will be performed and the results will depend on raised alerts. See below for more details.
    
    ## Verify webhook notification
    
    You'll be notified of events that occur during the AML verification process via webhooks. Among other information, the webhooks will contain:
    
    - the event `type` - for example, `aml_verification_created`,
    
    - the AML verification `status` - for example, `created` or `review_required`.
    
    Example
    
    ```json
    {
      "specversion": "2.0",
      "type": "aml_verification_created",
      "subject": "amlv_01hr7269mkxva7msc443jz4jbf",
      "id": "evnt_01hr7269ry3g8skc630q4ec75g",
      "time": "2024-03-05T10:22:48Z",
      "datacontenttype": "application/json",
      "data": {
        "aml_verification_id": "amlv_01hr7269mkxva7msc443jz4jbf",
        "status": "created",
        "applicant_id": "aplt_01hr7269ksxqjgqxbh4vaqmry8"
      }
    }
    ```
    
    When the AML verification is completed, you will receive a webhook notification with the event `type` field set to `aml_verification_completed`, and the body will include the `status` of the AML verification. See the section below.
    
    ## Handle AML verification results
    
    The webhooks also return the current `status` of the AML verification. The follow-up action you should take depends on the `status` value returned:
    
    | <div style="width:12em">Status</div>     | Description                                                                                              | Recommended action                    |
    |------------------------------------------|----------------------------------------------------------------------------------------------------------|---------------------------------------|
    | `created`                                | The AML verification has been created.                                                                   | Wait for a change in `status`.        |
    | `screening_in_progress`                  | The risk scoring or AML verification is in progress.                                                     | Wait for a change in `status`.        |
    | `approved`                               | The initial risk scoring is not `PROHIBITED` and there are no alerts.                                     | Accept the applicantâ€™s request.       |
    | `declined`                               | The initial risk scoring is `PROHIBITED`.                                                                | Refuse the applicantâ€™s request.       |
    | `review_required`                        | The initial risk scoring is not `PROHIBITED` but there are screening alerts and a case has been created. | Manually investigate the case.        |
    
    You can also get this status by calling the following endpoint with the unique `id` returned in the create AML verification response:
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/aml-verifications/{aml_verification_id}</span>
    </div>
    
    Response example
    
    ```json
    {
        "id": "amlv_01hr7269mkxva7msc443jz4jbf",
        "applicant_id": "aplt_01hr7269ksxqjgqxbh4vaqmry8",
        "created_on": "2024-03-05T10:22:48.481031Z",
        "modified_on": "2024-03-05T10:22:49.327277Z",
        "status": "review_required",
        "webhook_url": "https://my.api/events/",
        "monitored": false,
        "search_parameters": {
            "configuration_identifier": "e3b6c5b6-fcc2-43e3-9e8c-7e378e320a2p"
        },
        "_links": {
            "self": {
                "href": "https://myweb.site/?query-param=hello"
            }
        }
    }
    ```
    
    ## Manually investigate the results
    
    If the `status` is `review_required` you might want to investigate the case and determine if the applicant can access your service or not. You can do it via the ComplyAdvantage case management tool. 
    
    You will be able to review the alerts and to determine if you accept the risk associated to the case or not.
    
    If you accept it, the status will switch to `approved`.
    
    If you refuse it, the status will switch to `declined`.
    
    You will be notified if you change the `status` of an AML verification. The `event_type` field will be set to `aml_onboarding_review_completed` and the body will include the new `status`.
    
    Example
    
    ```json
    {
      "specversion": "2.0",
      "type": "aml_onboarding_review_completed",
      "subject": "amlv_01hr7269mkxva7msc443jz4jbf",
      "id": "evnt_01hr7269ry3g8skc630q4ec75g",
      "time": "2024-03-05T10:22:48Z",
      "datacontenttype": "application/json",
      "data": {
        "status": approved,
      }
    }
    ```

    ## Monitor a search
    
    If an applicant is monitored, you be notified if an alert is raised. 
    
    The `status` of the AML verification will switch to `review_required`.
    
    In this case, you will get a notification with the `event_type` field set to `aml_monitoring_alert` and the body will include the new `status`.
    
    You can then use the ComplyAdvantage case management tool to manually investigate the results. 
    
    When the review is completed, you will get a notification with the `event_type` field set to `aml_monitoring_review_completed` and the body will include the new `status, depending of you decision to accept or not the risk related to the monitoring case.
    
    # Face Authentication (Coming soon)
    
    You may want to verify that a person is the same person who performed the identity verification. 

    To make this additional verification easy, we propose a face authentication product: users will have to present their face and we will compare it with the one we captured during the verification process.
    
    ## Create a face authentication
    
    To request an identity verification, you must include the following fields
    
    - `applicant_id` - the unique identifier of the applicant.
    
    - `webhook_url` - the URL to get notifications.
    
    - `user_journey_id` - dedicated configuration to customize the authentication
    
    <div style="padding: 0px 0px 14px 14px ; background-color: #fff6d9; border-color: #f8c92e; color: #666; display: flex; align-items: center; border-radius: 0.5rem;">
    <div style="margin-right: 20px; margin-top: 14px; font-size: 30px; color: #f8c92e; vertical-align: center;">âš </div>
    <div style="display: table-cell; vertical-align: center;">
      <p>Please note that for the request to be accepted the applicant should be associated with a verified face video and this one should not have been anonymised. A verified face video can be obtained through an approved identity verification or a previous face authentication. Contact your account manager to adapt your data retention time. </p>
    </div>
    </div>
    
    ## Create an attempt
    
    Once you get the `face_authentication_id` you can use it to create an attempt and get a `verification_url`. 

    To request an identity verification, you must include the following fields:
    
    - `face_authentication_id` - the identifier of the face authentication
    
    - `redirect_url` - the URL to redirect the user to once face authentication is completed
    
    ## Verify webhook notification
    
    You will be notified of events that occur during the face authentication process via webhooks. Among other information, webhooks will contain:    
    - the event `type` - for example, `face_authentication_started`,
    
    - the face authentication `status` - for example, `capture_in_progress` or `approved`.
    
    - the face authentication `response_codes`.
    
    Example
    
    ```json
    {
      "specversion": "2.0",
      "type": "face_authentication_created",
      "subject": "fav_01hr7269mkxva7msc443jz4jbf",
      "id": "evnt_01hr7269ry3g8skc630q4ec75g",
      "time": "2024-03-05T10:22:48Z",
      "datacontenttype": "application/json",
      "data": {
        "face_authentication_id": "fav_01hr7269mkxva7msc443jz4jbf",
        "status": "created",
        "applicant_id": "aplt_01hr7269ksxqjgqxbh4vaqmry8"
      }
    }
    ```
    
    ## Retrieve detailed authentication results
    
    To retrieve detailed results about a face authentication, call the following endpoint with the 
    
    unique id returned in the POST Request a face authentication response:
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/face-authentications/{face_authentication_id}</span>
    </div>
    
    Example:
    ```json
      {
        "id": "fav_tkoi5db4hryu5cei5vwoabr7we",
        "created_on": "2023-10-06T17:32:28Z",
        "modified_on": "2023-10-06T17:40:32Z",
        "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr7we",
        "status": "declined",
        "response_codes": [
              {"code": 62304, "summary": "face_mismatch"}
          ],
        "face": {
          "image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231006T174223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4"
        },
        "phone_number": {
          "country_code": "+1",
          "number": "2068133616"
        },
        "webhook_url": "https://my.api/events/",
        "redirect_url": "https://myweb.site?query-param=hello",
        "_links": {
          "self": {
            "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          }
        }
      }
    ```
    
    ## Create a new attempt
    When the face authentication status is `retry_required`, you should create a new attempt. See the dedicated section. 
    
    We recommend that you use the response codes to guide the user. 
    
    For example, if the response codes indicate that the connection of the user is not sufficient, you should give this information to the user.
    
    # Webhooks

    ## Configuration

    When [creating an identity verification](#tag/Identity-verifications/operation/create_identity_verification), you need to provide the webhook url you want to be notified on.

    You will be notified of each event on identity verifications. For more details see the event section.

    To help you integrate your webhook you can trigger it with the standard answers, see [notify endpoint](#tag/Identity-verifications/operation/notify_identity_verification).

    ## Body

    The webhook body contains the following information: 

    | Attribute                | Description                                                                             |
    |--------------------------|-----------------------------------------------------------------------------------------|
    | applicant_id             | ID of the applicant, useful to recognize them                                           |
    | external_applicant_id    | Your applicant ID, only if you updated it in the applicant object                       |
    | user_journey_id          | ID of the user journey                                                                  |
    | identity_verification_id | ID of the identity verification                                                         |
    | status                   | status of the identity verification                                                     |
    | response_codes           | list of response codes                                                                  |

    ### Example
    ```json
      {
          "specversion": "2.0",
          "type": "identity_verification_capture_completed",
          "subject": "idv_5hxpdwegjcbujpth3wdo55d3vm",
          "id": "evnt_5hxpdwegjcbujpth3wdo55d3vm",
          "time": "2023-03-22T17:31:00Z",
          "datacontenttype": "application/json",
          "data": {
              "applicant_id": "aplt_5hxpdwegjcbujpth3wdo55d3vm",
              "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
              "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
              "status": "declined",
              "response_codes": [
                  {"code": 62301, "summary": "document_counterfeit"},
                  {"code": 62304, "summary": "face_mismatch"}
    
              ]
          }
      }
    ```

    ## Events

    | <div style="width:12em">Events</div>                      | Description                                                                                                                       |
    |-----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
    | `identity_verification_created`                           | You created an identity verification                                                                                              |
    | `identity_verification_opened`                            | You created a first attempt and the verification URL is available                                                                 |
    | `identity_verification_started`                           | The applicant has been redirected to the web application                                                                          |
    | `identity_verification_reset`                             | You created a new attempt while the status was `pending` or `capture_in_progress`                                                 |
    | `identity_verification_capture_completed`                 | The applicant completed the capture                                                                                               |
    | `identity_verification_checks_completed`                  | We completed the checks                                                                                                           |
    | `identity_verification_link_expired`                      | The link expired without applicant being redirected to the web application, please note the default expiration time is 15 minutes |
    | `identity_verification_capture_refused`                   | The applicant explicitly refused to perform the verification                                                                      |
    | `identity_verification_capture_aborted`                   | The applicant terminated the capture without completing it                                                                        |
    | `identity_verification_checks_inconclusive`               | The applicant did not provide the assets required to perform the checks                                                           |
    | `identity_verification_retry_requested`                   | You requested a retry for this identity verification                                                                              |
    | `identity_verification_closed`                            | The verification has been forcibly closed                                                                                         |
    | `identity_verification_anonymized`                        | The verification has been anonymized                                                                                              |
    | `identity_verification_audit_completed`                   | The verification has been audited and the status may have been updated                                                            |
    | `identity_verification_report_created`                    | The pdf report is available                                                                                                       |
    | `aml_verification_created`                                | A verification has been created                                                                                                   |
    | `aml_verification_onboarding_started`                     | Screening has begun                                                                                                               |
    | `aml_verification_onboarding_completed`                   | Screening has been completed                                                                                                      |
    | `aml_verification_onboarding_reviewed`                    | Manual review has been completed, customer `status` was updated                                                                   |
    | `aml_verification_monitoring_alert`                       | A monitoring alert has been detected                                                                                              |
    | `aml_verification_monitoring_reviewed`                    | Manual review has been completed, customer status was updated                                                                     |
    | `aml_verification_status_changed`                         | Manual review has been reopened, customer status was updated                                                                      |
    | `face_authentication_created`                             | You created an face authentication                                                                                                |
    | `face_authentication_opened`                              | You created a first attempt and the verification URL is available                                                                 |
    | `face_authentication_started`                             | The applicant has been redirected to the web application                                                                          |
    | `face_authentication_reset`                               | You created a new attempt while the status was `pending` or `capture_in_progress`                                                 |
    | `face_authentication_capture_completed`                   | The applicant completed the capture                                                                                               |
    | `face_authentication_checks_completed`                    | We completed the checks                                                                                                           |
    | `face_authentication_link_expired`                        | The link expired without applicant being redirected to the web application, please note the default expiration time is 15 minutes |
    | `face_authentication_capture_refused`                     | The applicant explicitly refused to perform the face authentication                                                               |
    | `face_authentication_capture_aborted`                     | The applicant terminated the capture without completing it                                                                        |
    | `face_authentication_checks_inconclusive`                 | The applicant did not provide the assets required to perform the checks                                                           |
    | `face_authentication_retry_requested`                     | You requested a retry for this face authentication                                                                                |
    | `face_authentication_closed`                              | The face authentication has been forcibly closed                                                                                  |
    | `face_authentication_anonymized`                          | The face authentication has been anonymized                                                                                       |
    | `face_authentication_audit_completed`                     | The face authentication has been audited and the status may have been updated                                                     |
    
    
    ## Retry

    We expect that you will return us a 200 or 201 status code within 10 seconds before we retry, up to 2 retries will be performed. If needed, you can trigger webhook notifications manually using the [notify endpoint](#tag/Identity-verifications/operation/notify_identity_verification).

    ## Signature
    For security reasons all our webhook calls are signed, please refer to [signature](#section/Signature) for more details.

    ## Security

    ### Webhook IP whitelisting

    For security purposes, if you need to whitelist our incoming api calls, see our [public ip addresses](https://docs.outscale.com/en/userguide/OUTSCALE-Public-IPs.html).

    # Testing
    
    Use the following examples to test different Identity Verification scenarios.
    
    ## Successful verification
    
    ### Step 1: Configure webhooks
    
    Have your webhook server ready to test real-time notifications for each event in this scenario.
    - identity_verification_created
    - identity_verification_opened
    - identity_verification_started
    - identity_verification_capture_completed
    - identity_verification_checks_completed
    
    ### Step 2: Create an applicant
    
    Set the `external_applicant_id` value to `eaplt_10000000000000000000000000`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/applicants</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "external_applicant_id": "eaplt_10000000000000000000000000",
      "email": "toby.arden@example.com"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "aplt_tkoi5db4hryu5cei5vwoabr7we",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "external_applicant_id": "eaplt_10000000000000000000000000",
      "email": "toby.arden@example.com",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"
        }
      }
    }
    ```
    
    ### Step 3: Create an identity verification
    
    Set the `id` you received in the step 1 response as the `applicant_id` value. For example, in this case the response returned `aplt_tkoi5db4hryu5cei5vwoabr7we` as the `id`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr7we",
      "declared_data": {
        "name": "Toby Arden",
        "birth_date": "1984-10-02"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr7we",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr7we",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr7we",
      "status": "pending",
      "response_codes": [],
      "declared_data": {
        "name": "Toby Arden",
        "birth_date": "1984-10-02"
      },
      "documents": [],
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ### Step 4: Create an attempt
    
    Pass the `id` value from step 2 response as the `identity_verification_id` path parameter.
    
    For example, in this case the `id` value returned is `idv_tkoi5db4hryu5cei5vwoabr7we`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    
    ```json
    {
        "phone_number": {
          "country_code": "+1",
          "number": "5555700102"
        },
        "redirect_url": "https://example.com?query-param=hello"
    }
    ```
    
    #### Response example
    
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "5555700102"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "capture_in_progress",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    At this stage, the webhooks are triggered. The `identity_verification_checks_completed` webhook will return the response code `10000`
    
    ### (Optional) Step 5: Retrieve an identity verification
    
    Pass the `id` value from step 2 response to the `identity_verification_id` path parameter.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}</span>
    </div>
    
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr7we",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr7we",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr7we",
      "status": "approved",
      "response_codes": [
        {
          "code": 10000,
          "summary": "approved"
        }
      ],
      "verified_identity": {
        "full_name": "Toby Arden",
        "birth_date": "1984-10-02"
      },
      "declared_data": {
        "name": "Toby Arden",
        "birth_date": "1984-10-02"
      },
      "documents": [
        {
          "full_name": "Toby Arden",
          "birth_date": "1984-10-02",
          "document_type": "ID",
          "document_issuing_country": "US",
          "front_image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555"
        }
      ],
      "face": {
        "image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4"
      },
      "phone_number": {
        "country_code": "+1",
        "number": "5555550102"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ## Successful verification on retry after capture aborted
    
    ### Step 1: Configure webhooks
    
    Set up webhooks to test real-time notifications for each event in this scenario. 
    
    Webhooks for first attempt:
    
      - identity_verification_created
      - identity_verification_opened
      - identity_verification_started
      - identity_verification_capture_aborted
    
    Webhooks for final verdict:
    
      - identity_verification_retry_requested
      - identity_verification_started
      - identity_verification_capture_completed
      - identity_verification_checks_completed
    
    ### Step 2: Create an applicant
    
    Set the value of `external_applicant_id` as `eaplt_61XXXA10000000000000000000`. Replace `61XXX` with any of the response codes starting with 61, that you would like to test for.
    
    For example, if you would like to test with response code `61401`, set the `external_application_id` to `eaplt_61401A10000000000000000000`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/applicants</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "external_applicant_id": "eaplt_61401A10000000000000000000",
      "email": "jia.tsang@example.com"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "aplt_tkoi5db4hryu5cei5vwoabr8hg",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "external_applicant_id": "eaplt_10000000000000000000000000",
      "email": "jia.tsang@example.com",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr8hg"
        }
      }
    }
    ```
    
    ### Step 3: Create an identity verification
    
    Set the `id` you received in the step 1 response as the `applicant_id` value. For example, in this case the response returned `aplt_tkoi5db4hryu5cei5vwoabr8hg` as the id.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr8hg",
      "declared_data": {
        "name": "Jia Tsang",
        "birth_date": "1984-10-02"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr8hg",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr8hg",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr8hg",
      "status": "pending",
      "response_codes": [],
      "declared_data": {
        "name": "Jia Tsang",
        "birth_date": "1984-10-02"
      },
      "documents": [],
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr8hg"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ### Step 4: Create an attempt
    
    Pass the `id` value from step 2 response as the `identity_verification_id` path parameter.
    
    For example, in this case the `id` value returned is `idv_tkoi5db4hryu5cei5vwoabr8hg`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    
    ```json
    {
        "phone_number": {
          "country_code": "+1",
          "number": "5555500102"
        },
        "redirect_url": "https://example.com?query-param=hello"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "5555500102"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "capture_in_progress",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    At this stage, the webhooks for the first attempt are triggered. The `identity_verification_capture_aborted` webhook will return the response code starting with 61, that you passed as part of the `external_applicant_id`.
    
    
    ### Step 5: Create another attempt
    
    When the `identity_verification_capture_aborted` webhook returns the `retry_required` status, create another attempt.
    
    Set the `id` value from step 2 response as the `identity_verification_id` path parameter. For example, in this case the `id` value returned is `idv_tkoi5db4hryu5cei5vwoabr8hg`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    
    ```json
    {
        "phone_number": {
          "country_code": "+1",
          "number": "5555500102"
        },
        "redirect_url": "https://example.com?query-param=hello"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "5555500102"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "capture_in_progress",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    At this stage, webhooks for the final verdict are triggered. The `identity_verification_checks_completed` webhook will return the response code `10000`.


    ### (Optional) Step 6: Retrieve an identity verification
    
    Pass the `id` value from step 2 response to the `identity_verification_id` path parameter.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}</span>
    </div>
    
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr8hg",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr8hg",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr8hg",
      "status": "approved",
      "response_codes": [
        {
          "code": 10000,
          "summary": "approved"
        }
      ],
      "verified_identity": {
        "full_name": "Jia Tsang",
        "birth_date": "1984-10-02"
      },
      "declared_data": {
        "name": "Jia Tsang",
        "birth_date": "1984-10-02"
      },
      "documents": [
        {
          "full_name": "Jia Tsang",
          "birth_date": "1984-10-02",
          "document_type": "ID",
          "document_issuing_country": "US",
          "front_image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555"
        }
      ],
      "face": {
        "image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4"
      },
      "phone_number": {
        "country_code": "+1",
        "number": "5555550102"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr8hg"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ## Successful verification on retry after checks inconclusive
    
    ### Step 1: Configure webhooks
    
    Have your webhook server ready to test real-time notifications for each event in this scenario. 
    
    Webhooks for first attempt:
    
      - identity_verification_created
      - identity_verification_opened
      - identity_verification_started
      - identity_verification_capture_completed
      - identity_verification_checks_inconclusive
    
    Webhooks for final verdict:
    
      - identity_verification_retry_requested
      - identity_verification_started
      - identity_verification_capture_completed
      - identity_verification_checks_completed
    
    ### Step 2: Create an applicant
    
    Set the value of `external_applicant_id` as `eaplt_61XXXA10000000000000000000`. Replace `61XXX` with any of the response codes starting with 61, that you would like to test for.
    
    For example, if you would like to test with response code `61310`, set the `external_application_id` to `eaplt_61310A10000000000000000000`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/applicants</span>
    </div> 
    
    #### Request example
    
    ```json
    {
      "external_applicant_id": "eaplt_61310A10000000000000000000",
      "email": "jia.tsang@example.com"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "aplt_tkoi5db4hryu5cei5vwoabr7wf",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "external_applicant_id": "eaplt_10000000000000000000000000",
      "email": "jia.tsang@example.com",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7wf"
        }
      }
    }
    ```
    
    ### Step 3: Create an identity verification
    
    Set the `id` you received in the step 1 response as the `applicant_id` value. For example, in this case the response returned `aplt_tkoi5db4hryu5cei5vwoabr7wf` as the id.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications</span>
    </div>
    
    #### Request example
    ```json
    {
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr7wf",
      "declared_data": {
        "name": "Jia Tsang",
        "birth_date": "1995-10-02"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr7wf",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr7wf",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr7wf",
      "status": "pending",
      "response_codes": [ ],
      "declared_data": {
        "name": "Jia Tsang",
        "birth_date": "1995-10-02"
      },
      "documents": [ ],
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7wf"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ### Step 4: Create an attempt
    
    Pass the `id` value from step 2 response as the `identity_verification_id` path parameter.
    
    For example, in this case the `id` value returned is `idv_tkoi5db4hryu5cei5vwoabr7wf`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    
    ```json
    {
        "phone_number": {
          "country_code": "+1",
          "number": "5555500102"
        },
        "redirect_url": "https://example.com?query-param=hello"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "5555500102"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "capture_in_progress",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    At this stage, the webhooks for the first attempt are triggered. The `identity_verification_checks_inconclusive` webhook will return the response code starting with 61, that you passed as part of the `external_applicant_id`.
    
    
    ### Step 5: Create another attempt
    
    When the `identity_verification_checks_inconclusive` webhook returns the `retry_required` status, create another attempt.
    
    Set the `id` value from step 2 response as the `identity_verification_id` path parameter. For example, in this case the `id` value returned is `idv_tkoi5db4hryu5cei5vwoabr7wf`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    
    ```json
    {
        "phone_number": {
          "country_code": "+1",
          "number": "5555500102"
        },
        "redirect_url": "https://example.com?query-param=hello"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "5555500102"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "capture_in_progress",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    At this stage, webhooks for the final verdict are triggered. The `identity_verification_checks_inconclusive` webhook will return the response code starting with 61 that you passed as part of the `external_applicant_id`.


    ### (Optional) Step 6: Retrieve an identity verification
    
    Pass the `id` value from step 2 response to the `identity_verification_id` path parameter.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}</span>
    </div>
    
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr8hg",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr8hg",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr8hg",
      "status": "approved",
      "response_codes": [
        {
          "code": 10000,
          "summary": "approved"
        }
      ],
      "verified_identity": {
        "full_name": "Jia Tsang",
        "birth_date": "1984-10-02"
      },
      "declared_data": {
        "name": "Jia Tsang",
        "birth_date": "1984-10-02"
      },
      "documents": [
        {
          "full_name": "Jia Tsang",
          "birth_date": "1984-10-02",
          "document_type": "ID",
          "document_issuing_country": "US",
          "front_image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555"
        }
      ],
      "face": {
        "image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4"
      },
      "phone_number": {
        "country_code": "+1",
        "number": "5555550102"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr8hg"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ## Declined verification
    
    ### Step 1: Configure webhooks
    
    Set up webhooks to test real-time notifications for each event in this scenario.
    
    For first attempt:
    
      - identity_verification_created
      - identity_verification_opened
      - identity_verification_started
      - identity_verification_capture_completed
      - identity_verification_checks_completed
    
    ### Step 2: Create an applicant
    
    Set the `external_applicant_id` value to `eaplt_62XXX000000000000000000000`. 
    Replace `62XXX` with any of the response codes starting with 62, that you would like to test for.
    
    For example, if you would like to test with `62201`, then set the value to `eaplt_62201000000000000000000000`
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/applicants</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "external_applicant_id": "eaplt_62201000000000000000000000",
      "email": "hannah.bret@example.com"
    }
    ```
    
    #### Response example
    
    ```json
    {
      "id": "aplt_tkoi5db4hryu5cei5vwoabr9fr",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "external_applicant_id": "eaplt_62201000000000000000000000",
      "email": "hannah.bret@example.com",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr9fr"
        }
      }
    }
    ```
    
    ### Step 3: Create an identity verification
    
    Set the `id` you received in the step 1 response as the `applicant_id` value. For example, in this case the response returned `aplt_tkoi5db4hryu5cei5vwoabr9fr` as the `id`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr9fr",
      "declared_data": {
        "name": "Hannah Bret",
        "birth_date": "1999-12-02"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/"
    }
    ```   
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr9fr",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr9fr",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr9fr",
      "status": "pending",
      "response_codes": [],
      "declared_data": {
        "name": "Hannah Bret",
        "birth_date": "1999-12-02"
      },
      "documents": [],
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr9fr"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ### Step 4: Create an attempt
    
    Pass the `id` from step 2 response as the path parameter.
    
    For example, in this case the response returned `idv_tkoi5db4hryu5cei5vwoabr1ab` as the `id`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    ```json
    {
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello"
    }
    ```   
    #### Response example
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "capture_in_progress",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    At this stage, the webhooks for the first attempt are triggered. The `identity_verification_checks_completed` webhook will return the response code starting with 62, that you passed as part of the `external_applicant_id`.
    
    ### (Optional) Step 5: Retrieve an identity verification
    
    Pass the `id` value from step 2 response to the `identity_verification_id` path parameter.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}</span>
    </div>
    
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr9fr",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr9fr",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr9fr",
      "status": "declined",
      "response_codes": [
        {
          "code": 62201,
          "summary": "document_photocopy"
        }
      ],
      "verified_identity": {
        "full_name": "Hannah Bret",
        "birth_date": "1999-12-02"
      },
      "declared_data": {
        "name": "Hannah Bret",
        "birth_date": "1999-12-02"
      },
      "documents": [
        {
          "full_name": "Hannah Bret",
          "birth_date": "1999-12-02",
          "document_type": "ID",
          "document_issuing_country": "US",
          "front_image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555"
        }
      ],
      "face": {
        "image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4"
      },
      "phone_number": {
        "country_code": "+1",
        "number": "5555550102"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr9fr"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ## Declined verification on retry after capture aborted
    
    ### Step 1: Configure webhooks
    
    Set up webhooks to test real-time notifications for each event in this scenario. 
    
    Webhooks for first attempt:
    
      - identity_verification_created
      - identity_verification_opened
      - identity_verification_started
      - identity_verification_capture_aborted
    
    Webhooks for final verdict:
    
      - identity_verification_retry_requested
      - identity_verification_started
      - identity_verification_capture_completed
      - identity_verification_checks_completed
    
    ### Step 2: Create an applicant
    
    Set the value of `external_applicant_id` as `eaplt_61XXXA62XXX000000000000000`. Replace: 
    - `61XXX` with any of the response codes starting with 61 for the end of the first attempt
    - `62XXX` with any of the response codes starting with 62 for the final verdict
    
    For example, if you would like to test with `61203` and `62103`, then set the value to `eaplt_61203A62103000000000000000`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/applicants</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "external_applicant_id": "eaplt_61203A62103000000000000000",
      "email": "toby.arden@example.com"
    }
    ```   
    #### Response example
    
    ```json
    {
      "id": "aplt_tkoi5db4hryu5cei5vwoabr1ab",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "external_applicant_id": "eaplt_61203A62103000000000000000",
      "email": "toby.arden@example.com",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr1ab"
        }
      }
    }
    ```
    
    ### Step 3: Create an identity verification
    
    Set the `id` you received in the step 1 response as the `applicant_id` value. For example, in this case the response returned `aplt_tkoi5db4hryu5cei5vwoabr1ab` as the `id`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr1ab",
      "declared_data": {
        "name": "Ali Farid",
        "birth_date": "1990-12-20"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/"
    }
    ```   
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr1ab",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr1ab",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr1ab",
      "status": "pending",
      "response_codes": [],
      "declared_data": {
        "name": "Ali Farid",
        "birth_date": "1990-12-20"
      },
      "documents": [],
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr1ab"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ### Step 4: Create an attempt
    
    Pass the `id` from step 2 response as the path parameter.
    
    For example, in this case the response returned `idv_tkoi5db4hryu5cei5vwoabr1ab` as the `id`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello"
    }
    ```   
    
    At this stage, the webhooks for the first attempt are triggered. The `identity_verification_capture_aborted` webhook will return the response code starting with 61, that you passed as part of the `external_applicant_id`.
    
    #### Response example
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "pending_redirection",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ### Step 5: Create another attempt
    
    When the `identity_verification_capture_aborted` webhook returns the `retry_required` status, create another attempt.
    
    To do this, pass the `id` from step 2 response as the path parameter.
    
    For example, in this case the response returned `idv_tkoi5db4hryu5cei5vwoabr1ab` as the `id`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello"
    }
    ```   
    #### Response example
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "capture_in_progress",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    At this stage, webhooks for the final verdict are triggered. The `identity_verification_checks_completed` webhook will return the response code starting with 62 that you passed as part of the `external_applicant_id`.

    ### (Optional) Step 6: Retrieve an identity verification
    
    Pass the `id` value from step 2 response to the `identity_verification_id` path parameter.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}</span>
    </div>
    
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr1ab",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr1ab",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr1ab",
      "status": "declined",
      "response_codes": [
        {
          "code": 62103,
          "summary": "document_damaged"
        }
      ],
      "verified_identity": {
        "full_name": "Ali Farid",
        "birth_date": "1990-12-20"
      },
      "declared_data": {
        "name": "Ali Farid",
        "birth_date": "1990-12-20"
      },
      "documents": [
        {
          "full_name": "Ali Farid",
          "birth_date": "1990-12-20",
          "document_type": "ID",
          "document_issuing_country": "US",
          "front_image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555"
        }
      ],
      "face": {
        "image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4"
      },
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ## Declined verification on retry after checks inconclusive
    
    ### Step 1: Configure webhooks
    
    Have your webhook server ready to test real-time notifications for each event in this scenario. 
    
    Webhooks for first attempt:
    
      - identity_verification_created
      - identity_verification_opened
      - identity_verification_started
      - identity_verification_capture_completed
      - identity_verification_checks_inconclusive
    
    Webhooks for final verdict:
    
      - identity_verification_retry_requested
      - identity_verification_started
      - identity_verification_capture_completed
      - identity_verification_checks_completed
    
    ### Step 2: Create an applicant
    
    Set the value of `external_applicant_id` as `eaplt_61XXXI62XXX000000000000000`. Replace: 
    - `61XXX` with any of the response codes starting with 61 for the end of the first attempt
    - `62XXX` with any of the response codes starting with 62 for the final verdict
    
    For example, if you would like to test with `61203` and `62403`, then set the value to `eaplt_61203A62403000000000000000`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/applicants</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "external_applicant_id": "eaplt_61203A62403000000000000000",
      "email": "toby.arden@example.com"
    }
    ```   
    #### Response example
    
    ```json
    {
      "id": "aplt_tkoi5db4hryu5cei5vwoabr6ft",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "external_applicant_id": "eaplt_10000000000000000000000000",
      "email": "toby.arden@example.com",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr6ft"
        }
      }
    }
    ```
    
    ### Step 3: Create an identity verification
    
    Set the `id` you received in the step 1 response as the `applicant_id` value. For example, in this case the response returned `aplt_tkoi5db4hryu5cei5vwoabr6ft` as the `id`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr6ft",
      "declared_data": {
        "name": "Toby Arden",
        "birth_date": "1994-09-26"
      },
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/"
    }
    ```   
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr6ft",
      "created_on": "2023-07-21T17:32:28Z",
      "modified_on": "2023-07-21T17:40:32Z",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr6ft",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr6ft",
      "status": "pending",
      "response_codes": [],
      "declared_data": {
        "name": "Toby Arden",
        "birth_date": "1994-09-26"
      },
      "documents": [],
      "redirect_url": "https://example.com?query-param=hello",
      "webhook_url": "https://my.api/events/",
      "_links": {
        "self": {
          "href": "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr6ft"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    ### Step 4: Create an attempt
    
    Pass the `id` from step 2 response as the path parameter.
    
    For example, in this case the response returned `idv_tkoi5db4hryu5cei5vwoabr6ft` as the `id`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello"
    }
    ```   
    #### Response example
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "capture_in_progress",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    At this stage, the webhooks for the first attempt are triggered. The `identity_verification_checks_inconclusive` webhook will return the response code starting with 61, that you passed as part of the `external_applicant_id`.
    
    
    ### Step 5: Create another attempt
    
    When the `identity_verification_checks_inconclusive` webhook returns the `retry_required` status, create another attempt.
    
    To do this, pass the `id` from step 2 response as the path parameter.
    
    For example, in this case the response returned `idv_tkoi5db4hryu5cei5vwoabr6ft` as the `id`.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="post" class="sc-EgOXT hniGzf http-verb post">post</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}/attempts</span>
    </div>
    
    #### Request example
    
    ```json
    {
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello"
    }
    ```   
    #### Response example
    
    ```json
    {
      "id": "iatp_tkoi5db4hryu5cei5vwoabrPoQ",
      "created_on": "2017-07-21T17:32:28Z",
      "modified_on": "2017-07-21T17:40:32Z",
      "phone_number": {
        "country_code": "+1",
        "number": "2068133616"
      },
      "redirect_url": "https://myweb.site?query-param=hello",
      "status": "capture_in_progress",
      "response_codes": [],
      "_links": {
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```
    
    At this stage, webhooks for the final verdict are triggered. The `identity_verification_checks_completed` webhook will return the response code starting with 62 that you passed as part of the `external_applicant_id`.

    ### (Optional) Step 6: Retrieve an identity verification
    
    Pass the `id` value from step 2 response to the `identity_verification_id` path parameter.
    
    <div style="padding: 1em; background-color: #fafafa; display: flex; align-items: center; border-radius: 0.5rem;">
      <span type="get" class="sc-EgOXT dzbTKB http-verb get">get</span>
      <span class="sc-ejfMa-d jgeKJH">/v2/identity-verifications/{identity_verification_id}</span>
    </div>
    
    #### Response example
    
    ```json
    {
      "id": "idv_tkoi5db4hryu5cei5vwoabr6ft",
      "created_on": "2023-10-06T17:32:28Z",
      "modified_on": "2023-10-06T17:40:32Z",
      "user_journey_id": "usj_tkoi5db4hryu5cei5vwoabr6ft",
      "applicant_id": "aplt_tkoi5db4hryu5cei5vwoabr6ft",
      "status": "declined",
      "response_codes": [
        {
          "code": 62403,
          "summary": "consent_unclear"
        }
      ],
      "verified_identity": {
        "full_name": "Toby Arden",
        "birth_date": "1994-09-26"
      },
      "declared_data": {
        "name": "Toby Arden",
        "birth_date": "1994-09-26"
      },
      "documents": [
        {
          "full_name": "Toby Arden",
          "birth_date": "1994-09-26",
          "document_type": "ID",
          "document_issuing_country": "US",
          "front_image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555"
        }
      ],
      "face": {
        "image_signed_url": "https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20231006T174223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4"
      },
      "_links": {
        "self": {
          "href": "https://identity-verifications.sandbox.checkout.com/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr6ft"
        },
        "verification_url": {
          "href": "https://id.ubble.ai/4hryu5cei5/"
        }
      }
    }
    ```

    # Signature

    ## What is signed ?
    **Webhook notifications** are signed by default.

    To enable signature verification for **API responses**, contact your account manager.

    ## Cko-Signature Header
    The `Cko-Signature` header contains:
    - **Timestamp**: The time of the request (e.g., `1635236316.377888`).
    - **Signing Key ID and Version**: Unique key identifier and version (e.g., `3456-live-v1`).
    - **Signature**: The digital signature (e.g., `5257a869a7ecebeda35affa62cdcb3fa51cad7e77a0e56ff546d0ae8e108d8bd`).

    ### Signature Format
    ```
      <timestamp>:<organization_id>-<test or live verification>-<key version>:<signature>
    ```

    ### Signature example
    ```
      1635236316.377888:3456-production-v1:5257a869a7ecebeda35affa62cdcb3fa51cad7e77a0e56ff546d0ae8e108d8bd
    ```

    ### Signing Algorithm
    We use **ECDSA** with **SHA-512** to create signatures.

    ## Verifying the Signature
    1. **Download the Public Key**: Separate keys for test and live environments are available in the dashboard.
    2. **Recreate the Signed Data**: Combine the request body and the `Cko-Signature` timestamp.
    3. **Verify the Signature**: Use ECDSA with the downloaded public key to verify the signature.

    For code samples, visit our [repository](https://github.com/ubbleai/code-samples).

    # API standards

    This section describes the standards we use to ensure the consistency of our API. 
    
    ## Required tag
    ### required
    Attributes tagged as `required` **MUST** be present in requests and responses.

    ### null values
    Attributes not marked as `required` can be null. In that case the attribute is not sent in the response.

    ## Resources identifiers
    ### Format
    `{prefix}_{lower-case base-32 encoded GUID}`

    ### Resources identifiers formatting

    | resource name          | prefix  | example                         |
    |------------------------|---------|---------------------------------|
    | applicants             | aplt    | aplt_tkoi5db4hryu5cei5vwoabr7we |
    | identity-verifications | idv     | idv_tkoi5db4hryu5cei5vwoabr7we  |
    | aml-verifications      | amlv    | amlv_tkoi5db4hryu5cei5vwoabr7we |
    | user-journey           | usj     | usj_tkoi5db4hryu5cei5vwoabr7we  |

    ## Content type
    The API accepts and returns `application/json` type.

    ## Error handling
    For HTTP error codes 400 and 422 the response body will contain:
    - `error_type`: a short description code
    - `error_codes`: a list of more detailed codes
    
    Error codes and error types can be formatted as follows:
    - `{error}`
    - `{target/attribute}__{error}`
    - `{nested_object}__{object_attribute}__{error}`

    ```json
    {
      "error_type": "invalid_request",
      "error_codes": [
        "birth_date__invalid_format",
        "first_name__required",
        "phone_number__country_code__invalid"
      ]
    }
    ````

    ## Common Objects/Properties

    | name         | format                                                                                                                                              | example                                                                     |
    |--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|
    | countries    | - Apply ISO 3166-1 alpha-2                                                                                                                          | FR                                                                          |
    | date-time    | - Apply ISO8601<br /> - Always UTC time                                                                                                             | 2017-07-21T17:32:28Z                                                        |
    | phone number | - Country code with '+' sign (+33 for example) <br /> - Number with potential spaces, hyphens or trailing zero(s)  | {<br />    "country_code": "+44",<br />    "number": "1234 567890"<br /> }  |

  version: 2.0.0

servers:
  - url: https://api.ubble.ai/

tags:
  - name: identity verifications
    description: Identity verification endpoints documentation.
  - name: AML verifications
    description: AML verification endpoints documentation.
  - name: applicants
    description: Applicant management endpoints documentation.
  - name: attempts
    description: Attempt management endpoints documentation.

x-tagGroups:
  - name: Endpoints documentation
    tags:
      - Applicants
      - Identity verifications
      - Face authentications
      - AML verifications
      - Service status
paths:
  /health:
    get:
      tags:
        - Service status
      summary: Retrieve API health
      description: This endpoint allows you to get the health of our api, anything other than a 200 status code is not OK
      operationId: retrieve_api_health
      responses:
        "200":
          description: API is OK
  # Identity Verifications

  /v2/create-and-start-idv:
    post:
      tags:
        - Identity verifications
      summary: Create and start an identity verification
      description: This endpoint allows you to create and identity verification. You should get a `201` response and the identity verification resource containing the `_links/verification_url`.
      operationId: create_and_start_identity_verification
      requestBody:
        required: true
        content:
          application/json:
            examples:
              Only required data:
                $ref: "#/components/examples/identity_verification_creation_request_body_helper_min"
              All possible data:
                $ref: "#/components/examples/identity_verification_creation_request_body_helper_max"
              Use an existing applicant:
                $ref: "#/components/examples/identity_verification_creation_request_body_min_plus_aplt"
            schema:
              $ref: "#/components/schemas/IdentityVerificationInputHelper"
      responses:
        "201":
          description: Identity verification created
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_creation_response_body_helper"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationOutputHelper"
      callbacks:
        statusChanged:
          "{$request.body#/webhook_url}":
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    example:
                      {
                        "specversion": "2.0",
                        "type": "identity_verification_capture_completed",
                        "subject": "idv_5hxpdwegjcbujpth3wdo55d3vm",
                        "id": "evnt_5hxpdwegjcbujpth3wdo55d3vm",
                        "time": "2023-03-22T17:31:00Z",
                        "datacontenttype": "application/json",
                        "data":
                          {
                            "applicant_id": "aplt_5hxpdwegjcbujpth3wdo55d3vm",
                            "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
                            "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
                            "status": "declined",
                            "response_codes":
                              [
                                {
                                  "code": 61310,
                                  "summary": "document_front_not_captured",
                                },
                                {
                                  "code": 62102,
                                  "summary": "document_not_accepted",
                                },
                              ],
                          },
                      }
                    schema:
                      $ref: "#/components/schemas/Event"
              responses:
                "200":
                  description: Your server returns this code if it accepts the callback.
                "201":
                  description: Your server returns this code if it accepts the callback.

  /v2/identity-verifications:
    post:
      tags:
        - Identity verifications
      summary: Create an identity verification
      description: |
        Creates an identity verification.
        
        When this request is successful, you'll get a 201 response with the identity verification resource.
      operationId: create_identity_verification
      requestBody:
        required: true
        content:
          application/json:
            examples:
              Only required data:
                $ref: '#/components/examples/identity_verification_creation_request_body_min'
              All possible data:
                $ref: '#/components/examples/identity_verification_creation_request_body_max'
            schema:
              $ref: '#/components/schemas/IdentityVerificationInputPost'
      responses:
        '201':
          description: Identity verification created successfully
          content:
            application/json:
              example:
                $ref: '#/components/examples/identity_verification_creation_response_body'
              schema:
                allOf:
                  - $ref: '#/components/schemas/IdentityVerificationOutputPost'
        '400':
          description: Bad request.
        # Not taken into account in interface testing
        #          content:
        #            application/json:
        #              example:
        #                $ref: '#/components/examples/idv_identity_verification_creation_request_invalid_body'
        #              schema:
        #                $ref: '#/components/schemas/ResponseError'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable entity
        # Not taken into account in interface testing
        #          content:
        #            application/json:
        #              example:
        #                $ref: '#/components/examples/idv_identity_verification_unprocessable_entity_body'
        #              schema:
        #                $ref: '#/components/schemas/ResponseError'
        '500':
          description: Internal server error.
        '503':
          description: Service unavailable

  /v2/identity-verifications/{identity_verification_id}:
    get:
      tags:
        - Identity verifications
      summary: Retrieve an identity verification
      description: This endpoint allows you to get the detailed results of an identity verification.
      operationId: retrieve_identity_verification
      parameters:
        - name: identity_verification_id
          required: true
          in: path
          description: ID of the identity verification
          schema:
            $ref: "#/components/schemas/IdentityVerificationId"
      responses:
        "200":
          description: Identity verification retrieved
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationOutputGet"

  /v2/identity-verifications/{identity_verification_id}/anonymize:
    post:
      tags:
        - Identity verifications
      summary: Anonymize an identity verification
      description: Anonymize the personal data of an identity verification with the specified ID.
      operationId: anonymize_identity_verification
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification to anonymize
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Identity verification anonymized
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_anonymization_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationOutputAnonymize"
        "404":
          description: Identity verification not found
        "400":
          description: Bad request. The identity verification cannot be anonymized.
        "500":
          description: Internal server error

  /v2/identity-verifications/{identity_verification_id}/pdf-report:
    get:
      tags:
        - Identity verifications
      summary: Retrieve PDF report of an identity verification
      description: |
        This endpoint allows you to retrieve a PDF report containing all the information of the identity verification.

        Please note that this report is only available for verifications in statuses `declined` and `approved` once you receive the `identity_verification_report_created` event.
      

      operationId: pdf_identity_verification
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Operation success
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_pdf_response_body"
              schema:
                required: [pdf_report]
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationOutputPdfReport"
        "404":
          description: The PDF is not available

  /v2/identity-verifications/{identity_verification_id}/notify:
    post:
      tags:
        - Identity verifications
      summary: Request webhook notification
      operationId: notify_identity_verification
      description: This endpoint can be used to initiate a webhook call containing the latest event of an identity verification.
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification to notify
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                webhook_url:
                  type: string
                  format: uri
      responses:
        "204":
          description: Notification successfully requested

  /v2/identity-verifications/{identity_verification_id}/attempts:
    get:
      tags:
        - Identity verifications
      summary: List attempts
      description: This endpoint allows you to list all attempts of a verification
      operationId: list_attempts
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List attempt
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_attempt_list_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationAttemptOutputList"
        "404":
          description: The provided verification ID is not valid
        "500":
          description: An error occurred while fetching the attempts
    post:
      tags:
        - Identity verifications
      summary: Create an Attempt
      description: This endpoint allows you to create a new Attempt. It is possible when the identity-verification is in one of
        the following statuses `created`, `pending`, `capture_in_progress`, `retry_required`
      operationId: create_attempt
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Minimal body:
                $ref: "#/components/examples/attempt_creation_request_body_min"
              All possible data:
                $ref: "#/components/examples/identity_attempt_creation_request_body_\
                      max"
            schema:
              $ref: "#/components/schemas/IdentityVerificationAttemptInputPost"
      responses:
        "201":
          description: Attempt created
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_attempt_creation_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationAttemptOutputPost"
        "404":
          description: The provided verification ID is not valid
        "409":
          description: The current verification status does not allow the creation of a new attempt. The verification status must be either `created`, `pending`, `capture_in_progress`, or `retry_required`
        "500":
          description: An error occurred while creating the attempt

  /v2/identity-verifications/{identity_verification_id}/attempts/{attempt_id}:
    get:
      tags:
        - Identity verifications
      summary: Retrieve an attempt
      description: This endpoint allows you to retrieve the details for a given attempt
      operationId: fetch_attempts
      parameters:
        - name: identity_verification_id
          in: path
          description: ID of the identity verification
          required: true
          schema:
            type: string
        - name: attempt_id
          in: path
          description: ID of the attempt
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Attempt fetched
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/identity_verification_attempt_get_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/IdentityVerificationAttemptOutputGet"
        "404":
          description: The provided verification ID or attempt ID is not valid
        "500":
          description: An error occurred while fetching the attempt

  # Applicants
  /v2/applicants:
    post:
      tags:
        - Applicants
      summary: Create an Applicant
      description: This section describes all endpoints related to applicants. It will enable you to create and manage applicant objects.
      operationId: create_applicant
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicantInputPost"
            examples:
              All possible data:
                $ref: "#/components/examples/applicant_creation_request_body"

      responses:
        "201":
          description: Applicant successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantOutputPost"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body"
          links:
            RetrieveApplicantById:
              operationId: retrieve_applicant
              parameters:
                applicant_id: "$response.body#/id"
        "400":
          description: Bad request
          content:
            application/json:
              examples:
                Invalid phone number:
                  value:
                    {
                      "error_type": "request_invalid",
                      "error_codes": ["phone_number__invalid_format"],
                    }

  /v2/applicants/{applicant_id}:
    get:
      tags:
        - Applicants
      summary: Retrieve an Applicant
      description: Retrieve an Applicant
      operationId: retrieve_applicant
      parameters:
        - name: applicant_id
          required: true
          in: path
          description: ID of Applicant to return
          schema:
            $ref: "#/components/schemas/ApplicantId"
      responses:
        "200":
          description: applicant retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantOutputGet"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body"
        "404":
          description: "Applicant not found"

    patch:
      tags:
        - Applicants
      summary: Update an Applicant
      description: Update an Applicant
      operationId: update_applicant
      parameters:
        - name: applicant_id
          required: true
          in: path
          description: ID of Applicant to return
          schema:
            $ref: "#/components/schemas/ApplicantId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicantInputPatch"
            examples:
              All possible data:
                $ref: "#/components/examples/applicant_patch_request_body"
      responses:
        "200":
          description: applicant updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantOutputPatch"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body"
        "404":
          description: Applicant not found
        "400":
          description: Bad request. One or more input parameters are invalid
        "500":
          description: Internal server error

  /v2/applicants/{applicant_id}/anonymize:
    post:
      tags:
        - Applicants
      summary: Anonymize an Applicant
      description: Anonymize the personal data of an applicant with the specified ID.
      operationId: anonymize_applicant
      parameters:
        - name: applicant_id
          in: path
          description: ID of the applicant to anonymize
          required: true
          schema:
            type: string
      responses:
        "200":
          description: applicant anonymized successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicantOutputAnonymize"
              examples:
                Always replies:
                  $ref: "#/components/examples/applicant_response_body_anonymized"
        "404":
          description: Identity verification not found
        "400":
          description: Bad request. The applicant cannot be anonymized.
        "500":
          description: Internal server error

  # AML Verifications
  /v2/aml-verifications:
    post:
      tags:
        - AML verifications
      summary: Create an AML verification
      description: This endpoint allows you to create an AML verification. You should get a `201` response.
      operationId: create_aml_verification
      requestBody:
        required: true
        content:
          application/json:
            examples:
              Only required data:
                $ref: "#/components/examples/aml_verification_creation_request_body_min"
              All possible data:
                $ref: "#/components/examples/aml_verification_creation_request_body_max"
            schema:
              $ref: "#/components/schemas/AMLVerificationInputPost"
      responses:
        "201":
          description: AML verification created
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/aml_verification_response_body"
              schema:
                required: [applicant_id]
                allOf:
                  - $ref: "#/components/schemas/AMLVerificationOutputPost"

  /v2/aml-verifications/{aml_verification_id}:
    get:
      tags:
        - AML verifications
      summary: Retrieve an AML verification
      description: This endpoint allows you to get the detailed results of an AML verification.
      operationId: retrieve_aml_verification
      parameters:
        - name: aml_verification_id
          required: true
          in: path
          description: ID of the AML verification
          schema:
            $ref: "#/components/schemas/AMLVerificationId"
      responses:
        "200":
          description: AML verification retrieved
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/aml_verification_response_body"
              schema:
                required: [applicant_id]
                allOf:
                  - $ref: "#/components/schemas/AMLVerificationOutputGet"

  # Face Authentications
  /v2/face-authentications:
    post:
      tags:
        - Face authentications
      summary: Create a face authentication
      description: This endpoint allows you to create a face authentication.
      operationId: create_face_authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FaceAuthenticationInputPost"
      responses:
        "201":
          description: Face authentication created
          content:
            application/json:
              examples:
                face_authentication_creation_response_body:
                  $ref: "#/components/examples/face_authentication_creation_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationOutputPost"
        "400":
          description: Bad request
        "500":
          description: Internal server error

  /v2/face-authentications/{face_authentication_id}:
    get:
      tags:
        - Face authentications
      summary: Retrieve a face authentication
      description: This endpoint allows you to get the detailed results of a face authentication.
      operationId: retrieve_face_authentication
      parameters:
        - name: face_authentication_id
          required: true
          in: path
          description: ID of the face authentication
          schema:
            $ref: "#/components/schemas/FaceAuthenticationId"
      responses:
        "200":
          description: Face authentication retrieved
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/face_authentication_creation_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationOutputGet"
        "404":
          description: Face authentication not found
        "500":
          description: Internal server error

  /v2/face-authentications/{face_authentication_id}/anonymize:
    post:
      tags:
        - Face authentications
      summary: Anonymize a face authentication
      description: Anonymize the personal data of a face authentication with the specified ID.
      operationId: anonymize_face_authentication
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication to anonymize
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Face authentication anonymization requested
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/face_authentication_anonymization_response_body"
              schema:
                required: [applicant_id, user_journey_id]
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationOutputAnonymize"
        "404":
          description: Face authentication not found
        "400":
          description: Bad request. The face authentication cannot be anonymized.
        "500":
          description: Internal server error

  /v2/face-authentications/{face_authentication_id}/notify:
    post:
      tags:
        - Face authentications
      summary: Request webhook notification
      operationId: notify_face_authentication
      description: This endpoint can be used to initiate a webhook call containing the latest event of a face authentication.
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication to notify
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                webhook_url:
                  type: string
                  format: uri
      responses:
        "204":
          description: Notification successfully requested

  /v2/face-authentications/{face_authentication_id}/attempts:
    get:
      tags:
        - Face authentications
      summary: List attempts
      description: This endpoint allows you to list all attempts of a face authentication
      operationId: list_attempts_face_authentication
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List attempts
          content:
            application/json:
              examples:
                identity_verification_creation_response_body:
                  $ref: "#/components/examples/face_authentication_attempt_list_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationAttemptResponseList"
        "404":
          description: The provided face authentication ID is not valid
        "500":
          description: An error occurred while fetching the attempts
    post:
      tags:
        - Face authentications
      summary: Create an Attempt
      description: This endpoint allows you to create a new Attempt. It is possible when the face-authentication is in one of
        the following statuses `created`, `pending`, `capture_in_progress`, `retry_required`
      operationId: create_attempt_face_authentication
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              Minimal body:
                $ref: "#/components/examples/attempt_creation_request_body_min"
              All possible data:
                $ref: "#/components/examples/face_attempt_creation_request_body_max"
            schema:
              $ref: "#/components/schemas/FaceAuthenticationAttemptInputPost"
      responses:
        "201":
          description: Attempt created
          content:
            application/json:
              examples:
                face_authentication_attempt_creation_response_body:
                  $ref: "#/components/examples/face_authentication_attempt_creation_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationAttemptOutputPost"
        "404":
          description: The provided face authentication ID is not valid
        "409":
          description: The current face authentication status does not allow the creation of a new attempt.
            The face authentication status must be either `created`, `pending`, `capture_in_progress`, or `retry_required`
        "500":
          description: An error occurred while creating the attempt

  /v2/face-authentications/{face_authentication_id}/attempts/{attempt_id}:
    get:
      tags:
        - Face authentications
      summary: Retrieve an attempt
      description: This endpoint allows you to retrieve the details for a given attempt
      operationId: fetch_attempts_face_authentication
      parameters:
        - name: face_authentication_id
          in: path
          description: ID of the face authentication
          required: true
          schema:
            type: string
        - name: attempt_id
          in: path
          description: ID of the attempt
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Attempt fetched
          content:
            application/json:
              examples:
                face_authentication_detail_response_body:
                  $ref: "#/components/examples/face_authentication_attempt_get_response_body"
              schema:
                allOf:
                  - $ref: "#/components/schemas/FaceAuthenticationAttemptOutputGet"
        "404":
          description: The provided face authentication ID or attempt ID is not valid
        "500":
          description: An error occurred while fetching the attempt
components:
  schemas:
    ########################### Utils schemas #############################
    DatedObject:
      type: object
      required: [created_on, modified_on]
      properties:
        created_on:
          description: UTC Date time when the resource was created
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        modified_on:
          description: UTC Date time when the resource was modified
          type: string
          format: date-time
          example: 2017-07-21T17:40:32Z

    CountryCodeIso2:
      type: string
      format: ISO 3166-1 alpha-2
      pattern: ^[A-Za-z]{2}$
      example: US

    CountryCodeIso3:
      type: string
      format: ISO 3166-1 alpha-3
      pattern: ^[A-Za-z]{3}$
      example: USA

    Gender:
      type: string
      description: Person gender.
      example: M
      enum:
        - M
        - F

    ResponseCodes:
      type: object
      description: The code giving more details about the result.
      properties:
        code:
          $ref: "#/components/schemas/ResponseCode"
        summary:
          $ref: "#/components/schemas/ResponseSummary"

    ResponseSummary:
      type: string
      description: A descriptive code of the response code.

    ResponseCode:
      type: integer
      description: The numeric code of the response code.
      minimum: 10000
      maximum: 69999

    PhonePrefix:
      type: string
      format: international phone prefix
      pattern: ^\+(\d+)$
      example: "+33"

    DomesticPhoneNumber:
      type: string
      format: domestic phone number
      pattern: ^\d{1,14}$
      example: "2068133616"
    Address:
      type: object
      description: Postal address.
      required: [address_line1, city, zip, country]
      properties:
        address_line1:
          type: string
          minLength: 1
          maxLength: 100
          example: 4022 Laguna St
        address_line2:
          type: string
          minLength: 1
          maxLength: 100
          example: Flat 456
        city:
          type: string
          minLength: 1
          maxLength: 100
          example: Santa Barbara
        zip:
          type: string
          minLength: 2
          maxLength: 20
          example: 93101
        country:
          $ref: "#/components/schemas/CountryCodeIso2"

    PhoneNumber:
      type: object
      required: [country_code, number]
      properties:
        country_code:
          $ref: "#/components/schemas/PhonePrefix"
        number:
          $ref: "#/components/schemas/DomesticPhoneNumber"

    HalLink:
      type: object
      required: [href]
      properties:
        href:
          type: string
          format: uri

    PreSignedUrl:
      type: string
      format: uri
      description: Pre-signed URL
      example: https://storage-b.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4
    #######################################################################

    ################ Verifications Shared schemas #########################
    UserJourneyId:
      type: string
      description: User journey unique identifier.
      pattern: ^usj_\w+$
      example: usj_tkoi5db4hryu5cei5vwoabr7we

    DeclaredData:
      type: object
      required: [name]
      properties:
        name:
          type: string
          maxLength: 255
        birth_date:
          type: string
          format: date

    Document:
      type: object
      required: [document_type, document_issuing_country, front_image_signed_url]
      allOf:
        - $ref: "#/components/schemas/Identity"
        - properties:
            personal_number:
              type: string
              maxLength: 255
            tax_identification_number:
              type: string
              maxLength: 255
            document_type:
              $ref: "#/components/schemas/DocumentTypes"
            document_issuing_country:
              $ref: "#/components/schemas/CountryCodeIso3"
            permit_obtaining_date:
              type: string
              format: date
            permit_expiry_date:
              type: string
              format: date
            permit_type_detailed:
              type: string
              maxLength: 255
            permit_type_remarks:
              type: string
              maxLength: 255
            document_number:
              type: string
              maxLength: 255
            document_expiry_date:
              type: string
              format: date
            document_issue_date:
              type: string
              format: date
            document_issue_place:
              type: string
              maxLength: 255
            document_mrz:
              type: string
              pattern: ^([A-Z0-9<]{2}[A-Z0-9<]{1,38}[\n\r])+([A-Z0-9<]{2}[A-Z0-9<]{1,44}[\n\r])?([A-Z0-9<]{2}[A-Z0-9<]{1,44}[\n\r])?$
            front_image_signed_url:
              $ref: "#/components/schemas/PreSignedUrl"
            back_image_signed_url:
              $ref: "#/components/schemas/PreSignedUrl"
            signature_image_signed_url:
              $ref: "#/components/schemas/PreSignedUrl"

    DocumentTypes:
      type: string
      description: Type of document.
      enum:
        - Driving licence
        - ID
        - Passport
        - Residence Permit

    Face:
      type: object
      required: [image_signed_url]
      properties:
        image_signed_url:
          $ref: "#/components/schemas/PreSignedUrl"

    Event:
      type: object
      required: [specversion, type, subject, id, time, datacontenttype, data]
      properties:
        specversion:
          type: string
          description: The version of the CloudEvents specification.
          example: "2.0"
        type:
          type: string
          description: The type of the CloudEvent.
          example: "identity_verification_capture_completed"
        subject:
          type: string
          description: The identifier of the subject of the event.
          example: "idv_5hxpdwegjcbujpth3wdo55d3vm"
        id:
          type: string
          description: The identifier of the event.
          example: "evnt_5hxpdwegjcbujpth3wdo55d3vm"
        time:
          type: string
          format: date-time
          description: The time when the event occurred.
          example: "2023-03-22T17:31:00Z"
        datacontenttype:
          type: string
          description: The content type of the data attribute.
          example: "application/json"
        data:
          type: object
          description: The event payload.
          example:
            {
              "applicant_id": "aplt_5hxpdwegjcbujpth3wdo55d3vm",
              "user_journey_id": "usj_5hxpdwegjcbujpth3wdo55d3vm",
              "identity_verification_id": "idv_5hxpdwegjcbujpth3wdo55d3vm",
              "status": "declined",
              "response_codes":
                [
                  { "code": 61310, "summary": "document_front_not_captured" },
                  { "code": 62102, "summary": "document_not_accepted" },
                ],
            }

    ResponseError:
      type: object
      required:
        - error_type
        - error_codes
      properties:
        error_type:
          type: string
          description: Type of error.
          enum:
            - unprocessable_entity
            - request_invalid
        error_codes:
          type: array
          description: List of codes.
          items:
            type: string

    Identity:
      type: object
      required: [full_name, birth_date]
      properties:
        full_name:
          type: string
          minLength: 2
          maxLength: 510
        first_names:
          type: string
          minLength: 1
          maxLength: 255
        last_name:
          type: string
          minLength: 1
          maxLength: 255
        last_name_at_birth:
          type: string
          minLength: 1
          maxLength: 255
        birth_date:
          type: string
          format: date
        birth_place:
          type: string
          minLength: 1
          maxLength: 255
        nationality:
          $ref: "#/components/schemas/CountryCodeIso2"
        gender:
          $ref: "#/components/schemas/Gender"

    BaseOutputList:
      type: object
      properties:
        total_count:
          type: integer
        skip:
          type: integer
        limit:
          type: integer
        _links:
          allOf:
            - $ref: "#/components/schemas/SelfLink"
            - $ref: "#/components/schemas/NextLink"
            - $ref: "#/components/schemas/PreviousLink"

    SelfLink:
      type: object
      required: [self]
      properties:
        self:
          $ref: "#/components/schemas/HalLink"

    NextLink:
      type: object
      required: [next]
      properties:
        next:
          $ref: "#/components/schemas/HalLink"

    PreviousLink:
      type: object
      required: [previous]
      properties:
        previous:
          $ref: "#/components/schemas/HalLink"

    ActiveLink:
      type: object
      required: [verification_url]
      properties:
        verification_url:
          $ref: "#/components/schemas/HalLink"

    VerificationFace:
      type: object
      properties:
        image_signed_url:
          type: string
          nullable: true
      required:
        - image_signed_url

    VerificationIdentity:
      type: object
      description: IdentitySerializer for our main Identity model
      properties:
        first_names:
          type: string
          nullable: true
        full_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        last_name_at_birth:
          type: string
          nullable: true
        birth_date:
          type: string
          format: date
          nullable: true
        birth_place:
          type: string
          nullable: true
          maxLength: 255
        nationality:
          type: string
        gender:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/GenderA47Enum'
            - $ref: '#/components/schemas/BlankEnum'
            - $ref: '#/components/schemas/NullEnum'
      required:
        - full_name

    GenderA47Enum:
      enum:
        - M
        - F
        - NA
      type: string
      description: |-
        * `M` - M
        * `F` - F
        * `NA` - NA

    BlankEnum:
      enum:
        - ''

    NullEnum:
      enum:
        - null
    #######################################################################

    ########################### Applicant schemas #########################
    BaseApplicant:
      type: object
      properties:
        external_applicant_id:
          type: string
          example: "ext_osdfdfdb4hryu5cei5vwoabrk5k"
        email:
          type: string
          format: email
          example: david.vincent@courriel.ml

    ApplicantInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseApplicant"

    ApplicantOutputBase:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/ApplicantId"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/BaseApplicant"
        - $ref: "#/components/schemas/ApplicantsLinks"

    ApplicantInputPost:
      type: object
      allOf:
        - $ref: "#/components/schemas/ApplicantInputBase"

    ApplicantOutputPost:
      type: object
      required: [id]
      allOf:
        - $ref: "#/components/schemas/ApplicantOutputBase"

    ApplicantOutputGet:
      type: object
      required: [id]
      allOf:
        - $ref: "#/components/schemas/ApplicantOutputBase"

    ApplicantInputPatch:
      type: object
      properties:
        email:
          type: string
          format: email
          example: david.vincent@courriel.ml

    ApplicantOutputPatch:
      type: object
      required: [id]
      allOf:
        - $ref: "#/components/schemas/ApplicantOutputBase"

    ApplicantOutputAnonymize:
      type: object
      required: [id]
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/ApplicantId"
      allOf:
        - $ref: "#/components/schemas/ApplicantsLinks"
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/ApplicantOutputBase"
        ######################### Applicant Utils schemas #####################
    ApplicantId:
      type: string
      description: Applicant unique identifier.
      pattern: ^aplt_\w+$
      example: aplt_tkoi5db4hryu5cei5vwoabr7we

    ApplicantsLinks:
      type: object
      required: [_links]
      properties:
        _links:
          allOf:
            - $ref: "#/components/schemas/SelfLink"

    ApplicantLink:
      type: object
      required: [applicant]
      properties:
        applicant:
          $ref: "#/components/schemas/HalLink"
        #######################################################################
    #######################################################################

    ################## Identity Verification schemas ######################
    IdentityVerificationBase:
      type: object
      properties:
        user_journey_id:
          allOf:
            - $ref: "#/components/schemas/UserJourneyId"
        applicant_id:
          allOf:
            - $ref: "#/components/schemas/ApplicantId"
        declared_data:
          $ref: "#/components/schemas/DeclaredData"
        webhook_url:
          type: string
          format: uri

    IdentityVerificationInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationBase"

    IdentityVerificationOutputBase:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/VerificationStatuses"
        response_codes:
          type: array
          items:
            $ref: '#/components/schemas/ResponseCodes'
        verified_identity:
          allOf:
            - $ref: '#/components/schemas/VerificationIdentity'
        documents:
          type: array
          items:
            $ref: "#/components/schemas/Document"
        face:
          allOf:
            - $ref: '#/components/schemas/VerificationFace'
        verification_policy_version:
          type: string
          description: returned ONLY for certified verifications
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationBase"

    IdentityVerificationInputPost:
      type: object
      required: [declared_data, webhook_url, applicant_id]
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationInputBase"

    IdentityVerificationOutputPost:
      type: object
      required: [id, declared_data, status, webhook_url, _links, verification_policy_version, applicant_id, user_journey_id]
      properties:
        id:
          $ref: "#/components/schemas/IdentityVerificationId"
        _links:
          $ref: "#/components/schemas/IdentityVerificationLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityVerificationOutputBase"

    IdentityVerificationInputHelper:
      type: object
      required: [declared_data, webhook_url, redirect_url]
      properties:
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        redirect_url:
          type: string
          format: uri
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationInputBase"

    IdentityVerificationOutputHelper:
      type: object
      required: [id, declared_data, status, webhook_url, _links, verification_policy_version, redirect_url, applicant_id, user_journey_id]
      properties:
        id:
          $ref: "#/components/schemas/IdentityVerificationId"
        redirect_url:
          type: string
          format: uri
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        _links:
          $ref: "#/components/schemas/IdentityVerificationHelperLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityVerificationOutputBase"

    IdentityVerificationOutputGet:
      type: object
      required: [id, declared_data, status, webhook_url, _links, verification_policy_version, applicant_id, redirect_url, user_journey_id]
      properties:
        id:
          $ref: "#/components/schemas/IdentityVerificationId"
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        redirect_url:
          type: string
          format: uri
        _links:
          $ref: "#/components/schemas/IdentityVerificationHelperLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityVerificationOutputBase"

    IdentityVerificationOutputAnonymize:
      type: object
      required: [id, status, webhook_url, _links, verification_policy_version, applicant_id, redirect_url, user_journey_id]
      properties:
        id:
          $ref: "#/components/schemas/IdentityVerificationId"
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        redirect_url:
          type: string
          format: uri
        _links:
          $ref: "#/components/schemas/IdentityVerificationLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityVerificationOutputBase"

    IdentityVerificationOutputPdfReport:
      type: object
      properties:
        pdf_report:
          type: string
          format: uri
        ############### Identity Verification Utils schemas ###################
    VerificationStatuses:
      type: string
      description: Status of the verification.
      enum:
        - pending
        - capture_in_progress
        - checks_in_progress
        - approved
        - declined
        - retry_required
        - refused

    IdentityVerificationHelperLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/SelfLink"
        - $ref: "#/components/schemas/ApplicantLink"
        - $ref: "#/components/schemas/ActiveLink"

    IdentityVerificationLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/SelfLink"
        - $ref: "#/components/schemas/ApplicantLink"

    IdentityVerificationId:
      type: string
      description: Identity verification unique identifier.
      pattern: ^idv_\w+$
      example: idv_tkoi5db4hryu5cei5vwoabr7we
      #######################################################################
    #######################################################################

    ######################## Identity Attempt schemas #####################
    IdentityAttemptBase:
      type: object
      properties:
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        client_information:
          $ref: "#/components/schemas/IdentityClientInformation"
        redirect_url:
          type: string
          format: uri

    IdentityVerificationAttemptInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/IdentityAttemptBase"

    IdentityVerificationAttemptOutputBase:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: "#/components/schemas/AttemptStates"
        response_codes:
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/ResponseCodes"
        applicant_session_information:
          $ref: "#/components/schemas/IdentityVerificationApplicantSessionInformation"
        _links:
          allOf:
            - $ref: "#/components/schemas/AttemptLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/IdentityAttemptBase"

    IdentityVerificationAttemptOutputList:
      type: object
      required: [total_count, skip, limit, _links, data]
      properties:
        data:
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/IdentityVerificationAttemptOutputGet"
      allOf:
        - $ref: "#/components/schemas/BaseOutputList"

    IdentityVerificationAttemptInputPost:
      type: object
      required: [redirect_url]
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationAttemptInputBase"

    IdentityVerificationAttemptOutputPost:
      type: object
      required: [id, applicant_session_information, status, redirect_url, response_codes, _links]
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationAttemptOutputBase"

    IdentityVerificationAttemptOutputGet:
      type: object
      required: [id, applicant_session_information, status, redirect_url, response_codes, _links]
      allOf:
        - $ref: "#/components/schemas/IdentityVerificationAttemptOutputBase"
        ###################### Identity Attempt Utils schemas ####################
    AttemptStates:
      type: string
      description: States of an attempt.
      enum:
        - pending_redirection
        - capture_in_progress
        - checks_in_progress
        - completed
        - expired
        - capture_aborted
        - capture_refused
        - checks_inconclusive

    AttemptLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/ActiveLink"
        - $ref: "#/components/schemas/SelfLink"

    IdentityClientInformation:
      type: object
      properties:
        pre_selected_residence_country:
          $ref: "#/components/schemas/CountryCodeIso2"
        pre_selected_document_issuing_country:
          $ref: "#/components/schemas/CountryCodeIso2"
        pre_selected_document_type:
          $ref: "#/components/schemas/DocumentTypes"

    SelectedDocument:
      type: object
      description: The code giving more details about the result.
      properties:
        country:
          $ref: "#/components/schemas/CountryCodeIso2"
        document_type:
          $ref: "#/components/schemas/DocumentTypes"

    BaseApplicantSessionInformation:
      type: object
      properties:
        ip_address:
          type: string
          description: Ip address of the applicant during the session
          example: "123:456:789:00"

    IdentityVerificationApplicantSessionInformation:
      type: object
      properties:
        selected_documents:
          description: Documents selected by the applicant in selection order
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/SelectedDocument"
      allOf:
        - $ref: "#/components/schemas/BaseApplicantSessionInformation"
        ############################################################################
    #######################################################################

    ######################### Face Attempt schemas ########################
    FaceAttemptBase:
      type: object
      properties:
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
        client_information:
          $ref: "#/components/schemas/FaceAttemptClientInformation"
        redirect_url:
          type: string
          format: uri

    FaceAuthenticationAttemptInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/FaceAttemptBase"

    FaceAuthenticationAttemptOutputBase:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: "#/components/schemas/AttemptStates"
        response_codes:
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/ResponseCodes"
        applicant_session_information:
          $ref: "#/components/schemas/FaceAuthenticationApplicantSessionInformation"
        _links:
          allOf:
            - $ref: "#/components/schemas/AttemptLinks"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/FaceAttemptBase"

    FaceAuthenticationAttemptResponseList:
      type: object
      required: [ total_count, skip, limit, _links, data ]
      properties:
        data:
          type: array
          minItems: 0
          items:
            $ref: "#/components/schemas/FaceAuthenticationAttemptOutputGet"
      allOf:
        - $ref: "#/components/schemas/BaseOutputList"

    FaceAuthenticationAttemptInputPost:
      type: object
      required: [redirect_url]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationAttemptInputBase"

    FaceAuthenticationAttemptOutputPost:
      type: object
      required: [id, applicant_session_information, status, redirect_url, response_codes, _links]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationAttemptOutputBase"

    FaceAuthenticationAttemptOutputGet:
      type: object
      required: [id, applicant_session_information, status, redirect_url, response_codes, _links]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationAttemptOutputBase"

          ###################### Face Attempt Utils schemas ####################
    FaceAuthenticationApplicantSessionInformation:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseApplicantSessionInformation"

    FaceAttemptClientInformation:
      type: object
      properties:
        pre_selected_residence_country:
          $ref: "#/components/schemas/CountryCodeIso2"
          ######################################################################
    #######################################################################

    ###################### Face Authentication schemas ####################
    FaceAuthenticationBase:
      type: object
      properties:
        user_journey_id:
          $ref: "#/components/schemas/UserJourneyId"
        applicant_id:
          $ref: "#/components/schemas/ApplicantId"
        webhook_url:
          type: string
          format: uri

    FaceAuthenticationInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationBase"

    FaceAuthenticationOutputBase:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/FaceAuthenticationId"
        status:
          $ref: "#/components/schemas/VerificationStatuses"
        response_codes:
          type: array
          items:
            $ref: '#/components/schemas/ResponseCodes'
        _links:
          $ref: "#/components/schemas/FaceAuthenticationLinks"
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationBase"
        - $ref: "#/components/schemas/DatedObject"

    FaceAuthenticationInputPost:
      type: object
      required: [webhook_url, applicant_id, user_journey_id]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationInputBase"

    FaceAuthenticationOutputPost:
      type: object
      required: [id, status, webhook_url, applicant_id, user_journey_id, _links]
      properties:
        face:
          $ref: '#/components/schemas/VerificationFace'
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationOutputBase"

    FaceAuthenticationOutputGet:
      type: object
      required: [id, status, webhook_url, applicant_id, user_journey_id, _links]
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationOutputBase"

    FaceAuthenticationOutputAnonymize:
      type: object
      required: [id, status, webhook_url, applicant_id, user_journey_id, _links]
      properties:
        face:
          $ref: '#/components/schemas/VerificationFace'
      allOf:
        - $ref: "#/components/schemas/FaceAuthenticationOutputBase"

        ################### Face Authentication Utils schemas #################
    FaceAuthenticationId:
      type: string
      description: Face authentication unique identifier.
      pattern: ^fav_\w+$
      example: fav_tkoi5db4hryu5cei5vwoabr7we

    FaceAuthenticationLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/SelfLink"
        - $ref: "#/components/schemas/ApplicantLink"
        #######################################################################
    #######################################################################

    ################## AML Verifications schemas ##########################
    AMLVerificationBase:
      type: object
      allOf:
        - properties:
            webhook_url:
              type: string
              format: uri
            applicant_id:
              allOf:
                - $ref: "#/components/schemas/ApplicantId"
            search_parameters:
              $ref: "#/components/schemas/SearchParameters"
            monitored:
              type: boolean

    AMLVerificationInputBase:
      type: object
      allOf:
        - $ref: "#/components/schemas/AMLVerificationBase"

    AMLVerificationOutputBase:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/AMLVerificationStatuses"
        _links:
          allOf:
            - $ref: "#/components/schemas/AMLVerificationLinks"
      allOf:
        - $ref: "#/components/schemas/AMLVerificationBase"

    AMLVerificationInputPost:
      type: object
      required: [webhook_url, applicant_id, search_parameters]
      allOf:
        - $ref: "#/components/schemas/AMLVerificationInputBase"

    AMLVerificationOutputPost:
      type: object
      required: [id, status, webhook_url, _links, applicant_id, search_parameters]
      properties:
        id:
          $ref: "#/components/schemas/AMLVerificationId"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/AMLVerificationOutputBase"

    AMLVerificationOutputGet:
      type: object
      required: [id, status, webhook_url, _links, applicant_id, search_parameters]
      properties:
        id:
          $ref: "#/components/schemas/AMLVerificationId"
      allOf:
        - $ref: "#/components/schemas/DatedObject"
        - $ref: "#/components/schemas/AMLVerificationOutputBase"

        ############### AML Verifications Utils schemas #######################
    AMLVerificationId:
      type: string
      description: AML verification unique identifier.
      pattern: ^amlv_\w+$
      example: amlv_tkoi5db4hryu5cei5vwoabr7we

    AMLVerificationStatuses:
      type: string
      description: Status of the AML verification.
      enum:
        - created
        - screening_in_progress
        - approved
        - declined
        - review_required

    SearchParameters:
      type: object
      required: [configuration_identifier]
      description: ComplyAdvantage search inputs
      properties:
        configuration_identifier:
          type: string
          description: Configuration identifier
          example: "12345678-1234-1234-1234-123456789012"

    AMLVerificationLinks:
      type: object
      allOf:
        - $ref: "#/components/schemas/SelfLink"
        - $ref: "#/components/schemas/ApplicantLink"
        #######################################################################
    #######################################################################

  examples:
    identity_verification_creation_request_body_helper_min:
      value:
        declared_data:
          name: David Vincent
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_creation_request_body_helper_max:
      value:
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          name: John Smith
          birth_date: '1934-10-02'
        phone_number:
          country_code: '+1'
          number: '5555550102'
        redirect_url: https://example.com?query-param=hello
        webhook_url: https://my.api/events/

    identity_verification_creation_request_body_min_plus_aplt:
      value:
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          name: David Vincent
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_creation_response_body_helper:
      value:
        id: idv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: pending
        response_codes: []
        declared_data:
          name: David Vincent
          birth_date: 1934-10-02
        documents: []
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    identity_verification_creation_request_body_min:
      value:
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          name: John Smith
        webhook_url: "https://my.api/events/"

    identity_verification_creation_request_body_max:
      value:
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        declared_data:
          name: David Vincent
          birth_date: 1934-10-02
        webhook_url: https://my.api/events/

    identity_verification_creation_response_body:
      value:
        id: idv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: created
        response_codes: []
        declared_data:
          name: David Vincent
          birth_date: 1934-10-02
        documents: []
        webhook_url: https://my.api/events/
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"

    identity_verification_response_body:
      value:
        id: idv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: declined
        response_codes:
          - { "code": 61310, "summary": "document_front_not_captured" }
          - { "code": 62102, "summary": "document_not_accepted" }
        verified_identity:
          full_name: David Vincent
          birth_date: 1934-10-02
        declared_data:
          name: David Vincent
          birth_date: 1934-10-02
        documents:
          - full_name: David Vincent
            birth_date: 1934-10-02
            document_type: ID
            document_issuing_country: US
            front_image_signed_url: https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/tight_crops/FRA-I5-Front-bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921906596.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163228Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=87d8467ab92cbad7c00171af28e613d495f3ff441ce0ea59dd013d68abc50555
        face:
          image_signed_url: https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4
        phone_number:
          country_code: "+1"
          number: "2068133616"
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    identity_verification_anonymization_response_body:
      value:
        id: idv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: pending
        response_codes: []
        phone_number:
          country_code: '+1'
          number: '5555550102'
        documents: []
        webhook_url: https://my.api/events/
        redirect_url: https://myweb.site?query-param=hello
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"

    identity_verification_pdf_response_body:
      value:
        pdf_report: www.pdf.com

    identity_verification_attempt_list_response_body:
      value:
        total_count: 2
        skip: 10
        limit: 10
        data:
          - id: "iatp_tkoi5db4hryu5cei5vwoabrPoQ"
            created_on: 2017-07-21T17:32:28Z
            modified_on: 2017-07-21T17:40:32Z
            status: "checks_in_progress"
            response_codes: []
            phone_number:
              country_code: "+1"
              number: "2068133616"
            redirect_url: "https://myweb.site?query-param=hello"
            client_information:
              pre_selected_residence_country: "FR"
              pre_selected_document_issuing_country: FR
              pre_selected_document_type: ID
            applicant_session_information:
              ip_address: "123.123.123.01"
            _links:
              self:
                href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we/attempts/iatp_idv_tkoi5db4hryu5cei5vwoabr7we"
              verification_url:
                href: "https://id.ubble.ai/4hryu5cei5/"
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/{verification_id}/attempts"
          next:
            href: "https://api.ubble.ai/v2/identity-verifications/{verification_id}/attempts?..."
          previous:
            href: "https://api.ubble.ai/v2/identity-verifications/{verification_id}/attempts?..."

    attempt_creation_request_body_min:
      value:
        redirect_url: https://myweb.site?query-param=hello

    identity_attempt_creation_request_body_max:
      value:
        phone_number:
          country_code: "+1"
          number: "2068133616"
        client_information:
          pre_selected_residence_country: "FR"
          pre_selected_document_issuing_country: FR
          pre_selected_document_type: ID
        redirect_url: https://myweb.site?query-param=hello

    identity_verification_attempt_creation_response_body:
      value:
        id: "iatp_tkoi5db4hryu5cei5vwoabrPoQ"
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        status: completed
        response_codes: []
        phone_number:
          country_code: "+1"
          number: "2068133616"
        client_information:
          pre_selected_residence_country: "FR"
          pre_selected_document_issuing_country: FR
          pre_selected_document_type: ID
        redirect_url: https://myweb.site?query-param=hello
        applicant_session_information:
          ip_address: 33.333.333.33
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we/attempts/iatp_idv_tkoi5db4hryu5cei5vwoabr7we"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    identity_verification_attempt_get_response_body:
      value:
        id: "iatp_tkoi5db4hryu5cei5vwoabrPoQ"
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        phone_number:
          country_code: "+1"
          number: "2068133616"
        redirect_url: "https://myweb.site?query-param=hello"
        status: "checks_in_progress"
        response_codes: []
        client_information:
          pre_selected_residence_country: FR
          pre_selected_document_issuing_country: FR
          pre_selected_document_type: ID
        applicant_session_information:
          ip_address: "123.123.123.01"
          selected_documents:
            - country: "FR"
              document_type: "Passport"
        _links:
          self:
            href: "https://api.ubble.ai/v2/identity-verifications/idv_tkoi5db4hryu5cei5vwoabr7we/attempts/iatp_idv_tkoi5db4hryu5cei5vwoabr7we"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    applicant_creation_request_body:
      value:
        external_applicant_id: ext_osdfdfdb4hryu5cei5vwoabrk5k
        email: david.vincent@courriel.ml

    applicant_response_body:
      value:
        id: aplt_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        external_applicant_id: ext_osdfdfdb4hryu5cei5vwoabrk5k
        email: david.vincent@courriel.ml
        _links:
          self:
            href: https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we

    applicant_patch_request_body:
      value:
        email: david.vincent@courriel.ml

    applicant_response_body_anonymized:
      value:
        id: aplt_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        external_applicant_id: ext_osdfdfdb4hryu5cei5vwoabrk5k
        _links:
          self:
            href: https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we

    aml_verification_creation_request_body_min:
      value:
        search_parameters:
          configuration_identifier: 011e5c14-2222-738c-8852-dfdbbe53f233
        webhook_url: https://my.api/events/
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we

    aml_verification_creation_request_body_max:
      value:
        search_parameters:
          configuration_identifier: 011e5c14-2222-738c-8852-dfdbbe53f233
        webhook_url: https://my.api/events/
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        monitored: false

    aml_verification_response_body:
      value:
        id: amlv_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        status: created
        webhook_url: https://my.api/events/
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        search_parameters:
          configuration_identifier: 8eb79430-c014-41e5-be73-2c2c091322b8
        monitored: false
        _links:
          self:
            href: "https://api.ubble.ai/v2/aml-verifications/amlv_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"

    #    idv_identity_verification_creation_request_invalid_body:
    #      value:
    #        error_type: request_invalid
    #        error_codes:
    #          - declared_data__birth_date__invalid_format
    #          - declared_data__name__required
    #          - phone_number__country_code__invalid

    #    idv_identity_verification_unprocessable_entity_body:
    #      value:
    #        error_type: unprocessable_entity
    #        error_codes:
    #          - organization__no_configuration

    # Face Authentication
    face_authentication_creation_response_body:
      value:
        id: fav_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: declined
        response_codes:
          - { "code": 62403, "summary": "consent_unclear" }
          - { "code": 61402, "summary": "face_video_lighting_issue" }
        face:
          image_signed_url: https://storage-b.env.ubble.ai/ubble-ai/NDYOOVHGZPAQ/a54b3393-f02a-47c9-a9c5-2f6ee73560e1/bb603e2f-5de9-40f2-9631-8285a33c24c0/live_face/bb603e2f-5de9-40f2-9631-8285a33c24c0-1679921946714.png?response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=V9jgOdpOdeVSFTkA4ZsG%2F20230327%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230327T163223Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=2b7d87fec4f11f0df949da7beade2519cf1a51ce70fe9cc1cf0470d73f5340e4
        webhook_url: https://my.api/events/
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/fav_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"

    face_authentication_anonymization_response_body:
      value:
        id: fav_tkoi5db4hryu5cei5vwoabr7we
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        user_journey_id: usj_tkoi5db4hryu5cei5vwoabr7we
        applicant_id: aplt_tkoi5db4hryu5cei5vwoabr7we
        status: declined
        response_codes:
          - { "code": 62403, "summary": "consent_unclear" }
          - { "code": 61402, "summary": "face_video_lighting_issue" }
        webhook_url: https://my.api/events/
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/face_tkoi5db4hryu5cei5vwoabr7we"
          applicant:
            href: "https://api.ubble.ai/v2/applicants/aplt_tkoi5db4hryu5cei5vwoabr7we"

    face_authentication_attempt_get_response_body:
      value:
        id: "fatp_tkoi5db4hryu5cei5vwoabrPoQ"
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        phone_number:
          country_code: "+1"
          number: "2068133616"
        redirect_url: "https://myweb.site?query-param=hello"
        status: "checks_in_progress"
        response_codes: [ ]
        client_information:
          pre_selected_residence_country: FR
        applicant_session_information:
          ip_address: "123.123.123.01"
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts/{attempt_id}"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    face_authentication_attempt_creation_response_body:
      value:
        id: "fatp_tkoi5db4hryu5cei5vwoabrPoQ"
        created_on: 2017-07-21T17:32:28Z
        modified_on: 2017-07-21T17:40:32Z
        phone_number:
          country_code: "+1"
          number: "2068133616"
        client_information:
          pre_selected_residence_country: "FR"
        redirect_url: https://myweb.site?query-param=hello
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts/{attempt_id}"
          verification_url:
            href: "https://id.ubble.ai/4hryu5cei5/"

    face_attempt_creation_request_body_max:
      value:
        phone_number:
          country_code: "+1"
          number: "2068133616"
        client_information:
          pre_selected_residence_country: "FR"
          pre_selected_document_issuing_country: FR
          pre_selected_document_type: ID
        redirect_url: https://myweb.site?query-param=hello

    face_authentication_attempt_list_response_body:
      value:
        total_count: 2
        skip: 10
        limit: 10
        data:
          - id: "fatp_tkoi5db4hryu5cei5vwoabrPoQ"
            created_on: 2017-07-21T17:32:28Z
            modified_on: 2017-07-21T17:40:32Z
            status: "checks_in_progress"
            response_codes: []
            phone_number:
              country_code: "+1"
              number: "2068133616"
            redirect_url: "https://myweb.site?query-param=hello"
            client_information:
              pre_selected_residence_country: "FR"
            applicant_session_information:
              ip_address: "123.123.123.01"
            _links:
              verification_url:
                href: "https://id.ubble.ai/4hryu5cei5/"
          - id: "fatp_tkoi5db4hryu5cei5vwoabriom"
            created_on: 2017-07-21T16:30:28Z
            modified_on: 2017-07-21T16:32:32Z
            status: "checks_inconclusive"
            response_codes: [{
              "code": 61402,
              "summary": "face_video_lighting_issue"
            } ]
            phone_number:
              country_code: "+1"
              number: "2068133616"
            redirect_url: "https://myweb.site?query-param=hello"
            client_information:
              pre_selected_residence_country: "FR"
            applicant_session_information:
              ip_address: "123.123.123.01"
            _links:
              self:
                href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts/{attempt_id}"
              verification_url:
                href: "https://id.ubble.ai/4hryu5clik/"
        _links:
          self:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts"
          next:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts?..."
          previous:
            href: "https://api.ubble.ai/v2/face-authentications/{face_authentication_id}/attempts?..."